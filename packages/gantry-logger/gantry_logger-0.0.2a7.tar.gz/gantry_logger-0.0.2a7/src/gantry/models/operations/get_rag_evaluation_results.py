"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.components import getragevaluationresultsresponseresponse as components_getragevaluationresultsresponseresponse
from enum import Enum
from typing import Optional, Union

class Two(str, Enum):
    NAN = 'nan'


@dataclasses.dataclass
class GetRagEvaluationResultsRequest:
    evaluation_run_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'evaluation_run_id', 'style': 'simple', 'explode': False }})
    start: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': False }})
    limit: Optional[int] = dataclasses.field(default=10, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': False }})
    search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search', 'style': 'form', 'explode': False }})
    criteria_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'criteria_id', 'style': 'form', 'explode': False }})
    winner_version: Optional[Union[str, Two]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'winner_version', 'style': 'form', 'explode': False }})
    



@dataclasses.dataclass
class GetRagEvaluationResultsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    get_rag_evaluation_results_response_response: Optional[components_getragevaluationresultsresponseresponse.GetRagEvaluationResultsResponseResponse] = dataclasses.field(default=None)
    r"""OK"""
    

