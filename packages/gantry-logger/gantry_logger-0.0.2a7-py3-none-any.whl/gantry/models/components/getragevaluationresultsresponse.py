"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .ragevaluationresult import RagEvaluationResult
from .summarynotesresponse import SummaryNotesResponse
from dataclasses_json import Undefined, dataclass_json
from gantry import utils
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetRagEvaluationResultsResponse:
    r"""Base Pydantic model to use when validating API request data instead
    of pydantic.BaseModel.
    This raises validation errors as GantryRequestValidationError so they can
    be caught and returned as 400s.
    """
    evaluation_results: List[RagEvaluationResult] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evaluation_results') }})
    summary_notes: SummaryNotesResponse = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary_notes') }})
    start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'exclude': lambda f: f is None }})
    has_next: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_next'), 'exclude': lambda f: f is None }})
    

