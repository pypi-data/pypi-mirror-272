"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .criteriastats import CriteriaStats
from .criteriastatuscount import CriteriaStatusCount
from .recordstatuscount import RecordStatusCount
from .topicstats import TopicStats
from dataclasses_json import Undefined, dataclass_json
from gantry import utils
from typing import Dict, List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvalStats:
    total_record_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_record_count') }})
    record_status_count: RecordStatusCount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('record_status_count') }})
    all_criteria_stats: CriteriaStatusCount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_criteria_stats') }})
    r"""Criteria status aggregated at record level"""
    criteria_stats: Optional[Dict[str, CriteriaStats]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('criteria_stats'), 'exclude': lambda f: f is None }})
    ordered_criteria_stats: Optional[List[CriteriaStats]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ordered_criteria_stats'), 'exclude': lambda f: f is None }})
    topic_stats: Optional[List[TopicStats]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_stats'), 'exclude': lambda f: f is None }})
    

