"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from gantry import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LogErrorRequest:
    r"""Base Pydantic model to use when validating API request data instead
    of pydantic.BaseModel.
    This raises validation errors as GantryRequestValidationError so they can
    be caught and returned as 400s.
    """
    exception_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exception_type') }})
    exception_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exception_value') }})
    exception_traceback: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exception_traceback'), 'exclude': lambda f: f is None }})
    

