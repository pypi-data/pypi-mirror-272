Metadata-Version: 2.1
Name: pixell
Version: 0.23.14
Summary: pixell
Home-page: https://github.com/simonsobs/pixell
Author: Simons Observatory Collaboration Analysis Library Task Force
Author-email: mathewsyriac@gmail.com
License: BSD license
Keywords: pixell
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
License-File: LICENSE
License-File: AUTHORS.rst
Requires-Dist: numpy >=1.20.0
Requires-Dist: astropy >=2.0
Requires-Dist: setuptools >=39
Requires-Dist: h5py >=2.7
Requires-Dist: scipy >=1.0
Requires-Dist: python-dateutil >=2.7
Requires-Dist: cython <3.0.4
Requires-Dist: healpy >=1.13
Requires-Dist: matplotlib >=2.0
Requires-Dist: pyyaml >=5.0
Requires-Dist: Pillow >=5.3.0
Requires-Dist: pytest-cov >=2.6
Requires-Dist: coveralls >=1.5
Requires-Dist: pytest >=4.6
Requires-Dist: ducc0 >=0.34.0
Requires-Dist: numba >=0.54.0
Provides-Extra: fftw
Requires-Dist: pyFFTW >=0.10 ; extra == 'fftw'
Provides-Extra: mpi
Requires-Dist: mpi4py >=2.0 ; extra == 'mpi'

=======
pixell
=======

.. image:: https://github.com/simonsobs/pixell/workflows/Build/badge.svg
           :target: https://github.com/simonsobs/pixell/actions?query=workflow%3ABuild

.. image:: https://readthedocs.org/projects/pixell/badge/?version=latest
           :target: https://pixell.readthedocs.io/en/latest/?badge=latest
		   :alt: Documentation Status

.. image:: https://codecov.io/gh/simonsobs/pixell/branch/master/graph/badge.svg?token=DOIG32B6NT
	   :target: https://codecov.io/gh/simonsobs/pixell

.. image:: https://badge.fury.io/py/pixell.svg
		       :target: https://badge.fury.io/py/pixell

``pixell`` is a library for loading, manipulating and analyzing maps stored in rectangular pixelization. It is mainly targeted for use with maps of the sky (e.g. CMB intensity and polarization maps, stacks of 21 cm intensity maps, binned galaxy positions or shear) in cylindrical projection, but its core functionality is more general. It extends numpy's ``ndarray`` to an ``ndmap`` class that associates a World Coordinate System (WCS) with a numpy array.  It includes tools for Fourier transforms  (through numpy or pyfft) and spherical harmonic transforms (through ducc0_) of such maps and tools for visualization (through the Python Image Library). 


* Free software: BSD license
* Documentation: https://pixell.readthedocs.io.
* Tutorials_

Dependencies
------------

* Python>=3.7
* gcc/gfortran or Intel compilers (clang might not work out of the box), if compiling from source
* ducc0_, healpy, Cython, astropy, numpy, scipy, matplotlib, pyyaml, h5py, Pillow (Python Image Library)

On MacOS, and other systems with non-traditional environments, you should specify the following standard environment variables:

* ``CC``: C compiler (example: ``gcc``)
* ``CXX``: C++ compiler (example: ``g++``)
* ``FC``: Fortran compiler (example: ``gfortran``)

We recommend using ``gcc`` installed from Homebrew to access these compilers on
MacOS, and you should make sure to point e.g. ``$CC`` to the full path of your gcc installation,
as the ``gcc`` name usually points to the Apple ``clang`` install by default.

Runtime threading behaviour
---------------------------

Certain parts of ``pixell`` are parallelized using OpenMP, with the underlying ``ducc0``
library using pthreads. By default, these libraries use the number of cores on your
system to determine the number of threads to use. If you wish to override this behaviour,
you can use two environment variables:

- ``OMP_NUM_THREADS`` will set both the number of ``pixell`` threads and ``ducc0`` threads.
- ``DUCC0_NUM_THREADS`` will set the number of threads for the ``ducc0`` library to use,
  overwriting ``OMP_NUM_THREADS`` if both are set. ``pixell`` behaviour is not affected.

If you are using a modern chip (e.g. Apple M series chips, Intel 12th Gen or newer) that
have both efficiency and performance cores, you may wish to set ``OMP_NUM_THREADS`` to
the number of performance cores in your system. This will ensure that the efficiency cores
are not used for the parallelized parts of ``pixell`` and ``ducc0``.

Installing
----------

Make sure your ``pip`` tool is up-to-date. To install ``pixell``, run:

.. code-block:: console
		
   $ pip install pixell --user
   $ test-pixell

This will install a pre-compiled binary suitable for your system (only Linux and Mac OS X with Python>=3.7 are supported). Note that you need ``~/.local/bin`` to be in your ``PATH`` for the latter ``test-pixell`` to work.

If you require more control over your installation, e.g. using Intel compilers, please see the section below on compiling from source.  The ``test-pixell`` command will run a suite of unit tests.

Compiling from source (advanced / development workflow)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For compilation instructions specific to NERSC/cori, see NERSC_.

For all other, below are general instructions.

First, download the source distribution or ``git clone`` this repository. You can work from ``master`` or checkout one of the released version tags (see the Releases section on Github). Then change into the cloned/source directory.


Run ``setup.py``
~~~~~~~~~~~~~~~~

If not using Intel compilers (see below), build the package using 

.. code-block:: console
		
   $ python setup.py build_ext -i

You may now test the installation:

.. code-block:: console
		
   $ py.test pixell/tests/
   
If the tests pass, you can install the package (optionally with ``-e`` if you would like to edit the files after installation)
   
.. code-block:: console

   $ python setup.py install --user

   
Intel compilers
~~~~~~~~~~~~~~~

Intel compilers require you to modify the build step above as follows

.. code-block:: console
		
   $ python setup.py build_ext -i --fcompiler=intelem --compiler=intelem

On some systems, further specification might be required (make sure to get a fresh copy of the repository before trying out a new install method), e.g.:

.. code-block:: console

   $ LDSHARED="icc -shared" LD=icc LINKCC=icc CC=icc python setup.py build_ext -i --fcompiler=intelem --compiler=intelem



Contributions
-------------

If you have write access to this repository, please:

1. create a new branch
2. push your changes to that branch
3. merge or rebase to get in sync with master
4. submit a pull request on github

If you do not have write access, create a fork of this repository and proceed as described above. For more details, see Contributing_.
  
.. _ducc0: https://pypi.org/project/ducc0/
.. _Tutorials: https://github.com/simonsobs/pixell_tutorials/
.. _Contributing: https://pixell.readthedocs.io/en/latest/contributing.html
.. _NERSC: https://pixell.readthedocs.io/en/latest/nersc.html
.. _MACOSX: https://github.com/simonsobs/pspy/blob/master/INSTALL_MACOS.rst


=======
History
=======

0.21.0 (2023-10-19)
-------------------

Changes relative to 0.19.2 include:

* More miscellaneous fixes after transition to ducc0
* More work on wavelets
* We now provide MacOS x86_64 wheels
* Improved build system that respects choices of CC, CXX, and FC

0.19.2 (2023-08-18)
-------------------

Changes relative to 0.19.0 include:

* Important bugfixes for the migration from libsharp2 to ducc0
* Improved SHT unit tests


0.19.0 (2023-07-14)
-------------------

Changes relative to 0.17.3 include:

* Migrate fully from libsharp2 to ducc0 (for curved sky functions)
* Temporary suspension of MacOS pip binaries (use `pip install pixell==0.17.3` for Macs in the meantime)
* Miscellaneous fixes

0.17.3 (2023-03-17)
-------------------

Changes relative to 0.17.2 include:

* More support for fejer1
  
0.17.2 (2023-02-21)
-------------------

Changes relative to 0.17.1 include:

* Build for Python 3.11

0.17.1 (2023-01-26)
-------------------

Changes relative to 0.16.0 include:

* Bilinear map-making pixel window function
* Miscellaneous new functions and API improvements
* Miscellaneous bug fixes
* Fixes for Apple Silicon



0.16.0 (2022-06-08)
-------------------

Changes relative to 0.15.3 include:

* Wavelet analysis
* Fast C-based source simulation
* Fast vectorized radial profile binning
* Fixes and improvements to HDF5 I/O
* Fixes to OSX support


0.15.3 (2022-02-12)
-------------------

Changes relative to 0.15.1 include:

* New wheels that fix numpy binary incompatibility errors


0.15.1 (2022-01-23)
-------------------

Changes relative to 0.14.3 include:

* More flexible enmap.read_map_geometry
* Add Python 3.10 support, drop Python 3.6 support

0.14.3 (2021-12-13)
-------------------

Changes relative to 0.14.2 include:

* Updates to enmap.insert, UHTs and WCS string accuracy

0.14.2 (2021-11-23)
-------------------

Changes relative to 0.14.1 include:

* An important bugfix for enmap.downgrade when the `op` argument is passed. This bug has been present since v0.14.0 and in commits on master since Aug 12, 2021.

0.14.1 (2021-11-16)
-------------------

Changes relative to 0.13.2 include:

* A breaking change to map2alm where it no longer approximates WCS if ring weights are unavailable
* Miscellaneous bug fixes
* ducc0 FFT support and fast rotate_alm
* Tiled map support
* New healpix <-> rectpix reprojection API


0.13.2 (2021-07-16)
-------------------

Changes relative to 0.13.1 include:

* Added binaries for MacOS 11 Big Sur

0.13.1 (2021-07-08)
-------------------

Changes relative to 0.13.0 include:

* Fixes to the MacOS wheel building


0.13.0 (2021-07-08)
-------------------

Changes relative to 0.12.1 include:

* Matched filtering in a new analysis module
* Conjugate gradients solver
* Discrete cosine transforms
* Miscellaneous bug fixes
  

0.12.1 (2021-04-30)
-------------------

Changes relative to 0.12.0 include:

* Patch to fix numpy binary incompatibility issues
  caused by changes to the numpy C API. We now require
  numpy >1.20.


0.12.0 (2021-04-13)
-------------------

Changes relative to 0.11.2 include:

* We now use libsharp2 instead of libsharp, which has signficantly faster SHTs
* Major breaking change: the meaning of the "iau" flag has been
  corrected and reversed. The default behaviour of map2harm and other functions
  using this flag will be different.
* Unified harmonic transforms module
* postage_stamp removed in favor of thumbnails
* Adjoint harmonic transforms
  
0.11.2 (2021-02-04)
-------------------

Changes relative to 0.11.0 include:

* Bug-fix for distance_transform when using rmax


0.11.0 (2021-02-02)
-------------------

Changes relative to 0.10.3 include:

* Bug-fix for enmap.project that led to crashes
* enplot improvements
* Improvements to fft and ifft overhead
* alm filtering API improvements
* Changes to CMB dipole parameter
* Allow lmax!=mmax in curvedsky routines
* Python 3.9 builds and Github actions instead of Travis


0.10.3 (2020-06-26)
-------------------

Changes relative to 0.10.2 include:

* Bug fix for automatic IAU -> COSMO, recognizes POLCCONV instead of POLCONV.

0.10.2 (2020-06-26)
-------------------

Changes relative to 0.9.6 include:

* Automatically converts maps recognized to be in IAU polarization convention
  (through the FITS header) to COSMO convention by flipping the sign of U
* Fixes a centering issue in reproject.thumbnails
* Optimizes posmap for separable projections and pixsizemap for cylindrical
  projections making these functions orders of magnitude faster for CAR (and
  other projections)
* A test script test-pixell is distributed with the package

0.9.6 (2020-06-22)
------------------

Changes relative to 0.6.0 include:

* Ability to read compressed FITS images
* Fixed a bug to make aberration and modulation accurate to all orders
* Expanded alm2cl to handle full cross-spectra and broadcasting

0.6.0 (2019-09-18)
------------------

Changes relative to 0.5.2 include:

* Improvements in accuracy for map extent, area and Fourier wavenumbers
* Spherical harmonic treatment consistent with healpy
* Additional helper functions, e.g enmap.insert
* Helper arguments, e.g. physical normalization for enmap.fft
* Bug fixes e.g. in rand_alm
* Improved installation procedure and documentation


0.5.2 (2019-01-22)
------------------

* API for most modules is close to converged
* Significant number of bug fixes and new features
* Versioning system implemented through versioneer and bumpversion
* Automated pixel level tests for discovering effects of low-level changes

  
0.1.0 (2018-06-15)
------------------

* First release on PyPI.

