"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

import compas_lcmtypes.stdlcm

class image_sync_t(object):
    __slots__ = ["header", "utime"]

    __typenames__ = ["compas_lcmtypes.stdlcm.header_t", "int64_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.header = compas_lcmtypes.stdlcm.header_t()
        self.utime = 0

    def encode(self):
        buf = BytesIO()
        buf.write(image_sync_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == compas_lcmtypes.stdlcm.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">q", self.utime))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != image_sync_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return image_sync_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = image_sync_t()
        self.header = compas_lcmtypes.stdlcm.header_t._decode_one(buf)
        self.utime = struct.unpack(">q", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if image_sync_t in parents: return 0
        newparents = parents + [image_sync_t]
        tmphash = (0x48b5ff4b7260fb91+ compas_lcmtypes.stdlcm.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if image_sync_t._packed_fingerprint is None:
            image_sync_t._packed_fingerprint = struct.pack(">Q", image_sync_t._get_hash_recursive([]))
        return image_sync_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", image_sync_t._get_packed_fingerprint())[0]

