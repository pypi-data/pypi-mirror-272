{"version":3,"file":"lib_index_js.48d46625a03ec356bfc7.js","mappings":"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","sources":["webpack://jupyterlab_pausable_contextual_help/./src/handler.ts","webpack://jupyterlab_pausable_contextual_help/./src/index.ts","webpack://jupyterlab_pausable_contextual_help/./src/kernelconnector.ts","webpack://jupyterlab_pausable_contextual_help/./src/myinspector.ts","webpack://jupyterlab_pausable_contextual_help/./src/tokens.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { Text } from '@jupyterlab/coreutils';\nimport { IRenderMimeRegistry, MimeModel } from '@jupyterlab/rendermime';\nimport { IDataConnector } from '@jupyterlab/statedb';\nimport { JSONExt, ReadonlyJSONObject } from '@lumino/coreutils';\nimport { IDisposable } from '@lumino/disposable';\nimport { Debouncer } from '@lumino/polling';\nimport { ISignal, Signal } from '@lumino/signaling';\nimport { IMyInspector } from './tokens';\n\n/**\n * An object that handles code inspection.\n */\nexport class InspectionHandler implements IDisposable, IMyInspector.IInspectable {\n  /**\n   * Construct a new inspection handler for a widget.\n   */\n  constructor(options: InspectionHandler.IOptions) {\n    this._connector = options.connector;\n    this._rendermime = options.rendermime;\n    this._debouncer = new Debouncer(this.onEditorChange.bind(this), 250);\n  }\n\n  /**\n   * A signal emitted when the myinspector should clear all items.\n   */\n  get cleared(): ISignal<InspectionHandler, void> {\n    return this._cleared;\n  }\n\n  /**\n   * A signal emitted when the handler is disposed.\n   */\n  get disposed(): ISignal<InspectionHandler, void> {\n    return this._disposed;\n  }\n\n  /**\n   * A signal emitted when an myinspector value is generated.\n   */\n  get inspected(): ISignal<InspectionHandler, IMyInspector.IMyInspectorUpdate> {\n    return this._inspected;\n  }\n\n  /**\n   * The editor widget used by the inspection handler.\n   */\n  get editor(): CodeEditor.IEditor | null {\n    return this._editor;\n  }\n  set editor(newValue: CodeEditor.IEditor | null) {\n    if (newValue === this._editor) {\n      return;\n    }\n    // Remove all of our listeners.\n    Signal.disconnectReceiver(this);\n\n    const editor = (this._editor = newValue);\n    if (editor) {\n      // Clear the myinspector in preparation for a new editor.\n      this._cleared.emit(void 0);\n      // Call onEditorChange to cover the case where the user changes\n      // the active cell\n      this.onEditorChange();\n      editor.model.selections.changed.connect(this._onChange, this);\n      editor.model.sharedModel.changed.connect(this._onChange, this);\n    }\n  }\n\n  /**\n   * Indicates whether the handler makes API inspection requests or stands by.\n   *\n   * #### Notes\n   * The use case for this attribute is to limit the API traffic when no\n   * myinspector is visible.\n   */\n  get standby(): boolean {\n    return this._standby;\n  }\n  set standby(value: boolean) {\n    this._standby = value;\n  }\n\n  /**\n   * Get whether the inspection handler is disposed.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources used by the handler.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._debouncer.dispose();\n    this._disposed.emit(void 0);\n    Signal.clearData(this);\n  }\n\n  /**\n   * Handle a text changed signal from an editor.\n   *\n   * #### Notes\n   * Update the hints myinspector based on a text change.\n   */\n  onEditorChange(customText?: string): void {\n    // If the handler is in standby mode, bail.\n    if (this._standby) {\n      return;\n    }\n\n    const editor = this.editor;\n\n    if (!editor) {\n      return;\n    }\n    const text = customText ? customText : editor.model.sharedModel.getSource();\n    const position = editor.getCursorPosition();\n    const offset = Text.jsIndexToCharIndex(editor.getOffsetAt(position), text);\n    const update: IMyInspector.IMyInspectorUpdate = { content: null };\n\n    const pending = ++this._pending;\n\n    void this._connector\n      .fetch({ offset, text })\n      .then(reply => {\n        // If handler has been disposed or a newer request is pending, bail.\n        if (!reply || this.isDisposed || pending !== this._pending) {\n          this._lastInspectedReply = null;\n          this._inspected.emit(update);\n          return;\n        }\n\n        const { data } = reply;\n\n        // Do not update if there would be no change.\n        if (\n          this._lastInspectedReply &&\n          JSONExt.deepEqual(this._lastInspectedReply, data)\n        ) {\n          return;\n        }\n\n        const mimeType = this._rendermime.preferredMimeType(data);\n        if (mimeType) {\n          const widget = this._rendermime.createRenderer(mimeType);\n          const model = new MimeModel({ data });\n\n          void widget.renderModel(model);\n          update.content = widget;\n        }\n\n        this._lastInspectedReply = reply.data;\n        this._inspected.emit(update);\n      })\n      .catch(reason => {\n        // Since almost all failures are benign, fail silently.\n        this._lastInspectedReply = null;\n        this._inspected.emit(update);\n      });\n  }\n\n  /**\n   * Handle changes to the editor state, debouncing.\n   */\n  private _onChange(): void {\n    void this._debouncer.invoke();\n  }\n\n  private _cleared = new Signal<InspectionHandler, void>(this);\n  private _connector: IDataConnector<\n    InspectionHandler.IReply,\n    void,\n    InspectionHandler.IRequest\n  >;\n  private _disposed = new Signal<this, void>(this);\n  private _editor: CodeEditor.IEditor | null = null;\n  private _inspected = new Signal<this, IMyInspector.IMyInspectorUpdate>(this);\n  private _isDisposed = false;\n  private _pending = 0;\n  private _rendermime: IRenderMimeRegistry;\n  private _standby = true;\n  private _debouncer: Debouncer;\n  private _lastInspectedReply: InspectionHandler.IReply['data'] | null = null;\n}\n\n/**\n * A namespace for inspection handler statics.\n */\nexport namespace InspectionHandler {\n  /**\n   * The instantiation options for an inspection handler.\n   */\n  export interface IOptions {\n    /**\n     * The connector used to make inspection requests.\n     *\n     * #### Notes\n     * The only method of this connector that will ever be called is `fetch`, so\n     * it is acceptable for the other methods to be simple functions that return\n     * rejected promises.\n     */\n    connector: IDataConnector<IReply, void, IRequest>;\n\n    /**\n     * The mime renderer for the inspection handler.\n     */\n    rendermime: IRenderMimeRegistry;\n  }\n\n  /**\n   * A reply to an inspection request.\n   */\n  export interface IReply {\n    /**\n     * The MIME bundle data returned from an inspection request.\n     */\n    data: ReadonlyJSONObject;\n\n    /**\n     * Any metadata that accompanies the MIME bundle returning from a request.\n     */\n    metadata: ReadonlyJSONObject;\n  }\n\n  /**\n   * The details of an inspection request.\n   */\n  export interface IRequest {\n    /**\n     * The cursor offset position within the text being inspected.\n     */\n    offset: number;\n\n    /**\n     * The text being inspected.\n     */\n    text: string;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// export * from './handler';\n// export * from './myinspector';\n// export * from './kernelconnector';\n// export * from './tokens';\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ILabShell,\n  ILayoutRestorer,\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\n// import { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport {\n  ICommandPalette,\n  MainAreaWidget,\n  WidgetTracker\n} from '@jupyterlab/apputils';\nimport { IConsoleTracker } from '@jupyterlab/console';\n//   import {\n//     IMyInspector,\n//     InspectionHandler,\n//     MyInspectorPanel,\n//     KernelConnector\n//   } from '@jupyterlab/inspector';\nimport { IMyInspector } from './tokens';\nimport { InspectionHandler } from './handler';\nimport { MyInspectorPanel } from './myinspector';\nimport { KernelConnector } from './kernelconnector';\n\n\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { inspectorIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\n\n/**\n * The command IDs used by the myinspector plugin.\n */\nnamespace CommandIDs {\n  export const open = 'myinspector:open';\n  export const close = 'myinspector:close';\n  export const toggle = 'myinspector:toggle';\n  export const trigger = 'myinspector:trigger';\n  export const toggleStandby = 'myinspector:toggleStandby';\n}\n\n/**\n * A service providing code introspection.\n */\nconst myinspector: JupyterFrontEndPlugin<IMyInspector> = {\n  id: 'jupyterlab_pausable_contextual_help:myinspector',\n  description: 'Provides the pausable code introspection widget.',\n  requires: [ITranslator],\n  optional: [ICommandPalette, ILauncher, ILayoutRestorer],\n  provides: IMyInspector,\n  autoStart: true,\n  activate: (\n    app: JupyterFrontEnd,\n    translator: ITranslator,\n    palette: ICommandPalette | null,\n    launcher: ILauncher | null,\n    restorer: ILayoutRestorer | null\n  ): IMyInspector => {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const caption = trans.__(\n            'Manually updating code documentation from the active kernel'\n    );\n    const openedLabel = trans.__('My Contextual Help');\n    const namespace = 'myinspector';\n    const datasetKey = 'jpMyInspector';\n    const tracker = new WidgetTracker<MainAreaWidget<MyInspectorPanel>>({\n      namespace\n    });\n\n    function isMyInspectorOpen() {\n      return myinspector && !myinspector.isDisposed;\n    }\n\n    function isStandby() {\n      // return myinspector && myinspector.content && myinspector.content.source && myinspector.content.source.standby;\n      if (myinspector && myinspector.content && myinspector.content.source) {\n        return myinspector.content.source.standby;\n      }\n      return false;\n    }\n\n    let source: IMyInspector.IInspectable | null = null;\n    let myinspector: MainAreaWidget<MyInspectorPanel>;\n    function openMyInspector(args: string): MainAreaWidget<MyInspectorPanel> {\n      if (!isMyInspectorOpen()) {\n        myinspector = new MainAreaWidget({\n          content: new MyInspectorPanel({ translator })\n        });\n        myinspector.id = 'jp-myinspector';\n        myinspector.title.label = openedLabel;\n        myinspector.title.icon = inspectorIcon;\n        void tracker.add(myinspector);\n        source = source && !source.isDisposed ? source : null;\n        myinspector.content.source = source;\n        myinspector.content.source?.onEditorChange(args);\n      }\n      if (!myinspector.isAttached) {\n        shell.add(myinspector, 'main', {\n          activate: false,\n          mode: 'split-right',\n          type: 'MyInspector'\n        });\n      }\n      shell.activateById(myinspector.id);\n      document.body.dataset[datasetKey] = 'open';\n      return myinspector;\n    }\n    function closeMyInspector(): void {\n      myinspector.dispose();\n      delete document.body.dataset[datasetKey];\n    }\n\n    // Add myinspector:open command to registry.\n    const showLabel = trans.__('Open My Contextual Help');\n    commands.addCommand(CommandIDs.open, {\n      caption,\n      isEnabled: () =>\n        !myinspector ||\n        myinspector.isDisposed ||\n        !myinspector.isAttached ||\n        !myinspector.isVisible,\n      label: showLabel,\n      icon: args => (args.isLauncher ? inspectorIcon : undefined),\n      execute: args => {\n        const text = args && (args.text as string);\n        const refresh = args && (args.refresh as boolean);\n        // if myinspector is open, see if we need a refresh\n        if (isMyInspectorOpen() && refresh)\n          myinspector.content.source?.onEditorChange(text);\n        else openMyInspector(text);\n      }\n    });\n\n    // Add myinspector:close command to registry.\n    const closeLabel = trans.__('Hide My Contextual Help');\n    commands.addCommand(CommandIDs.close, {\n      caption,\n      isEnabled: () => isMyInspectorOpen(),\n      label: closeLabel,\n      icon: args => (args.isLauncher ? inspectorIcon : undefined),\n      execute: () => closeMyInspector()\n    });\n\n    // Add myinspector:toggle command to registry.\n    const toggleLabel = trans.__('Show My Contextual Help');\n    commands.addCommand(CommandIDs.toggle, {\n      caption,\n      label: toggleLabel,\n      isToggled: () => isMyInspectorOpen(),\n      execute: args => {\n        if (isMyInspectorOpen()) {\n          closeMyInspector();\n        } else {\n          const text = args && (args.text as string);\n          openMyInspector(text);\n        }\n      }\n    });\n\n    // Add myinspector:trigger command to registry.\n    const triggerLabel = trans.__('Trigger My Contextual Help');\n    commands.addCommand(CommandIDs.trigger, {\n      caption,\n      isEnabled: () => isStandby(),\n      label: triggerLabel,\n      execute: () => {\n        if (myinspector && myinspector.content && myinspector.content.source && isStandby()) {\n          myinspector.content.source.standby = false;\n          myinspector.content.source?.onEditorChange();\n          myinspector.content.source.standby = true;\n        }\n      }\n    });\n\n    // Add myinspector:toggleStandby command to registry.\n    const toggleStandbyLabel = trans.__('Auto Update My Contextual Help');\n    commands.addCommand(CommandIDs.toggleStandby, {\n      caption,\n      isToggled: () => !isStandby(),\n      label: toggleStandbyLabel,\n      execute: () => {\n        if (myinspector && myinspector.content && myinspector.content.source) {\n          if (isStandby()) {\n            myinspector.content.source.standby = false;\n          } else {\n            myinspector.content.source.standby = true;\n          }\n        }\n      }\n    });\n\n    // Add open command to launcher if possible.\n    if (launcher) {\n      launcher.add({ command: CommandIDs.open, args: { isLauncher: true } });\n    }\n\n    // Add toggle command to command palette if possible.\n    if (palette) {\n      palette.addItem({ command: CommandIDs.toggle, category: toggleLabel });\n    }\n\n    // Handle state restoration.\n    if (restorer) {\n      void restorer.restore(tracker, {\n        command: CommandIDs.toggle,\n        name: () => 'myinspector'\n      });\n    }\n\n    // Create a proxy to pass the `source` to the current myinspector.\n    const proxy = Object.defineProperty({} as IMyInspector, 'source', {\n      get: (): IMyInspector.IInspectable | null =>\n        !myinspector || myinspector.isDisposed ? null : myinspector.content.source,\n      set: (src: IMyInspector.IInspectable | null) => {\n        source = src && !src.isDisposed ? src : null;\n        if (myinspector && !myinspector.isDisposed) {\n          myinspector.content.source = source;\n        }\n      }\n    });\n\n    return proxy;\n  }\n};\n\n/**\n * An extension that registers consoles for inspection.\n */\nconst consoles: JupyterFrontEndPlugin<void> = {\n  // FIXME This should be in @jupyterlab/console-extension\n  id: 'jupyterlab_pausable_contextual_help:consoles',\n  description: 'Adds my code introspection support to consoles.',\n  requires: [IMyInspector, IConsoleTracker, ILabShell],\n  autoStart: true,\n  activate: (\n    app: JupyterFrontEnd,\n    manager: IMyInspector,\n    consoles: IConsoleTracker,\n    labShell: ILabShell,\n    translator: ITranslator\n  ): void => {\n    // Maintain association of new consoles with their respective handlers.\n    const handlers: { [id: string]: InspectionHandler } = {};\n\n    // Create a handler for each console that is created.\n    consoles.widgetAdded.connect((sender, parent) => {\n      const sessionContext = parent.console.sessionContext;\n      const rendermime = parent.console.rendermime;\n      const connector = new KernelConnector({ sessionContext });\n      const handler = new InspectionHandler({ connector, rendermime });\n\n      // Associate the handler to the widget.\n      handlers[parent.id] = handler;\n\n      // Set the initial editor.\n      const cell = parent.console.promptCell;\n      handler.editor = cell && cell.editor;\n\n      // Listen for prompt creation.\n      parent.console.promptCellCreated.connect((sender, cell) => {\n        handler.editor = cell && cell.editor;\n      });\n\n      // Listen for parent disposal.\n      parent.disposed.connect(() => {\n        delete handlers[parent.id];\n        handler.dispose();\n      });\n    });\n\n    // Keep track of console instances and set myinspector source.\n    const setSource = (widget: Widget | null): void => {\n      if (widget && consoles.has(widget) && handlers[widget.id]) {\n        manager.source = handlers[widget.id];\n      }\n    };\n    labShell.currentChanged.connect((_, args) => setSource(args.newValue));\n    void app.restored.then(() => setSource(labShell.currentWidget));\n\n    app.contextMenu.addItem({\n      command: CommandIDs.toggle,\n      selector: '.jp-CodeConsole-promptCell'\n    });\n\n    app.contextMenu.addItem({\n      command: CommandIDs.toggleStandby,\n      selector: '.jp-CodeConsole-promptCell'\n    });\n\n  }\n};\n\n/**\n * An extension that registers notebooks for inspection.\n */\nconst notebooks: JupyterFrontEndPlugin<void> = {\n  // FIXME This should be in @jupyterlab/notebook-extension\n  id: 'jupyterlab_pausable_contextual_help:notebooks',\n  description: 'Adds code introspection to notebooks.',\n  requires: [IMyInspector, INotebookTracker, ILabShell],\n  autoStart: true,\n  activate: (\n    app: JupyterFrontEnd,\n    manager: IMyInspector,\n    notebooks: INotebookTracker,\n    labShell: ILabShell\n  ): void => {\n    // Maintain association of new notebooks with their respective handlers.\n    const handlers: { [id: string]: InspectionHandler } = {};\n\n    // Create a handler for each notebook that is created.\n    notebooks.widgetAdded.connect((sender, parent) => {\n      const sessionContext = parent.sessionContext;\n      const rendermime = parent.content.rendermime;\n      const connector = new KernelConnector({ sessionContext });\n      const handler = new InspectionHandler({ connector, rendermime });\n\n      // Associate the handler to the widget.\n      handlers[parent.id] = handler;\n\n      // Set the initial editor.\n      const cell = parent.content.activeCell;\n      handler.editor = cell && cell.editor;\n\n      // Listen for active cell changes.\n      parent.content.activeCellChanged.connect((sender, cell) => {\n        void cell?.ready.then(() => {\n          if (cell === parent.content.activeCell) {\n            handler.editor = cell!.editor;\n          }\n        });\n      });\n\n      // Listen for parent disposal.\n      parent.disposed.connect(() => {\n        delete handlers[parent.id];\n        handler.dispose();\n      });\n    });\n\n    // Keep track of notebook instances and set myinspector source.\n    const setSource = (widget: Widget | null): void => {\n      if (widget && notebooks.has(widget) && handlers[widget.id]) {\n        manager.source = handlers[widget.id];\n      }\n    };\n    labShell.currentChanged.connect((_, args) => setSource(args.newValue));\n    void app.restored.then(() => setSource(labShell.currentWidget));\n\n    app.contextMenu.addItem({\n      command: CommandIDs.toggle,\n      selector: '.jp-Notebook'\n    });\n\n    app.contextMenu.addItem({\n      command: CommandIDs.toggleStandby,\n      selector: '.jp-Notebook'\n    });\n\n  }\n};\n\n/**\n * Export the plugins as default.\n */\nconst plugins: JupyterFrontEndPlugin<any>[] = [myinspector, consoles, notebooks];\nexport default plugins;\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ISessionContext } from '@jupyterlab/apputils';\nimport { KernelMessage } from '@jupyterlab/services';\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { InspectionHandler } from './handler';\n\n/**\n * The default connector for making inspection requests from the Jupyter API.\n */\nexport class KernelConnector extends DataConnector<\n  InspectionHandler.IReply,\n  void,\n  InspectionHandler.IRequest\n> {\n  /**\n   * Create a new kernel connector for inspection requests.\n   *\n   * @param options - The instantiation options for the kernel connector.\n   */\n  constructor(options: KernelConnector.IOptions) {\n    super();\n    this._sessionContext = options.sessionContext;\n  }\n\n  /**\n   * Fetch inspection requests.\n   *\n   * @param request - The inspection request text and details.\n   */\n  fetch(\n    request: InspectionHandler.IRequest\n  ): Promise<InspectionHandler.IReply> {\n    const kernel = this._sessionContext.session?.kernel;\n\n    if (!kernel) {\n      return Promise.reject(new Error('Inspection fetch requires a kernel.'));\n    }\n\n    const contents: KernelMessage.IInspectRequestMsg['content'] = {\n      code: request.text,\n      cursor_pos: request.offset,\n      detail_level: 1\n    };\n\n    return kernel.requestInspect(contents).then(msg => {\n      const response = msg.content;\n\n      if (response.status !== 'ok' || !response.found) {\n        throw new Error('Inspection fetch failed to return successfully.');\n      }\n\n      return { data: response.data, metadata: response.metadata };\n    });\n  }\n\n  private _sessionContext: ISessionContext;\n}\n\n/**\n * A namespace for kernel connector statics.\n */\nexport namespace KernelConnector {\n  /**\n   * The instantiation options for an inspection handler.\n   */\n  export interface IOptions {\n    /**\n     * The session context used to make API requests to the kernel.\n     */\n    sessionContext: ISessionContext;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Printing } from '@jupyterlab/apputils';\nimport {\n  ITranslator,\n  nullTranslator,\n  TranslationBundle\n} from '@jupyterlab/translation';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\nimport { IMyInspector } from './tokens';\n\n/**\n * The class name added to myinspector panels.\n */\nconst PANEL_CLASS = 'jp-MyInspector';\n\n/**\n * The class name added to myinspector content.\n */\nconst CONTENT_CLASS = 'jp-MyInspector-content';\n\n/**\n * The class name added to default myinspector content.\n */\nconst DEFAULT_CONTENT_CLASS = 'jp-MyInspector-default-content';\n\n/**\n * A panel which contains a set of myinspectors.\n */\nexport class MyInspectorPanel\n  extends Panel\n  implements IMyInspector, Printing.IPrintable\n{\n  /**\n   * Construct an myinspector.\n   */\n  constructor(options: MyInspectorPanel.IOptions = {}) {\n    super();\n    this.translator = options.translator || nullTranslator;\n    this._trans = this.translator.load('jupyterlab');\n\n    if (options.initialContent instanceof Widget) {\n      this._content = options.initialContent;\n    } else if (typeof options.initialContent === 'string') {\n      this._content = MyInspectorPanel._generateContentWidget(\n        `<p>${options.initialContent}</p>`\n      );\n    } else {\n      this._content = MyInspectorPanel._generateContentWidget(\n        '<p>' +\n                this._trans.__('Press F1 on a function to see documentation.') +\n          '</p>'\n      );\n    }\n\n    this.addClass(PANEL_CLASS);\n    (this.layout as PanelLayout).addWidget(this._content);\n  }\n\n  /**\n   * Print in iframe\n   */\n  [Printing.symbol]() {\n    return (): Promise<void> => Printing.printWidget(this);\n  }\n\n  /**\n   * The source of events the myinspector panel listens for.\n   */\n  get source(): IMyInspector.IInspectable | null {\n    return this._source;\n  }\n  set source(source: IMyInspector.IInspectable | null) {\n    if (this._source === source) {\n      return;\n    }\n\n    // Disconnect old signal handler.\n    if (this._source) {\n      this._source.standby = true;\n      this._source.inspected.disconnect(this.onMyInspectorUpdate, this);\n      this._source.disposed.disconnect(this.onSourceDisposed, this);\n    }\n\n    // Reject a source that is already disposed.\n    if (source && source.isDisposed) {\n      source = null;\n    }\n\n    // Update source.\n    this._source = source;\n\n    // Connect new signal handler.\n    if (this._source) {\n            //   this._source.standby = false;\n      this._source.inspected.connect(this.onMyInspectorUpdate, this);\n      this._source.disposed.connect(this.onSourceDisposed, this);\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.source = null;\n    super.dispose();\n  }\n\n  /**\n   * Handle myinspector update signals.\n   */\n  protected onMyInspectorUpdate(\n    sender: any,\n    args: IMyInspector.IMyInspectorUpdate\n  ): void {\n    const { content } = args;\n\n    // Update the content of the myinspector widget.\n    if (!content || content === this._content) {\n      return;\n    }\n    this._content.dispose();\n\n    this._content = content;\n    content.addClass(CONTENT_CLASS);\n    (this.layout as PanelLayout).addWidget(content);\n  }\n\n  /**\n   * Handle source disposed signals.\n   */\n  protected onSourceDisposed(sender: any, args: void): void {\n    this.source = null;\n  }\n\n  /**\n   * Generate content widget from string\n   */\n  private static _generateContentWidget(message: string): Widget {\n    const widget = new Widget();\n    widget.node.innerHTML = message;\n    widget.addClass(CONTENT_CLASS);\n    widget.addClass(DEFAULT_CONTENT_CLASS);\n\n    return widget;\n  }\n\n  protected translator: ITranslator;\n  private _trans: TranslationBundle;\n  private _content: Widget;\n  private _source: IMyInspector.IInspectable | null = null;\n}\n\nexport namespace MyInspectorPanel {\n  export interface IOptions {\n    initialContent?: Widget | string | undefined;\n\n    /**\n     * The application language translator.\n     */\n    translator?: ITranslator;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Token } from '@lumino/coreutils';\nimport { ISignal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\n\n/**\n * The myinspector panel token.\n */\nexport const IMyInspector = new Token<IMyInspector>(\n  '@jupyterlab/inspector:IMyInspector',\n  `A service for adding contextual help to widgets (visible using \"Show Contextual Help\" from the Help menu).\n  Use this to hook into the contextual help system in your extension.`\n);\n\n/**\n * An interface for an myinspector.\n */\nexport interface IMyInspector {\n  /**\n   * The source of events the myinspector listens for.\n   */\n  source: IMyInspector.IInspectable | null;\n}\n\n/**\n * A namespace for myinspector interfaces.\n */\nexport namespace IMyInspector {\n  /**\n   * The definition of an inspectable source.\n   */\n  export interface IInspectable {\n    /**\n     * A signal emitted when the myinspector should clear all items.\n     */\n    cleared: ISignal<any, void>;\n\n    /**\n     * A signal emitted when the inspectable is disposed.\n     */\n    disposed: ISignal<any, void>;\n\n    /**\n     * A signal emitted when an myinspector value is generated.\n     */\n    inspected: ISignal<any, IMyInspectorUpdate>;\n\n    /**\n     * Test whether the inspectable has been disposed.\n     */\n    isDisposed: boolean;\n\n    /**\n     * Indicates whether the inspectable source emits signals.\n     *\n     * #### Notes\n     * The use case for this attribute is to limit the API traffic when no\n     * myinspector is visible. It can be modified by the consumer of the source.\n     */\n    standby: boolean;\n    /**\n     * Handle a text changed signal from an editor.\n     *\n     * #### Notes\n     * Update the hints myinspector based on a text change.\n     */\n    onEditorChange(customText?: string): void;\n  }\n\n  /**\n   * An update value for code myinspectors.\n   */\n  export interface IMyInspectorUpdate {\n    /**\n     * The content being sent to the myinspector for display.\n     */\n    content: Widget | null;\n  }\n}\n"],"names":[],"sourceRoot":""}