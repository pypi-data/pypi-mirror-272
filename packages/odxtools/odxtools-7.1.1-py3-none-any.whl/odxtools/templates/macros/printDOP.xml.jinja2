{#- -*- mode: sgml; tab-width: 1; indent-tabs-mode: nil -*-
 #
 # SPDX-License-Identifier: MIT
-#}

{%- import('macros/printElementId.xml.jinja2') as peid %}
{%- import('macros/printAdminData.xml.jinja2') as pad %}
{%- import('macros/printSpecialData.xml.jinja2') as psd %}

{%- macro printDiagCodedType(dct) -%}
<DIAG-CODED-TYPE {{-make_xml_attrib("BASE-DATA-TYPE", dct.base_data_type.value)}}
                 {{-make_xml_attrib("BASE-TYPE-ENCODING", dct.base_type_encoding)}}
                 {{-make_bool_xml_attrib("IS-HIGHLOW-BYTE-ORDER", dct.is_highlow_byte_order_raw)}}
                 {%- if dct.termination is defined %}
                 {{-make_xml_attrib("TERMINATION", dct.termination)}}
                 {%- endif %}
                 {#- #} xsi:type="{{dct.dct_type}}">
 {%- if dct.dct_type in ("STANDARD-LENGTH-TYPE", "LEADING-LENGTH-INFO-TYPE") %}
 <BIT-LENGTH>{{dct.bit_length}}</BIT-LENGTH>
 {%- if dct.dct_type in ("STANDARD-LENGTH-TYPE", ) and dct.bit_mask is not none %}
 {%- set num_nibbles = (dct.bit_mask.bit_length() + 7) // 8 * 2 %}
 <BIT-MASK>{{ ("%%0%dX" | format(num_nibbles | int)) | format(dct.bit_mask | int) }}</BIT-MASK>
 {%- endif %}
 {%- else %}
 {%- if dct.max_length is not none %}
 <MAX-LENGTH>{{dct.max_length}}</MAX-LENGTH>
 {%- endif %}
 <MIN-LENGTH>{{dct.min_length}}</MIN-LENGTH>
 {%- endif %}
</DIAG-CODED-TYPE>
{%- endmacro -%}


{%- macro printPhysicalType(physical_type) %}
{%- if physical_type.display_radix is not none %}
<PHYSICAL-TYPE BASE-DATA-TYPE="{{physical_type.base_data_type.value}}" DISPLAY-RADIX="{{physical_type.display_radix.name}}" />
{%- elif physical_type.precision is not none %}
<PHYSICAL-TYPE BASE-DATA-TYPE="{{physical_type.base_data_type.value}}">
 <PRECISION>{{physical_type.precision}}</PRECISION>
</PHYSICAL-TYPE>
{%- else %}
<PHYSICAL-TYPE BASE-DATA-TYPE="{{physical_type.base_data_type.value}}" />
{%- endif %}
{%- endmacro -%}

{%- macro printLimit(tag_name, limit_obj) -%}
{%- if limit_obj is not none %}
<{{tag_name}}
{%- if limit_obj.interval_type is not none %}
  {{- make_xml_attrib("INTERVAL-TYPE", limit_obj.interval_type.value) }}
  {%- endif %}
{%- if limit_obj.value_raw is none %}
  {#- #}/>
{%- else %}
  {#- #}>
  {%- if hasattr(limit_obj._value, 'hex') -%}
  {#- bytes or bytarray limit #}
  {{- limit_obj._value.hex().upper() }}
  {%- else -%}
  {{- limit_obj._value }}
  {%- endif -%}
</{{tag_name}}>
{%- endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro printScaleConstr(sc) %}
<SCALE-CONSTR VALIDITY="{{sc.validity.value}}">
  {%- if sc.short_label is not none %}
  <SHORT-LABEL>{{sc.short_label|e}}</SHORT-LABEL>
  {%- endif %}
  {%- if sc.description and sc.description.strip() %}
  <DESC>
    {{sc.description}}
  </DESC>
  {%- endif %}
  {{printLimit("LOWER-LIMIT", sc.lower_limit) }}
  {{printLimit("UPPER-LIMIT", sc.upper_limit) }}
</SCALE-CONSTR>
{%- endmacro -%}

{%- macro printInternalConstr(ic, is_physical) %}
{%- if is_physical %}
<PHYS-CONSTR>
{%- else %}
<INTERNAL-CONSTR>
{%- endif %}
  {{printLimit("LOWER-LIMIT", ic.lower_limit) }}
  {{printLimit("UPPER-LIMIT", ic.upper_limit) }}
  {%- if ic.scale_constrs %}
  <SCALE-CONSTRS>
  {%- for sc in ic.scale_constrs %}
    {{- printScaleConstr(sc)|indent(4)}}
  {%- endfor %}
  </SCALE-CONSTRS>
  {%- endif %}
{%- if is_physical %}
</PHYS-CONSTR>
{%- else %}
</INTERNAL-CONSTR>
{%- endif %}
{%- endmacro -%}

{%- macro printCompuMethod(cm) -%}
<COMPU-METHOD>
 <CATEGORY>{{cm.category}}</CATEGORY>
 {%- if cm.category == "TEXTTABLE" %}
 <COMPU-INTERNAL-TO-PHYS>
  <COMPU-SCALES>
  {%- for cs in cm.internal_to_phys %}
   <COMPU-SCALE>
   {%- if cs.short_label and cs.short_label.strip() %}
    <SHORT-LABEL>{{cs.short_label|e}}</SHORT-LABEL>
   {%- endif %}
   {%- if cs.description and cs.description.strip() %}
    <DESC>
    {{cs.description}}
    </DESC>
   {%- endif %}
   {{printLimit("LOWER-LIMIT", cs.lower_limit) }}
   {{printLimit("UPPER-LIMIT", cs.upper_limit) }}
   {%- if cs.compu_inverse_value is not none %}
    <COMPU-INVERSE-VALUE>
     <V>{{cs.compu_inverse_value}}</V>
    </COMPU-INVERSE-VALUE>
   {%- endif %}
    <COMPU-CONST>
     <VT>{{cs.compu_const | e}}</VT>
    </COMPU-CONST>
   </COMPU-SCALE>
  {%- endfor %}
  </COMPU-SCALES>
  {%- if cm.compu_default_value is not none %}
  <COMPU-DEFAULT-VALUE>
    <VT>{{cm.compu_default_value.compu_const}}</VT>
    {%- if cm.compu_default_value.compu_inverse_value is not none %}
    <COMPU-INVERSE-VALUE>
     <V>{{cm.compu_default_value.compu_inverse_value}}</V>
    </COMPU-INVERSE-VALUE>
    {%- endif %}
  </COMPU-DEFAULT-VALUE>
  {%- endif %}
 </COMPU-INTERNAL-TO-PHYS>
 {%- elif cm.category == "LINEAR" %}
 <COMPU-INTERNAL-TO-PHYS>
		<COMPU-SCALES>
			<COMPU-SCALE>
     {{printLimit("LOWER-LIMIT", cm.internal_lower_limit) }}
     {{printLimit("UPPER-LIMIT", cm.internal_upper_limit) }}
				<COMPU-RATIONAL-COEFFS>
					<COMPU-NUMERATOR>
						<V>{{cm.offset}}</V>
						<V>{{cm.factor}}</V>
					</COMPU-NUMERATOR>
   {%- if cm.denominator != 1 %}
					<COMPU-DENOMINATOR>
							<V>{{cm.denominator}}</V>
					</COMPU-DENOMINATOR>
   {%- endif %}
				</COMPU-RATIONAL-COEFFS>
			</COMPU-SCALE>
		</COMPU-SCALES>
	</COMPU-INTERNAL-TO-PHYS>
 {%- elif cm.category == "SCALE-LINEAR" %}
 <COMPU-INTERNAL-TO-PHYS>
		<COMPU-SCALES>
  {%- for lm in cm.linear_methods %}
 		<COMPU-SCALE>
    {{printLimit("LOWER-LIMIT", lm.internal_lower_limit) }}
    {{printLimit("UPPER-LIMIT", lm.internal_upper_limit) }}
				<COMPU-RATIONAL-COEFFS>
					<COMPU-NUMERATOR>
							<V>{{lm.offset}}</V>
							<V>{{lm.factor}}</V>
					</COMPU-NUMERATOR>
   {%- if lm.denominator != 1 %}
					<COMPU-DENOMINATOR>
							<V>{{lm.denominator}}</V>
					</COMPU-DENOMINATOR>
   {%- endif %}
				</COMPU-RATIONAL-COEFFS>
			</COMPU-SCALE>
  {%- endfor %}
		</COMPU-SCALES>
 </COMPU-INTERNAL-TO-PHYS>
 {%- elif cm.category == "TAB-INTP" %}
 <COMPU-INTERNAL-TO-PHYS>
  <COMPU-SCALES>
  {%- for idx in range( cm.internal_points | length ) %}
  <COMPU-SCALE>
    <LOWER-LIMIT>{{ cm.internal_points[idx] }}</LOWER-LIMIT>
    <COMPU-CONST>
     <V>{{ cm.physical_points[idx] }}</V>
    </COMPU-CONST>
   </COMPU-SCALE>
  {%- endfor %}
  </COMPU-SCALES>
 </COMPU-INTERNAL-TO-PHYS>
 {%- endif %}
</COMPU-METHOD>
{%- endmacro -%}

{%- macro printDopBaseAttribs(dop) %}
{{- make_xml_attrib("ID", dop.odx_id.local_id) }}
{{- make_xml_attrib("OID", dop.oid) }}
{#- -#}
{%- endmacro %}

{%- macro printDopBaseSubtags(dop) %}
 {{ peid.printElementIdSubtags(dop)|indent(1) }}
 {%- if dop.admin_data %}
 {{ pad.printAdminData(dop.admin_data)|indent(1) }}
 {%- endif %}
 {{ psd.printSpecialDataGroups(dop.sdgs)|indent(1) }}
{%- endmacro -%}

{%- macro printComplexDopAttribs(st) %}
 {{- printDopBaseAttribs(st) }}
{%- endmacro -%}

{%- macro printComplexDopSubtags(st) %}
 {{- printDopBaseSubtags(st) }}
{%- endmacro -%}

{%- macro printDataObjectProp(dop) %}
<DATA-OBJECT-PROP {{- printDopBaseAttribs(dop) }}>
 {{- printDopBaseSubtags(dop) }}
 {{- printCompuMethod(dop.compu_method)|indent(1) }}
 {{- printDiagCodedType(dop.diag_coded_type)|indent(1) }}
 {{- printPhysicalType(dop.physical_type)|indent(1) }}
 {%- if dop.internal_constr %}
 {{- printInternalConstr(dop.internal_constr, False)|indent(1) }}
 {%- endif %}
 {%- if dop.unit_ref %}
 <UNIT-REF ID-REF="{{ dop.unit_ref.ref_id }}" />
 {%- endif %}
 {%- if dop.physical_constr %}
 {{- printInternalConstr(dop.internal_constr, True)|indent(1) }}
 {%- endif %}
</DATA-OBJECT-PROP>
{%- endmacro %}

{%- macro printDtcDop(dop) %}
<DTC-DOP {{- printDopBaseAttribs(dop) }}
         {{- make_bool_xml_attrib("IS-VISIBLE", dop.is_visible_raw) }}>
 {{- printDopBaseSubtags(dop)|indent(1) }}
 {{- printDiagCodedType(dop.diag_coded_type)|indent(1) }}
 {{- printPhysicalType(dop.physical_type)|indent(1) }}
 {{- printCompuMethod(dop.compu_method)|indent(1) }}
 <DTCS>
 {%- for dtc in dop.dtcs_raw %}
 {%- if hasattr(dtc, "ref_id") %}
  <DTC-REF ID-REF="{{dtc.ref_id}}" />
 {%- else %}
  <DTC ID="{{dtc.odx_id.local_id}}">
   <SHORT-NAME>{{dtc.short_name}}</SHORT-NAME>
   <TROUBLE-CODE>{{dtc.trouble_code}}</TROUBLE-CODE>
  {%- if dtc.display_trouble_code is not none   %}
   <DISPLAY-TROUBLE-CODE>{{dtc.display_trouble_code}}</DISPLAY-TROUBLE-CODE>
  {%- endif %}
   <TEXT>{{dtc.text|e}}</TEXT>
  {%- if not dtc.level is none   %}
   <LEVEL>{{dtc.level}}</LEVEL>
  {%- endif %}
   {{- psd.printSpecialDataGroups(dtc.sdgs)|indent(3, first=True) }}
  </DTC>
 {%- endif %}
 {%- endfor %}
 </DTCS>
</DTC-DOP>
{%- endmacro -%}
