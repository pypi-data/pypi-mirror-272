# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SetArgs', 'Set']

@pulumi.input_type
class SetArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input['SetCommandArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permit_unmatched: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Set resource.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] name: The name of the TACACS command set
        :param pulumi.Input[bool] permit_unmatched: Permit unmatched commands - Default value: `false`
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permit_unmatched is not None:
            pulumi.set(__self__, "permit_unmatched", permit_unmatched)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SetCommandArgs']]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SetCommandArgs']]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the TACACS command set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="permitUnmatched")
    def permit_unmatched(self) -> Optional[pulumi.Input[bool]]:
        """
        Permit unmatched commands - Default value: `false`
        """
        return pulumi.get(self, "permit_unmatched")

    @permit_unmatched.setter
    def permit_unmatched(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permit_unmatched", value)


@pulumi.input_type
class _SetState:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input['SetCommandArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permit_unmatched: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Set resources.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] name: The name of the TACACS command set
        :param pulumi.Input[bool] permit_unmatched: Permit unmatched commands - Default value: `false`
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permit_unmatched is not None:
            pulumi.set(__self__, "permit_unmatched", permit_unmatched)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SetCommandArgs']]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SetCommandArgs']]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the TACACS command set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="permitUnmatched")
    def permit_unmatched(self) -> Optional[pulumi.Input[bool]]:
        """
        Permit unmatched commands - Default value: `false`
        """
        return pulumi.get(self, "permit_unmatched")

    @permit_unmatched.setter
    def permit_unmatched(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permit_unmatched", value)


class Set(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SetCommandArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permit_unmatched: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        This resource can manage a TACACS Command Set.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ise as ise

        example = ise.tacacs_command.Set("example",
            name="CommandSet1",
            description="My TACACS command set",
            permit_unmatched=True,
            commands=[ise.tacacs_command.SetCommandArgs(
                grant="PERMIT",
                command="show",
                arguments="",
            )])
        ```

        ## Import

        ```sh
        $ pulumi import ise:TacacsCommand/set:Set example "76d24097-41c4-4558-a4d0-a8c07ac08470"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] name: The name of the TACACS command set
        :param pulumi.Input[bool] permit_unmatched: Permit unmatched commands - Default value: `false`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SetArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a TACACS Command Set.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ise as ise

        example = ise.tacacs_command.Set("example",
            name="CommandSet1",
            description="My TACACS command set",
            permit_unmatched=True,
            commands=[ise.tacacs_command.SetCommandArgs(
                grant="PERMIT",
                command="show",
                arguments="",
            )])
        ```

        ## Import

        ```sh
        $ pulumi import ise:TacacsCommand/set:Set example "76d24097-41c4-4558-a4d0-a8c07ac08470"
        ```

        :param str resource_name: The name of the resource.
        :param SetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SetCommandArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permit_unmatched: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SetArgs.__new__(SetArgs)

            __props__.__dict__["commands"] = commands
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["permit_unmatched"] = permit_unmatched
        super(Set, __self__).__init__(
            'ise:TacacsCommand/set:Set',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SetCommandArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            permit_unmatched: Optional[pulumi.Input[bool]] = None) -> 'Set':
        """
        Get an existing Set resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] name: The name of the TACACS command set
        :param pulumi.Input[bool] permit_unmatched: Permit unmatched commands - Default value: `false`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SetState.__new__(_SetState)

        __props__.__dict__["commands"] = commands
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["permit_unmatched"] = permit_unmatched
        return Set(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Output[Optional[Sequence['outputs.SetCommand']]]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the TACACS command set
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="permitUnmatched")
    def permit_unmatched(self) -> pulumi.Output[bool]:
        """
        Permit unmatched commands - Default value: `false`
        """
        return pulumi.get(self, "permit_unmatched")

