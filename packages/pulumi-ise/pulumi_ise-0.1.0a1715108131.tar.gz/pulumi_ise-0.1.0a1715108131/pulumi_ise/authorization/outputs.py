# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProfileAdvancedAttribute',
    'GetProfileAdvancedAttributeResult',
]

@pulumi.output_type
class ProfileAdvancedAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeLeftDictionaryName":
            suggest = "attribute_left_dictionary_name"
        elif key == "attributeLeftName":
            suggest = "attribute_left_name"
        elif key == "attributeRightDictionaryName":
            suggest = "attribute_right_dictionary_name"
        elif key == "attributeRightName":
            suggest = "attribute_right_name"
        elif key == "attributeRightValue":
            suggest = "attribute_right_value"
        elif key == "attributeRightValueType":
            suggest = "attribute_right_value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileAdvancedAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileAdvancedAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileAdvancedAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribute_left_dictionary_name: Optional[str] = None,
                 attribute_left_name: Optional[str] = None,
                 attribute_right_dictionary_name: Optional[str] = None,
                 attribute_right_name: Optional[str] = None,
                 attribute_right_value: Optional[str] = None,
                 attribute_right_value_type: Optional[str] = None):
        """
        :param str attribute_left_dictionary_name: Dictionary name
        :param str attribute_left_name: Attribute name
        :param str attribute_right_dictionary_name: Dictionary name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`
        :param str attribute_right_name: Attribute name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`
        :param str attribute_right_value: Attribute value, only required when `attribute_right_value_type` is `AttributeValue`
        :param str attribute_right_value_type: Advanced attribute value type
                 - Choices: `AdvancedDictionaryAttribute`, `AttributeValue`
        """
        if attribute_left_dictionary_name is not None:
            pulumi.set(__self__, "attribute_left_dictionary_name", attribute_left_dictionary_name)
        if attribute_left_name is not None:
            pulumi.set(__self__, "attribute_left_name", attribute_left_name)
        if attribute_right_dictionary_name is not None:
            pulumi.set(__self__, "attribute_right_dictionary_name", attribute_right_dictionary_name)
        if attribute_right_name is not None:
            pulumi.set(__self__, "attribute_right_name", attribute_right_name)
        if attribute_right_value is not None:
            pulumi.set(__self__, "attribute_right_value", attribute_right_value)
        if attribute_right_value_type is not None:
            pulumi.set(__self__, "attribute_right_value_type", attribute_right_value_type)

    @property
    @pulumi.getter(name="attributeLeftDictionaryName")
    def attribute_left_dictionary_name(self) -> Optional[str]:
        """
        Dictionary name
        """
        return pulumi.get(self, "attribute_left_dictionary_name")

    @property
    @pulumi.getter(name="attributeLeftName")
    def attribute_left_name(self) -> Optional[str]:
        """
        Attribute name
        """
        return pulumi.get(self, "attribute_left_name")

    @property
    @pulumi.getter(name="attributeRightDictionaryName")
    def attribute_right_dictionary_name(self) -> Optional[str]:
        """
        Dictionary name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`
        """
        return pulumi.get(self, "attribute_right_dictionary_name")

    @property
    @pulumi.getter(name="attributeRightName")
    def attribute_right_name(self) -> Optional[str]:
        """
        Attribute name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`
        """
        return pulumi.get(self, "attribute_right_name")

    @property
    @pulumi.getter(name="attributeRightValue")
    def attribute_right_value(self) -> Optional[str]:
        """
        Attribute value, only required when `attribute_right_value_type` is `AttributeValue`
        """
        return pulumi.get(self, "attribute_right_value")

    @property
    @pulumi.getter(name="attributeRightValueType")
    def attribute_right_value_type(self) -> Optional[str]:
        """
        Advanced attribute value type
          - Choices: `AdvancedDictionaryAttribute`, `AttributeValue`
        """
        return pulumi.get(self, "attribute_right_value_type")


@pulumi.output_type
class GetProfileAdvancedAttributeResult(dict):
    def __init__(__self__, *,
                 attribute_left_dictionary_name: str,
                 attribute_left_name: str,
                 attribute_right_dictionary_name: str,
                 attribute_right_name: str,
                 attribute_right_value: str,
                 attribute_right_value_type: str):
        """
        :param str attribute_left_dictionary_name: Dictionary name
        :param str attribute_left_name: Attribute name
        :param str attribute_right_dictionary_name: Dictionary name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`
        :param str attribute_right_name: Attribute name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`
        :param str attribute_right_value: Attribute value, only required when `attribute_right_value_type` is `AttributeValue`
        :param str attribute_right_value_type: Advanced attribute value type
        """
        pulumi.set(__self__, "attribute_left_dictionary_name", attribute_left_dictionary_name)
        pulumi.set(__self__, "attribute_left_name", attribute_left_name)
        pulumi.set(__self__, "attribute_right_dictionary_name", attribute_right_dictionary_name)
        pulumi.set(__self__, "attribute_right_name", attribute_right_name)
        pulumi.set(__self__, "attribute_right_value", attribute_right_value)
        pulumi.set(__self__, "attribute_right_value_type", attribute_right_value_type)

    @property
    @pulumi.getter(name="attributeLeftDictionaryName")
    def attribute_left_dictionary_name(self) -> str:
        """
        Dictionary name
        """
        return pulumi.get(self, "attribute_left_dictionary_name")

    @property
    @pulumi.getter(name="attributeLeftName")
    def attribute_left_name(self) -> str:
        """
        Attribute name
        """
        return pulumi.get(self, "attribute_left_name")

    @property
    @pulumi.getter(name="attributeRightDictionaryName")
    def attribute_right_dictionary_name(self) -> str:
        """
        Dictionary name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`
        """
        return pulumi.get(self, "attribute_right_dictionary_name")

    @property
    @pulumi.getter(name="attributeRightName")
    def attribute_right_name(self) -> str:
        """
        Attribute name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`
        """
        return pulumi.get(self, "attribute_right_name")

    @property
    @pulumi.getter(name="attributeRightValue")
    def attribute_right_value(self) -> str:
        """
        Attribute value, only required when `attribute_right_value_type` is `AttributeValue`
        """
        return pulumi.get(self, "attribute_right_value")

    @property
    @pulumi.getter(name="attributeRightValueType")
    def attribute_right_value_type(self) -> str:
        """
        Advanced attribute value type
        """
        return pulumi.get(self, "attribute_right_value_type")


