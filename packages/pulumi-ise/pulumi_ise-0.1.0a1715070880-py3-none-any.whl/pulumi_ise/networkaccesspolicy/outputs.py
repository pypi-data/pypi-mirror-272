# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SetChildren',
    'SetChildrenChildren',
    'GetSetChildrenResult',
    'GetSetChildrenChildrenResult',
]

@pulumi.output_type
class SetChildren(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionType":
            suggest = "condition_type"
        elif key == "attributeName":
            suggest = "attribute_name"
        elif key == "attributeValue":
            suggest = "attribute_value"
        elif key == "dictionaryName":
            suggest = "dictionary_name"
        elif key == "dictionaryValue":
            suggest = "dictionary_value"
        elif key == "isNegate":
            suggest = "is_negate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SetChildren. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SetChildren.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SetChildren.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition_type: str,
                 attribute_name: Optional[str] = None,
                 attribute_value: Optional[str] = None,
                 childrens: Optional[Sequence['outputs.SetChildrenChildren']] = None,
                 dictionary_name: Optional[str] = None,
                 dictionary_value: Optional[str] = None,
                 id: Optional[str] = None,
                 is_negate: Optional[bool] = None,
                 operator: Optional[str] = None):
        """
        :param str condition_type: Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
                 - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
        :param str attribute_name: Dictionary attribute name
        :param str attribute_value: Attribute value for condition. Value type is specified in dictionary object.
        :param Sequence['SetChildrenChildrenArgs'] childrens: List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
        :param str dictionary_name: Dictionary name
        :param str dictionary_value: Dictionary value
        :param str id: UUID for condition
        :param bool is_negate: Indicates whereas this condition is in negate mode
        :param str operator: Equality operator
                 - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
        """
        pulumi.set(__self__, "condition_type", condition_type)
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if dictionary_name is not None:
            pulumi.set(__self__, "dictionary_name", dictionary_name)
        if dictionary_value is not None:
            pulumi.set(__self__, "dictionary_value", dictionary_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_negate is not None:
            pulumi.set(__self__, "is_negate", is_negate)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        """
        Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
          - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
        """
        return pulumi.get(self, "condition_type")

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[str]:
        """
        Dictionary attribute name
        """
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[str]:
        """
        Attribute value for condition. Value type is specified in dictionary object.
        """
        return pulumi.get(self, "attribute_value")

    @property
    @pulumi.getter
    def childrens(self) -> Optional[Sequence['outputs.SetChildrenChildren']]:
        """
        List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
        """
        return pulumi.get(self, "childrens")

    @property
    @pulumi.getter(name="dictionaryName")
    def dictionary_name(self) -> Optional[str]:
        """
        Dictionary name
        """
        return pulumi.get(self, "dictionary_name")

    @property
    @pulumi.getter(name="dictionaryValue")
    def dictionary_value(self) -> Optional[str]:
        """
        Dictionary value
        """
        return pulumi.get(self, "dictionary_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        UUID for condition
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isNegate")
    def is_negate(self) -> Optional[bool]:
        """
        Indicates whereas this condition is in negate mode
        """
        return pulumi.get(self, "is_negate")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Equality operator
          - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class SetChildrenChildren(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionType":
            suggest = "condition_type"
        elif key == "attributeName":
            suggest = "attribute_name"
        elif key == "attributeValue":
            suggest = "attribute_value"
        elif key == "dictionaryName":
            suggest = "dictionary_name"
        elif key == "dictionaryValue":
            suggest = "dictionary_value"
        elif key == "isNegate":
            suggest = "is_negate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SetChildrenChildren. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SetChildrenChildren.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SetChildrenChildren.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition_type: str,
                 attribute_name: Optional[str] = None,
                 attribute_value: Optional[str] = None,
                 dictionary_name: Optional[str] = None,
                 dictionary_value: Optional[str] = None,
                 id: Optional[str] = None,
                 is_negate: Optional[bool] = None,
                 operator: Optional[str] = None):
        """
        :param str condition_type: Condition type.
                 - Choices: `ConditionAttributes`, `ConditionReference`
        :param str attribute_name: Dictionary attribute name
        :param str attribute_value: Attribute value for condition. Value type is specified in dictionary object.
        :param str dictionary_name: Dictionary name
        :param str dictionary_value: Dictionary value
        :param str id: UUID for condition
        :param bool is_negate: Indicates whereas this condition is in negate mode
        :param str operator: Equality operator
                 - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
        """
        pulumi.set(__self__, "condition_type", condition_type)
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if dictionary_name is not None:
            pulumi.set(__self__, "dictionary_name", dictionary_name)
        if dictionary_value is not None:
            pulumi.set(__self__, "dictionary_value", dictionary_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_negate is not None:
            pulumi.set(__self__, "is_negate", is_negate)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        """
        Condition type.
          - Choices: `ConditionAttributes`, `ConditionReference`
        """
        return pulumi.get(self, "condition_type")

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[str]:
        """
        Dictionary attribute name
        """
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[str]:
        """
        Attribute value for condition. Value type is specified in dictionary object.
        """
        return pulumi.get(self, "attribute_value")

    @property
    @pulumi.getter(name="dictionaryName")
    def dictionary_name(self) -> Optional[str]:
        """
        Dictionary name
        """
        return pulumi.get(self, "dictionary_name")

    @property
    @pulumi.getter(name="dictionaryValue")
    def dictionary_value(self) -> Optional[str]:
        """
        Dictionary value
        """
        return pulumi.get(self, "dictionary_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        UUID for condition
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isNegate")
    def is_negate(self) -> Optional[bool]:
        """
        Indicates whereas this condition is in negate mode
        """
        return pulumi.get(self, "is_negate")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Equality operator
          - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetSetChildrenResult(dict):
    def __init__(__self__, *,
                 attribute_name: str,
                 attribute_value: str,
                 childrens: Sequence['outputs.GetSetChildrenChildrenResult'],
                 condition_type: str,
                 dictionary_name: str,
                 dictionary_value: str,
                 id: str,
                 is_negate: bool,
                 operator: str):
        """
        :param str attribute_name: Dictionary attribute name
        :param str attribute_value: Attribute value for condition. Value type is specified in dictionary object.
        :param Sequence['GetSetChildrenChildrenArgs'] childrens: List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
        :param str condition_type: Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
        :param str dictionary_name: Dictionary name
        :param str dictionary_value: Dictionary value
        :param str id: UUID for condition
        :param bool is_negate: Indicates whereas this condition is in negate mode
        :param str operator: Equality operator
        """
        pulumi.set(__self__, "attribute_name", attribute_name)
        pulumi.set(__self__, "attribute_value", attribute_value)
        pulumi.set(__self__, "childrens", childrens)
        pulumi.set(__self__, "condition_type", condition_type)
        pulumi.set(__self__, "dictionary_name", dictionary_name)
        pulumi.set(__self__, "dictionary_value", dictionary_value)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_negate", is_negate)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> str:
        """
        Dictionary attribute name
        """
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        """
        Attribute value for condition. Value type is specified in dictionary object.
        """
        return pulumi.get(self, "attribute_value")

    @property
    @pulumi.getter
    def childrens(self) -> Sequence['outputs.GetSetChildrenChildrenResult']:
        """
        List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
        """
        return pulumi.get(self, "childrens")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        """
        Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
        """
        return pulumi.get(self, "condition_type")

    @property
    @pulumi.getter(name="dictionaryName")
    def dictionary_name(self) -> str:
        """
        Dictionary name
        """
        return pulumi.get(self, "dictionary_name")

    @property
    @pulumi.getter(name="dictionaryValue")
    def dictionary_value(self) -> str:
        """
        Dictionary value
        """
        return pulumi.get(self, "dictionary_value")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        UUID for condition
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isNegate")
    def is_negate(self) -> bool:
        """
        Indicates whereas this condition is in negate mode
        """
        return pulumi.get(self, "is_negate")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Equality operator
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetSetChildrenChildrenResult(dict):
    def __init__(__self__, *,
                 attribute_name: str,
                 attribute_value: str,
                 condition_type: str,
                 dictionary_name: str,
                 dictionary_value: str,
                 id: str,
                 is_negate: bool,
                 operator: str):
        """
        :param str attribute_name: Dictionary attribute name
        :param str attribute_value: Attribute value for condition. Value type is specified in dictionary object.
        :param str condition_type: Condition type.
        :param str dictionary_name: Dictionary name
        :param str dictionary_value: Dictionary value
        :param str id: UUID for condition
        :param bool is_negate: Indicates whereas this condition is in negate mode
        :param str operator: Equality operator
        """
        pulumi.set(__self__, "attribute_name", attribute_name)
        pulumi.set(__self__, "attribute_value", attribute_value)
        pulumi.set(__self__, "condition_type", condition_type)
        pulumi.set(__self__, "dictionary_name", dictionary_name)
        pulumi.set(__self__, "dictionary_value", dictionary_value)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_negate", is_negate)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> str:
        """
        Dictionary attribute name
        """
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        """
        Attribute value for condition. Value type is specified in dictionary object.
        """
        return pulumi.get(self, "attribute_value")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        """
        Condition type.
        """
        return pulumi.get(self, "condition_type")

    @property
    @pulumi.getter(name="dictionaryName")
    def dictionary_name(self) -> str:
        """
        Dictionary name
        """
        return pulumi.get(self, "dictionary_name")

    @property
    @pulumi.getter(name="dictionaryValue")
    def dictionary_value(self) -> str:
        """
        Dictionary value
        """
        return pulumi.get(self, "dictionary_value")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        UUID for condition
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isNegate")
    def is_negate(self) -> bool:
        """
        Indicates whereas this condition is in negate mode
        """
        return pulumi.get(self, "is_negate")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Equality operator
        """
        return pulumi.get(self, "operator")


