# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from ri.apiclient.models.validate_request_input import ValidateRequestInput
from ri.apiclient.models.validate_request_output import ValidateRequestOutput
from typing import Optional, Set
from typing_extensions import Self

class ValidateRequest(BaseModel):
    """
    ValidateRequest is a single request to the firewall on a piece of user input / output. Either the input or output must be provided.
    """ # noqa: E501
    input: Optional[ValidateRequestInput] = None
    output: Optional[ValidateRequestOutput] = None
    firewall_instance_id: Optional[Dict[str, Any]] = Field(default=None, description="Identify which FirewallInstance to route this request to. This is not used by the server directly, but it is necessary for routing.", alias="firewallInstanceId")
    __properties: ClassVar[List[str]] = ["input", "output", "firewallInstanceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValidateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['output'] = self.output.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValidateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "input": ValidateRequestInput.from_dict(obj["input"]) if obj.get("input") is not None else None,
            "output": ValidateRequestOutput.from_dict(obj["output"]) if obj.get("output") is not None else None,
            "firewallInstanceId": obj.get("firewallInstanceId")
        })
        return _obj
