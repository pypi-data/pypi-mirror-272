<!--    HELLO  WORLD -->
---------------------------------------------------------------------------------------------------------------
Assignment 1(A)Dashboard

index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f8f9fa;
      color: #343a40; /* Text color */
    }
    .sidebar {
      height: 100%;
      width: 250px;
      position: fixed;
      top: 0;
      left: 0;
      background-color: #343a40;
      padding-top: 20px;
    }
    .content {
      margin-left: 250px;
      padding: 20px;
      display: flex;
      justify-content: space-between;
    }
    .card {
      width: 30%;
      background-color: #f8f9fa; /* Card background color */
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    table {
      width: 100%;
      margin-top: 20px;
      border-collapse: collapse;
      background-color: #ffffff; /* Table background color */
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    th, td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #dee2e6;
    }
    th {
      background-color: #343a40;
      color: #ffffff;
    }
    h2 {
      text-align: center;
      margin-top: 40px;
      color: #343a40; /* Text color */
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
      color: #343a40; /* Text color */
      padding: 20px;
    }
  </style>
</head>
<body>


<div class="sidebar">
  <ul class="nav flex-column">
    <li class="nav-item">
      <a class="nav-link active" href="#">Dashboard</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="#">Products</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="#">Orders</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="#">Users</a>
    </li>
  </ul>
</div>

<div class="content">
  <div class="card">
    <h5 class="card-title">Total Products</h5>
    <p class="card-text">500</p>
  </div>
  <div class="card">
    <h5 class="card-title">Total Orders</h5>
    <p class="card-text">1000</p>
  </div>
  <div class="card">
    <h5 class="card-title">Total Users</h5>
    <p class="card-text">200</p>
  </div>
</div>


<table>
  <thead>
    <tr>
      <th>Order ID</th>
      <th>Customer Name</th>
      <th>Product</th>
      <th>Quantity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>John Doe</td>
      <td>Product A</td>
      <td>2</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Jane Smith</td>
      <td>Product B</td>
      <td>1</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Michael Johnson</td>
      <td>Product C</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

--------------------------------------------------------------------------------------------------------------------

Assignment 1(B)AJAX
1.index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Assignment 1B</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css"
      integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn"
      crossorigin="anonymous"
    />
  </head>

  <body>
    <div class="container">
      <button
        class="btn btn-outline-success mt-5"
        data-toggle="modal"
        data-target="#addNewUser"
      >
        Add New User
      </button>
      <table class="table table-striped table-bordered my-5">
        <thead>
          <tr>
            <th scope="col">Sr No</th>
            <th scope="col">Name</th>
            <th scope="col">Username</th>
            <th scope="col">Email</th>
            <th scope="col">Phone</th>
            <th scope="col">City</th>
          </tr>
        </thead>
        <tbody id="tbody"></tbody>
      </table>

      <div class="modal fade" id="addNewUser">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">Enter details</h5>
              <button
                type="button"
                class="close"
                data-dismiss="modal"
                aria-label="Close"
              >
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <form>
                <div class="form-group">
                  <label for="email">Email address</label>
                  <input type="email" class="form-control" id="email" />
                </div>
                <div class="form-group">
                  <label for="text">Name</label>
                  <input type="text" class="form-control" id="name" />
                </div>
                <div class="form-group">
                  <label for="text">Username</label>
                  <input type="text" class="form-control" id="username" />
                </div>
                <div class="form-group">
                  <label for="text">City</label>
                  <input type="text" class="form-control" id="city" />
                </div>

                <div class="form-group">
                  <label for="text">phone</label>
                  <input type="text" class="form-control" id="phone" />
                </div>
                <div class="form-group">
                  <label for="password">Password</label>
                  <input type="password" class="form-control" id="password" />
                </div>
                <button
                  type="submit"
                  id="btn"
                  data-dismiss="modal"
                  class="btn btn-primary"
                >
                  Submit
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script src="server.js"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"
      integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
      integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js"
      integrity="sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2"
      crossorigin="anonymous"
    ></script>
  </body>
</html>



2.server.js

let fetchData = () => {
    let httprequest = new XMLHttpRequest();
    httprequest.open("GET", "https://jsonplaceholder.typicode.com/users");
    httprequest.send();
    httprequest.onload = () => {
        let res = JSON.parse(httprequest.responseText);
        console.log(res);
        localStorage.setItem("users", JSON.stringify(res));
        displayData();
    };
  };
  
  let displayData = () => {
    let tbody = document.getElementById("tbody");
    tbody.innerHTML = "";
    let storedUser = JSON.parse(localStorage.getItem("users"));
    storedUser.map((user, index) => tbody.innerHTML += `
        <tr>
            <td>${index + 1}</td>
            <td>${user.name}</td>
            <td>${user.username}</td>
            <td>${user.email}</td>
            <td>${user.phone}</td>
            <td>${user.address.city}</td>
        </tr>`
    );
  };
  
  // Initial Data
  fetchData();
  
  let btn = document.getElementById("btn");
  btn.addEventListener("click", () => {
    const email = document.getElementById("email").value;
    const username = document.getElementById("username").value;
    const password = document.getElementById("password").value;
    const name = document.getElementById("name").value;
    const city = document.getElementById("city").value;
    const phone = document.getElementById("phone").value;
  
    let postObject = {
        email,
        password,
        name,
        phone,
        username,
        address: {
            city: city,
        },
    };
  
    let xhr = new XMLHttpRequest();
    xhr.open("POST", "https://jsonplaceholder.typicode.com/users/");
    xhr.setRequestHeader("Content-type", "application/json; charset=UTF-8");
    xhr.send(JSON.stringify(postObject));
  
    xhr.onload = () => {
        if (xhr.status == 201) {
            let storedUser = JSON.parse(localStorage.getItem("users"));
            storedUser.unshift(postObject);
            localStorage.setItem("users", JSON.stringify(storedUser));
            displayData();
        }
    };
  });



3. AJAX commands
-npm init
-npm install express cors body-parser
-node index.js

  
---------------------------------------------------------------------------------------------------------------
Assignment 1(B)AJAX

1.index.html
<!DOCTYPE html>

<html lang="en" dir="ltr">

<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" href="style.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>
  <div class="container">
    <div class="title">Registration</div>
    <div class="content">
      <form action="#">
        <div class="user-details">
          <div class="input-box">
            <span class="details">Full Name</span>
            <input type="text" placeholder="Enter your name" id="name" name="name">
          </div>
          <div class="input-box">
            <span class="details">Email</span>
            <input type="email" id="email" name="email" placeholder="Enter your email">
          </div>
          <div class="input-box">
            <span class="details">Phone Number</span>
            <input type="text" id="phoneno" name="phoneno" placeholder="Enter your number">
          </div>
          <div class="input-box">
            <span class="details">Password</span>
            <input type="password" id="password" name="password" placeholder="Enter your password">
          </div>
        </div>
        <div class="button">
          <input type="submit" onclick="saveData()" value="Register">
        </div>

      </form>

      <a href="data-list.html">Show Users</a>
    </div>
  </div>
  <script src="script.js"></script>
</body>

</html>

2.data.html
<!DOCTYPE html>
<html>

<head>
    <title>User Data List</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
    <div>
        <h1>User Data List</h1>
    </div>
    <br>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Password</th>
                <th>Phone No</th>
            </tr>
        </thead>
        <tbody>
            <!-- Loop through the saved data and create a row for each user -->
            <script>
                var users = JSON.parse(localStorage.getItem("userslist")) || [];
                for (var i = 0; i < users.length; i++) {
                    document.write("<tr>");
                    document.write("<td>" + users[i].name + "</td>");
                    document.write("<td>" + users[i].email + "</td>");
                    document.write("<td>" + users[i].password + "</td>");
                    //document.write("<td>" + users[i].password + "</td>");
                    document.write("<td>" + users[i].phoneno + "</td>");
                    document.write("</tr>");
                }
            </script>
        </tbody>
    </table>


</body>

</html>

3.script.js
function saveData() {
  // Get form input values
  var name = document.getElementById("name").value;
  var email = document.getElementById("email").value;
  var password = document.getElementById("password").value;
  var phoneno = document.getElementById("phoneno").value;

  // Create an object to hold the data
  var user = {
    name: name,
    email: email,
    password: password,
    phoneno: phoneno,
  };

  // Make an AJAX POST request to save the data
  var xhr = new XMLHttpRequest();
  xhr.open("POST", "save-data.php");
  xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
  xhr.send(JSON.stringify(user));

  // Save the data to local storage
  var users = JSON.parse(localStorage.getItem("userslist")) || [];
  users.push(user);
  localStorage.setItem("userslist", JSON.stringify(users));

  //  function showData(){
  // Redirect to the data list page
  //}
  //localStorage.clear();
}

4.style.css
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 10px;
}

.container {
  max-width: 700px;
  width: 100%;
  background-color: #fff;
  padding: 25px 30px;
  border-radius: 5px;
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15);
}

.container .title {
  font-size: 25px;
  font-weight: 500;
  text-align: center;
  margin-bottom: 20px;
}

.content {
  margin-top: 20px;
}

.content input {
  width: 100%;
  height: 45px;
  margin-bottom: 15px;
  padding: 0 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
  transition: border-color 0.3s ease;
}

.content input:focus,
.content input:valid {
  border-color: #9b59b6;
}

.button input {
  width: 100%;
  height: 45px;
  background: linear-gradient(135deg, #71b7e6, #9b59b6);
  color: #fff;
  border: none;
  border-radius: 5px;
  font-size: 18px;
  font-weight: 500;
  letter-spacing: 1px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.button input:hover {
  background: linear-gradient(-135deg, #71b7e6, #9b59b6);
}
------------------------------------------------------------------------------------------------------------

Assignment 2(A)Git

Commands
1.mkdir PartA
2.cd PartA
3.git --version
4.git init
5.git add .
6.git status
7.git remote add origin "URL of your repository created"
8.git commit -m "First commit"
9.If prompted to authenticate user,type following command
git config --global user.email "email"
git config --global user.name "user name"
10.git push -u origin master
11.git status

For pushing 2nd file
1.git add .
2.git status
3.git commit -m 
4.git push
5.git status
-------------------------------------------------------------------------------------------------------------

Assignment 2(B)

Commands
1.docker -v
2.docker images
3.docker ps
4.Go to google and search docker hub,Then search for image OpenJDK.From that copy url
5.docker pull OpenJDK
6.docker images
7.docker run --name JAVA -it -d openjdk
8.docker ds
9.docker exec -it JAVA jshell
10.System.out.println("Hello Docker");
11.int a=10
12.int b=20
13.System.out.println(a+b);
14.docker ps
15./exit
16.docker ps
17.docker stop container_id
18.docker container rn container_id
19.docker ps
20.docker images
21.docker image prune
-------------------------------------------------------------------------------------------------------------

Assignment 2(C)Angular

1.Commands in Terminal
npm --version

npm install -g @angular/cli@latest

ng new part c

y

css

partc/src =
>app.component.css
>app.component.html
>app.component.ts

cd part c

ng serve

y

2.app.component.css

input{
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: inline-block;
    border: 1px solid #ccc;
    box-sizing: border-box;
}
button{
    background-color: #4CAF50;
    color: white;
    padding: 14px 20px;
    margin: 8px 0;
    border: none;
    cursor: pointer;
    width: 100%;
}

3.app.component.html

<h1>{{title}}</h1>

<input type="text" #name placeholder="Enter Your Name" name="name"> <br>

<input type="text" #address placeholder="Enter Your Address" name="address"> <br>

<input type="text" #contact placeholder="Enter Your Contact" name="contact"> <br>

<input type="email" #email placeholder="Enter Your email" name="email"> <br>

<input type="password" #password placeholder="Enter Your Password" name="password"> <br>

<button (click)="getValue(name.value, address.value, contact.value, email.value)">Register</button>


<h1>Your Registered Data</h1> <br>
<p>Name:{{displayname}}</p>
<p>Address:{{displayaddress}}</p>
<p>Contact:{{displaycontact}}</p>
<p>Email:{{displayemail}}</p>

4.app.component.ts


import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'Registration Form';

  displayname = '';
  displayaddress = '';
  displayemail = '';
  displaycontact = '';

  getValue(name:string, address:string, email:string, contact:string){
    this.displayname = name;
    this.displayaddress = address;
    this.displayemail = email;
    this.displaycontact = contact;
  }
  
}
-------------------------------------------------------------------------------------------------------------

Assignment 3(a)Node

1.Commands


npm --version

node -- version

npm init -y

npm install express

Now create a file app.js and then its code after that create an index.html file and its code again come to terminal and type

node app.js

2.index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>welcome !!!</title>
    <style>
        body {
             background-color: rgba(234, 170, 241, 0.174);
            }
        img{
            height:500 ;
            width:500 ;
           }
      
        </style></head>
<body>
  
    <h1 style="color:rgb(155, 154, 106);"> <center>Welcome To Online Shopping System</center></h1>
   <center><img src="shopping_image.jpg" alt="image"  width="460" height="345" class="center"></center>
</body>
</html>


3.app.js

const express = require ('express');
const app = express();
app.use(express.static('public'));
app.listen(3000,() => {
    console.log('Application is started');
})

------------------------------------------------------------------------------------------------------------------
Assignment 3(B)Mongo

server.js 

// server.js
require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const User = require('./models/user');
const path = require('path');

const app = express();
app.use(bodyParser.json());

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

// Connect to MongoDB database
mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
}).then(() => {
    console.log("Connected to MongoDB database");
}).catch((error) => {
    console.error("Error connecting to MongoDB database:", error);
});

// Create a new user
app.post('/api/users', async (req, res) => {
    try {
        const user = new User(req.body);
        await user.save();
        res.status(201).send(user);
    } catch (error) {
        res.status(400).send(error);
    }
});

// Read all users
app.get('/api/users', async (req, res) => {
    try {
        const users = await User.find({});
        res.send(users);
    } catch (error) {
        res.status(500).send(error);
    }
});

// Update a user by ID
app.patch('/api/users/:id', async (req, res) => {
    try {
        const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (error) {
        res.status(400).send(error);
    }
});

// Delete a user by ID
app.delete('/api/users/:id', async (req, res) => {
    try {
        const user = await User.findByIdAndDelete(req.params.id);
        if (!user) {
            return res.status(404).send();
        }
        res.send(user);
    } catch (error) {
        res.status(500).send(error);
    }
});

const port = process.env.PORT || 3000;
app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});


models/user.js

// models/user.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    age: {
        type: Number,
        required: true
    }
});

const User = mongoose.model('User', userSchema);

module.exports = User;

public/index.html

<!-- public/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>User Management System</title>
</head>
<body>
  <h2>User Management System</h2>
  <form id="userForm">
    <label for="name">Name:</label><br>
    <input type="text" id="name" name="name" required><br>
    <label for="email">Email:</label><br>
    <input type="email" id="email" name="email" required><br>
    <label for="age">Age:</label><br>
    <input type="number" id="age" name="age" required><br><br>
    <button type="submit">Add User</button>
  </form>

  <div id="userList"></div>

  <script src="/script.js"></script>
</body>
</html>

public/script.js

// public/script.js
document.getElementById("userForm").addEventListener("submit", function(event) {
    event.preventDefault(); // Prevent default form submission
  
    var name = document.getElementById("name").value;
    var email = document.getElementById("email").value;
    var age = document.getElementById("age").value;
  
    // Send an HTTP POST request to the server to add a new user
    fetch('/api/users', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ name: name, email: email, age: age })
    })
    .then(response => response.json())
    .then(data => {
      console.log('User added successfully:', data);
      alert('User added successfully!');
      displayUsers(); // Refresh the user list after adding a new user
    })
    .catch(error => {
      console.error('Error adding user:', error);
      alert('Error adding user. Please try again.');
    });
  });
  
  // Function to display all users
  function displayUsers() {
    fetch('/api/users')
    .then(response => response.json())
    .then(users => {
      var userList = document.getElementById("userList");
      userList.innerHTML = ''; // Clear previous content
      users.forEach(user => {
        var userItem = document.createElement("div");
        userItem.textContent = `Name: ${user.name}, Email: ${user.email}, Age: ${user.age}`;
        
        // Create update button
        var updateButton = document.createElement("button");
        updateButton.textContent = "Update";
        updateButton.onclick = function() {
          updateUser(user._id, user.name, user.email, user.age);
        };
  
        // Create delete button
        var deleteButton = document.createElement("button");
        deleteButton.textContent = "Delete";
        deleteButton.onclick = function() {
          deleteUser(user._id);
        };
  
        userItem.appendChild(updateButton);
        userItem.appendChild(deleteButton);
  
        userList.appendChild(userItem);
      });
    })
    .catch(error => {
      console.error('Error fetching users:', error);
      alert('Error fetching users. Please try again.');
    });
  }
  
  // Function to update a user
  function updateUser(userId, name, email, age) {
    var newName = prompt("Enter new name:", name);
    var newEmail = prompt("Enter new email:", email);
    var newAge = prompt("Enter new age:", age);
  
    if (newName && newEmail && newAge) {
      fetch(`/api/users/${userId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name: newName, email: newEmail, age: newAge })
      })
      .then(response => response.json())
      .then(data => {
        console.log('User updated successfully:', data);
        alert('User updated successfully!');
        displayUsers(); // Refresh the user list after updating the user
      })
      .catch(error => {
        console.error('Error updating user:', error);
        alert('Error updating user. Please try again.');
      });
    }
  }
  
  // Function to delete a user
  function deleteUser(userId) {
    if (confirm("Are you sure you want to delete this user?")) {
      fetch(`/api/users/${userId}`, {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        console.log('User deleted successfully:', data);
        alert('User deleted successfully!');
        displayUsers(); // Refresh the user list after deleting the user
      })
      .catch(error => {
        console.error('Error deleting user:', error);
        alert('Error deleting user. Please try again.');
      });
    }
  }
  
  // Initial call to display all users when the page loads
  displayUsers();
  
----------------------------------------------------------------------------------------------------------------

Assignment 4 jQuery mobile

1.api.js

// api.js

// Fetch book data based on search query
function searchBooks(query) {
    const url = `https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}`;

    fetch(url)
      .then(response => response.json())
      .then(data => {
        // Process the fetched data (e.g., display results on the page)
        console.log(data);
      })
      .catch(error => {
        console.error('Error:', error);
      });
  }

  // Handle search button click event
  document.getElementById('searchButton').addEventListener('click', () => {
    const searchInput = document.getElementById('searchInput');
    const query = searchInput.value;

    if (query) {
      searchBooks(query);
    }
  });

2.index.html

<!DOCTYPE html>
<html>
<head>
  <title>KK Wagh Institute of Engineering</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css" />
  <script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
  <script src="https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>
</head>
<style>
  .ui-navbar {
    background-color: #1eb243;
    color: #02600d;
  }
  .scroll-down {
    text-align: center;
    margin-top: 20px;
  }
</style>
</head>
<body>
<div data-role="page" id="home">
  <div data-role="header" data-position="fixed" data-theme="b">
    <h1>KK Wagh Institute of Engineering</h1>
    <div data-role="navbar">
      <ul>
        <li><a href="#home" class="ui-btn-active">Home</a></li>
        <li><a href="#departments">Departments</a></li>
        <li><a href="#about">About</a></li>
        <li><a href="#contact">Contact</a></li>
      </ul>
    </div>
  </div>
  <div data-role="content">
    <h2>Welcome to KK Wagh Institute of Engineering!</h2>
    <p>Located in Nashik, Maharashtra, KK Wagh Institute of Engineering is a premier engineering institute offering various undergraduate and postgraduate programs in engineering and technology.</p>
    <h3>About Us</h3>
    <p>The institute was established in 1984 with a vision to provide quality education and produce skilled engineers.</p>
    <h3>Facilities</h3>
    <ul>
      <li>State-of-the-art laboratories</li>
      <li>Well-equipped classrooms</li>
      <li>Library with a vast collection of books</li>
      <li>Sports facilities</li>
    </ul>
    <h3>Admissions</h3>
    <p>We offer admissions based on entrance exams and merit.</p>
    <div class="scroll-down">
      <a href="#departments" data-role="button" data-icon="arrow-d" data-iconpos="right">Scroll Down</a>
    </div>
  </div>
  <div data-role="footer" style="text-align: center" data-theme="b">
    <h4>KK Wagh Institute of Engineering - Nashik</h4>
  </div>
</div>

<div data-role="page" id="departments">
  <div data-role="header" data-position="fixed" data-theme="b">
    <h1>Departments</h1>
    <div data-role="navbar">
      <ul>
        <li><a href="#home">Home</a></li>
        <li><a href="#departments" class="ui-btn-active">Departments</a></li>
        <li><a href="#about">About</a></li>
        <li><a href="#contact">Contact</a></li>
      </ul>
    </div>
  </div>
  <div data-role="content">
    <h2>Departments at KK Wagh Institute of Engineering</h2>
    <ul data-role="listview" data-inset="true">
      <li>Computer Science and Engineering</li>
      <li>Electronics and Telecommunication Engineering</li>
      <li>Mechanical Engineering</li>
      <li>Civil Engineering</li>
      <li>Electrical Engineering</li>
      <li>Information Technology</li>
    </ul>
  </div>
  <div data-role="footer" style="text-align: center" data-theme="b">
    <h4>KK Wagh Institute of Engineering - Nashik</h4>
  </div>
</div>

<div data-role="page" id="about">
  <div data-role="header" data-position="fixed" data-theme="b">
    <h1>About</h1>
    <div data-role="navbar">
      <ul>
        <li><a href="#home">Home</a></li>
        <li><a href="#departments">Departments</a></li>
        <li><a href="#about" class="ui-btn-active">About</a></li>
        <li><a href="#contact">Contact</a></li>
      </ul>
    </div>
  </div>
  <div data-role="content">
    <h2>About KK Wagh Institute of Engineering</h2>
    <p>The KK Wagh Institute of Engineering is committed to providing quality education and fostering a conducive environment for students to develop their skills and knowledge in engineering and technology.</p>
  </div>
  <div data-role="footer" style="text-align: center" data-theme="b">
    <h4>KK Wagh Institute of Engineering - Nashik</h4>
  </div>
</div>

<div data-role="page" id="contact">
  <div data-role="header" data-position="fixed" data-theme="b">
    <h1>Contact</h1>
    <div data-role="navbar">
      <ul>
        <li><a href="#home">Home</a></li>
        <li><a href="#departments">Departments</a></li>
        <li><a href="#about">About</a></li>
        <li><a href="#contact" class="ui-btn-active">Contact</a></li>
      </ul>
    </div>
  </div>
  <div data-role="content">
    <h2>Contact KK Wagh Institute of Engineering</h2>
    <p>Address: ABC Road, Nashik, Maharashtra, India</p>
    <p>Email: info@kkwagh.edu</p>
    <p>Phone: +91 1234567890</p>
  </div>
  <div data-role="footer" style="text-align: center" data-theme="b">
    <h4>KK Wagh Institute of Engineering - Nashik</h4>
  </div>
</div>
</body>
</html>


------------------------------------------------------------------------------------------------------------------------------------------------------------
Cloud Computing

GAE

1.On google search console cloud google and sign in
2.Go to three lines in that cloud overview and then dashboard
3.Create new project and enable it.
4.search admin API then click on it and enable it.
5.Then open terminal
6.go to GitHub create a project with a file python.py 
7.Copy its path
8.Go to terminal again and then 
-git clone ""
-ls
-cd lp2
-ls
-python t1.py
-cd\
-rm -rf lp2
-ls
 
------------------------------------------------------------------------------------------------------------------------------------

VM

Commands:VM1
1.vagrant 
2.vagrant
3.ifconfig
4.ls
5.touch sayali.txt
6.cat sayali.txt
7.nano sayali.txt
Editor will open and write the content in it.
8.ctrl+s
9.ctrl+x
10.cat sayali.txt
11.scp sayali.txt vagrant@ipaddress of another vm:/home/vagrant
12.yes
13.vagrant


Commands:VM2
1.vagrant              
2.vagrant
3.ifconfig
4.ls
5.cat sayali.txt
