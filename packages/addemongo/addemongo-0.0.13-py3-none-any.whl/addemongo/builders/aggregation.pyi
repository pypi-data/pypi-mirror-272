from typing import Any, Callable

class AggregationBuilder:
    def __init__(self) -> None: ...
    def set_group(self, query: dict[str, Any], body: dict[str, Any], condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_match(self, query: dict[str, Any], condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_project(self, query: dict[str, Any], condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_sort(self, key: str, by: int, condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_limit(self, limit: int, condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_skip(self, skip: int, condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_unwind(self, key: str, condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_lookup(self, key: str, from_collection: str, local_field: str, foreign_field: str, as_field: str, condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_add_fields(self, query: dict[str, Any], condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def set_facet(self, query: dict[str, Any], condition: Callable[[], bool] = ...) -> AggregationBuilder: ...
    def build(self): ...
