from typing import Any, Callable

class QueryBuilder:
    def __init__(self) -> None: ...
    def set_equal(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_not_equal(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_greater_than(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_greater_than_or_equal(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_less_than(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_less_than_or_equal(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_in(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_not_in(self, key: str, value: Any, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_regex(self, key: str, value: Any, case_sensivite: bool = True, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_not_regex(self, key: str, value: Any, case_sensivite: bool = True, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_element_match(self, key: str, query: QueryBuilder, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_or(self, *querys: QueryBuilder, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_and(self, *querys: QueryBuilder, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def set_nor(self, *querys: QueryBuilder, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def update_query(self, query: dict[str, Any], condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def remove_key(self, key: str, condition: Callable[[], bool] = ...) -> QueryBuilder: ...
    def build(self): ...
