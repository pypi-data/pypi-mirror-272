from .._base_client import AddeMongoBaseClient as AddeMongoBaseClient
from .._types import AggregatePag as AggregatePag, BM as BM, T as T
from ..builders import AggregationBuilder as AggregationBuilder, QueryBuilder as QueryBuilder
from ..connection import AddeMongoConnection as AddeMongoConnection
from _typeshed import Incomplete
from addemongo.models.pagination import Pagination as Pagination
from pymongo.results import DeleteResult as DeleteResult, InsertManyResult as InsertManyResult, InsertOneResult as InsertOneResult, UpdateResult as UpdateResult

class AddeMongoAsyncClient(AddeMongoBaseClient[BM]):
    client: Incomplete
    database: Incomplete
    collection: Incomplete
    def __init__(self, connection: AddeMongoConnection, database: str, collection: str, response_class: type[BM]) -> None: ...
    async def insert_one(self, document: BM) -> InsertOneResult: ...
    async def insert_many(self, documents: list[BM]) -> InsertManyResult: ...
    async def update_one(self, query: QueryBuilder, document: BM, upsert: bool = False) -> UpdateResult: ...
    async def update_many(self, document: BM, query: QueryBuilder = ..., upsert: bool = False) -> UpdateResult: ...
    async def find_one(self, query: QueryBuilder) -> BM | None: ...
    async def find_many(self, query: QueryBuilder = ..., limit: int = 0, skip: int = 0) -> list[BM]: ...
    async def delete_one(self, query: QueryBuilder) -> DeleteResult: ...
    async def delete_many(self, query: QueryBuilder = ...) -> DeleteResult: ...
    async def count_documents(self, query: QueryBuilder = ...) -> int: ...
    async def aggregation(self, document_class: type[T], pipeline: AggregationBuilder = ...) -> list[T]: ...
    async def pagination(self, query: QueryBuilder = ..., page: int = 0, per_page: int = 10) -> Pagination[BM]: ...
    async def aggregation_pagination(self, document_class: type[T], pipeline: AggregationBuilder = ..., page: int = 0, per_page: int = 10) -> Pagination[T]: ...
