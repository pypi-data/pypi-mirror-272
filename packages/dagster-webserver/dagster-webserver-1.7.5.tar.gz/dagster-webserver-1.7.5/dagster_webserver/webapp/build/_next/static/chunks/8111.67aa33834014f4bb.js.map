{"version":3,"file":"static/chunks/8111.67aa33834014f4bb.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationTick.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationUtils.tsx","webpack://_N_E/../ui-core/src/instigation/TickDetailsDialog.tsx","webpack://_N_E/../ui-core/src/ticks/TickLogDialog.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Body,\n  Box,\n  Colors,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tooltip,\n} from '@dagster-io/ui-components';\n\nimport {LaunchedRunListQuery, LaunchedRunListQueryVariables} from './types/InstigationTick.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RUN_TABLE_RUN_FRAGMENT, RunTable} from '../runs/RunTable';\n\nexport const RunList = ({runIds}: {runIds: string[]}) => {\n  const {data, loading} = useQuery<LaunchedRunListQuery, LaunchedRunListQueryVariables>(\n    LAUNCHED_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          runIds,\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return (\n      <Box padding={32}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={32}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"An error occurred\"\n          description={data.pipelineRunsOrError.message}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </Box>\n  );\n};\n\nexport const TargetedRunList = ({originRunIds}: {originRunIds?: string[]}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', color: Colors.textLighter()}}>\n        <Body>\n          Targeted Runs\n          <Tooltip content=\"Runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={Colors.textLight()} />\n          </Tooltip>\n        </Body>\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={Colors.textLight()} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst LAUNCHED_RUN_LIST_QUERY = gql`\n  query LaunchedRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Mono} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {InstigationStateFragment, RunStatusFragment} from './types/InstigationUtils.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nexport const InstigatedRunStatus = ({\n  instigationState,\n}: {\n  instigationState: InstigationStateFragment;\n}) => {\n  const [instigationRun] = instigationState.runs;\n  if (!instigationRun) {\n    return <span style={{color: Colors.textLight()}}>None</span>;\n  }\n  return <LastRunSummary run={instigationRun} name={instigationState.name} />;\n};\n\nexport const RunStatusLink = ({run}: {run: RunStatusFragment}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.id}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({id: run.id})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    hasStartPermission\n    hasStopPermission\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${Colors.textLight()};\n  }\n`;\n\nexport const DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT = gql`\n  fragment DynamicPartitionsRequestResultFragment on DynamicPartitionsRequestResult {\n    partitionsDefName\n    partitionKeys\n    skippedPartitionKeys\n    type\n  }\n`;\n\nexport const HISTORY_TICK_FRAGMENT = gql`\n  fragment HistoryTick on InstigationTick {\n    id\n    tickId\n    status\n    timestamp\n    endTimestamp\n    cursor\n    instigationType\n    skipReason\n    runIds\n    runs {\n      id\n      status\n      ...RunStatusFragment\n    }\n    originRunIds\n    error {\n      ...PythonErrorFragment\n    }\n    logKey\n    ...TickTagFragment\n    dynamicPartitionsRequestResults {\n      ...DynamicPartitionsRequestResultFragment\n    }\n  }\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport 'chartjs-adapter-date-fns';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Dialog,\n  DialogFooter,\n  DialogHeader,\n  MiddleTruncate,\n  Spinner,\n  Subtitle2,\n  Tab,\n  Table,\n  Tabs,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {RunList, TargetedRunList} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT} from './InstigationUtils';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/TickDetailsDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {QueryfulTickLogsTable} from '../ticks/TickLogDialog';\n\ninterface DialogProps extends InnerProps {\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nexport const TickDetailsDialog = ({tickId, isOpen, instigationSelector, onClose}: DialogProps) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '80vw', maxWidth: '1200px', minWidth: '600px'}}\n    >\n      <TickDetailsDialogImpl tickId={tickId} instigationSelector={instigationSelector} />\n      {/* The logs table uses z-index for the column lines. Create a new stacking index\n      for the footer so that the lines don't sit above it. */}\n      <div style={{zIndex: 1}}>\n        <DialogFooter topBorder>\n          <Button onClick={onClose}>Close</Button>\n        </DialogFooter>\n      </div>\n    </Dialog>\n  );\n};\n\ninterface InnerProps {\n  tickId: number | undefined;\n  instigationSelector: InstigationSelector;\n}\n\nconst TickDetailsDialogImpl = ({tickId, instigationSelector}: InnerProps) => {\n  const [activeTab, setActiveTab] = useState<'result' | 'logs'>('result');\n\n  const {data} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(JOB_SELECTED_TICK_QUERY, {\n    variables: {instigationSelector, tickId: tickId || 0},\n    skip: !tickId,\n  });\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  const [addedPartitionRequests, deletedPartitionRequests] = useMemo(() => {\n    const added = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.ADD_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    const deleted = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.DELETE_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  if (!tick) {\n    return (\n      <Box style={{padding: 32}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <DialogHeader\n        label={\n          <TimestampDisplay\n            timestamp={tick.timestamp}\n            timeFormat={{showTimezone: false, showSeconds: true}}\n          />\n        }\n      />\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <TickDetailSummary tick={tick} />\n      </Box>\n      <Box padding={{horizontal: 24}} border=\"bottom\">\n        <Tabs selectedTabId={activeTab} onChange={setActiveTab}>\n          <Tab id=\"result\" title=\"Result\" />\n          <Tab id=\"logs\" title=\"Logs\" />\n        </Tabs>\n      </Box>\n      {activeTab === 'result' ? (\n        <div style={{height: '500px', overflowY: 'auto'}}>\n          {tick.runIds.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Requested Runs</Subtitle2>\n              </Box>\n              <RunList runIds={tick.runIds} />\n            </>\n          ) : tick.originRunIds.length ? (\n            <TargetedRunList originRunIds={tick.originRunIds} />\n          ) : null}\n          {addedPartitionRequests?.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Added partitions</Subtitle2>\n              </Box>\n              <PartitionsTable partitions={addedPartitionRequests} />\n            </>\n          ) : null}\n          {deletedPartitionRequests?.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Deleted partitions</Subtitle2>\n              </Box>\n              <PartitionsTable partitions={deletedPartitionRequests} />\n            </>\n          ) : null}\n          {tick.error ? (\n            <Box padding={24}>\n              <PythonErrorInfo error={tick.error} />\n            </Box>\n          ) : null}\n          {tick.skipReason ? (\n            <Box padding={24}>\n              <strong>Skip reason:</strong> {tick.skipReason}\n            </Box>\n          ) : null}\n        </div>\n      ) : null}\n      {activeTab === 'logs' ? (\n        <QueryfulTickLogsTable instigationSelector={instigationSelector} tick={tick} />\n      ) : null}\n    </>\n  );\n};\n\nexport function TickDetailSummary({tick}: {tick: HistoryTickFragment | AssetDaemonTickFragment}) {\n  const intent = useMemo(() => {\n    switch (tick?.status) {\n      case InstigationTickStatus.FAILURE:\n        return 'danger';\n      case InstigationTickStatus.STARTED:\n        return 'primary';\n      case InstigationTickStatus.SUCCESS:\n        return 'success';\n    }\n    return undefined;\n  }, [tick]);\n\n  const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n\n  return (\n    <>\n      <div style={{display: 'grid', gridTemplateColumns: 'repeat(3, minmax(0, 1fr))', gap: 12}}>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Status</Subtitle2>\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Tag intent={intent}>\n              {tick.status === InstigationTickStatus.STARTED ? (\n                'Evaluating…'\n              ) : (\n                <>\n                  {(isAssetDaemonTick\n                    ? tick.requestedAssetMaterializationCount\n                    : tick.runIds.length) ?? 0}{' '}\n                  requested\n                </>\n              )}\n            </Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  showCustomAlert({\n                    title: 'Tick error',\n                    body: <PythonErrorInfo error={tick.error!} />,\n                  });\n                }}\n              >\n                View error\n              </ButtonLink>\n            ) : null}\n          </Box>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Timestamp</Subtitle2>\n          <div>\n            {tick ? (\n              <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n            ) : (\n              '–'\n            )}\n          </div>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Duration</Subtitle2>\n          <div>\n            {tick?.endTimestamp\n              ? formatElapsedTimeWithoutMsec(tick.endTimestamp * 1000 - tick.timestamp * 1000)\n              : '\\u2013'}\n          </div>\n        </Box>\n      </div>\n    </>\n  );\n}\n\nfunction PartitionsTable({partitions}: {partitions: DynamicPartitionsRequestResult[]}) {\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Partition definition</th>\n          <th>Partition</th>\n        </tr>\n      </thead>\n      <tbody>\n        {partitions.flatMap(\n          (partition) =>\n            partition.partitionKeys?.map((key) => (\n              <tr key={key}>\n                <td>\n                  <MiddleTruncate text={partition.partitionsDefName} />\n                </td>\n                <td>\n                  <MiddleTruncate text={key} />\n                </td>\n              </tr>\n            )),\n        )}\n      </tbody>\n    </Table>\n  );\n}\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $tickId: Int!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        tick(tickId: $tickId) {\n          id\n          ...HistoryTick\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  ExternalAnchorButton,\n  Icon,\n  NonIdealState,\n} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {\n  TickLogEventFragment,\n  TickLogEventsQuery,\n  TickLogEventsQueryVariables,\n} from './types/TickLogDialog.types';\nimport {InstigationSelector} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\nimport {EventTypeColumn, Row, TimestampColumn} from '../runs/LogsRowComponents';\nimport {\n  ColumnWidthsContext,\n  ColumnWidthsProvider,\n  Header,\n  HeaderContainer,\n  HeadersContainer,\n} from '../runs/LogsScrollingTableHeader';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const TickLogDialog = ({\n  tick,\n  instigationSelector,\n  onClose,\n}: {\n  tick: HistoryTickFragment;\n  instigationSelector: InstigationSelector;\n  onClose: () => void;\n}) => {\n  const {data} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(TICK_LOG_EVENTS_QUERY, {\n    variables: {instigationSelector, tickId: Number(tick.tickId)},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  return (\n    <Dialog\n      isOpen={!!events}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      title={tick ? <TimestampDisplay timestamp={tick.timestamp} /> : null}\n    >\n      <DialogBody>\n        {events && events.length ? (\n          <TickLogsTable events={events} />\n        ) : (\n          <Box\n            flex={{justifyContent: 'center', alignItems: 'center'}}\n            style={{flex: 1, color: Colors.textLight()}}\n          >\n            No logs available\n          </Box>\n        )}\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"primary\" onClick={onClose}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface TickLogTableProps {\n  tick: HistoryTickFragment;\n  instigationSelector: InstigationSelector;\n}\n\nexport const QueryfulTickLogsTable = ({instigationSelector, tick}: TickLogTableProps) => {\n  const {data, loading} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(\n    TICK_LOG_EVENTS_QUERY,\n    {\n      variables: {instigationSelector, tickId: Number(tick.tickId)},\n    },\n  );\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  if (events && events.length) {\n    return <TickLogsTable events={events} />;\n  }\n\n  const tickStatus =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick.status\n      : undefined;\n  const instigationType =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.instigationType\n      : undefined;\n  const instigationLoggingDocsUrl =\n    instigationType === 'SENSOR'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#logging-in-sensors'\n      : instigationType === 'SCHEDULE'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules#logging-in-schedules'\n      : undefined;\n\n  return (\n    <Box\n      style={{height: 500}}\n      flex={{justifyContent: 'center', alignItems: 'center'}}\n      padding={{vertical: 48}}\n    >\n      {loading ? (\n        'Loading logs…'\n      ) : (\n        <NonIdealState\n          icon=\"no-results\"\n          title=\"No logs to display\"\n          description={\n            <Box flex={{direction: 'column', gap: 12}}>\n              <div>\n                Your evaluation did not emit any logs. To learn how to emit logs in your evaluation,\n                visit the documentation for more information.\n              </div>\n              {tickStatus === 'FAILURE' && (\n                <>\n                  <div>\n                    For failed evaluations, logs will only be displayed if your Dagster and Dagster\n                    Cloud agent versions 1.5.14 or higher.\n                  </div>\n                  <div>Upgrade your Dagster versions to view logs for failed evaluations.</div>\n                </>\n              )}\n            </Box>\n          }\n          action={\n            instigationLoggingDocsUrl && (\n              <ExternalAnchorButton\n                href={instigationLoggingDocsUrl}\n                rightIcon={<Icon name=\"open_in_new\" />}\n              >\n                View documentation\n              </ExternalAnchorButton>\n            )\n          }\n        />\n      )}\n    </Box>\n  );\n};\n\nconst TickLogsTable = ({events}: {events: TickLogEventFragment[]}) => {\n  return (\n    <ColumnWidthsProvider onWidthsChanged={() => {}}>\n      <div style={{height: 500, position: 'relative', zIndex: 0}}>\n        <Headers />\n        <div style={{height: 468, overflowY: 'auto'}}>\n          {events.map((event, idx) => (\n            <TickLogRow event={event} key={idx} />\n          ))}\n        </div>\n      </div>\n    </ColumnWidthsProvider>\n  );\n};\n\nconst Headers = () => {\n  const widths = useContext(ColumnWidthsContext);\n  return (\n    <HeadersContainer>\n      <Header\n        width={widths.eventType}\n        onResize={(width) => widths.onChange({...widths, eventType: width})}\n      >\n        Event Type\n      </Header>\n      <HeaderContainer style={{flex: 1}}>Info</HeaderContainer>\n      <Header\n        handleSide=\"left\"\n        width={widths.timestamp}\n        onResize={(width) => widths.onChange({...widths, timestamp: width})}\n      >\n        Timestamp\n      </Header>\n    </HeadersContainer>\n  );\n};\n\nconst TickLogRow = ({event}: {event: TickLogEventFragment}) => {\n  return (\n    <Row level={event.level} highlighted={false} style={{height: 'auto'}}>\n      <EventTypeColumn>\n        <span style={{marginLeft: 8}}>{event.level}</span>\n      </EventTypeColumn>\n      <Box padding={{horizontal: 12}} style={{flex: 1}}>\n        {event.message}\n      </Box>\n      <TimestampColumn time={event.timestamp} />\n    </Row>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $tickId: Int!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        tick(tickId: $tickId) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...TickLogEvent\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment TickLogEvent on InstigationEvent {\n    message\n    timestamp\n    level\n  }\n`;\n"],"names":["useCanSeeConfig","data","useQuery","INSTANCE_CONFIG_HAS_INFO","instance","hasInfo","gql","RunList","param","runIds","LAUNCHED_RUN_LIST_QUERY","variables","filter","loading","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","Box","padding","Spinner","purpose","pipelineRunsOrError","__typename","NonIdealState","icon","title","description","message","bottom","RunTable","runs","results","TargetedRunList","originRunIds","length","jsxs","Group","direction","spacing","border","side","color","Colors","Body","Tooltip","content","Icon","name","margin","TICK_TAG_FRAGMENT","PYTHON_ERROR_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","RunStatusLink","run","alignItems","RunStatusIndicator","status","Link","to","concat","id","target","rel","Mono","titleForRun","RUN_STATUS_FRAGMENT","INSTIGATION_STATE_FRAGMENT","RUN_TIME_FRAGMENT","StatusTable","styled","table","withConfig","DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT","HISTORY_TICK_FRAGMENT","TickDetailsDialog","tickId","isOpen","instigationSelector","onClose","Dialog","style","width","maxWidth","minWidth","TickDetailsDialogImpl","div","zIndex","DialogFooter","topBorder","Button","onClick","useState","activeTab","setActiveTab","JOB_SELECTED_TICK_QUERY","skip","tick","instigationStateOrError","undefined","useMemo","dynamicPartitionsRequestResults","request","type","DynamicPartitionsRequestType","ADD_PARTITIONS","partitionKeys","DELETE_PARTITIONS","addedPartitionRequests","deletedPartitionRequests","Fragment","DialogHeader","label","TimestampDisplay","timestamp","timeFormat","showTimezone","showSeconds","vertical","horizontal","TickDetailSummary","Tabs","selectedTabId","onChange","Tab","height","overflowY","Subtitle2","PartitionsTable","partitions","error","PythonErrorInfo","skipReason","strong","QueryfulTickLogsTable","flex","justifyContent","isAssetDaemonTick","intent","InstigationTickStatus","FAILURE","STARTED","SUCCESS","display","gridTemplateColumns","gap","Tag","requestedAssetMaterializationCount","ButtonLink","showCustomAlert","body","Timestamp","unix","endTimestamp","formatElapsedTimeWithoutMsec","Table","thead","tr","th","tbody","flatMap","partition","map","key","td","MiddleTruncate","text","partitionsDefName","TickLogDialog","TICK_LOG_EVENTS_QUERY","Number","notifyOnNetworkStatusChange","events","logEvents","DialogBody","TickLogsTable","tickStatus","instigationType","instigationLoggingDocsUrl","action","ExternalAnchorButton","href","rightIcon","ColumnWidthsProvider","onWidthsChanged","position","Headers","event","idx","TickLogRow","widths","useContext","ColumnWidthsContext","HeadersContainer","Header","eventType","onResize","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_13__","_","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_14__","HeaderContainer","handleSide","Row","level","highlighted","EventTypeColumn","span","marginLeft","TimestampColumn","time"],"sourceRoot":""}