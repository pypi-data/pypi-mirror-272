from _typeshed import Incomplete

logger: Incomplete

class UnicornFy:
    VERSION: str
    last_update_check_github: Incomplete
    def __init__(self, debug: bool = False) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, error_traceback: types.TracebackType | None) -> None: ...
    @staticmethod
    def binance_org_websocket(stream_data_json): ...
    @staticmethod
    def binance_com_websocket(stream_data_json): ...
    @staticmethod
    def binance_com_margin_websocket(stream_data_json): ...
    @staticmethod
    def binance_com_isolated_margin_websocket(stream_data_json): ...
    @staticmethod
    def binance_com_futures_websocket(stream_data_json): ...
    @staticmethod
    def binance_com_coin_futures_websocket(stream_data_json): ...
    @staticmethod
    def binance_je_websocket(stream_data_json): ...
    @staticmethod
    def binance_us_websocket(stream_data_json): ...
    @staticmethod
    def trbinance_com_websocket(stream_data_json): ...
    @staticmethod
    def binance_websocket(stream_data_json, exchange: str = 'binance', show_deprecated_warning: bool = True): ...
    @staticmethod
    def binance_futures_websocket(stream_data_json, exchange: str = 'binance.com-futures', show_deprecated_warning: bool = False): ...
    @staticmethod
    def jex_com_websocket(stream_data_json): ...
    @staticmethod
    def get_latest_release_info(): ...
    def get_latest_version(self): ...
    @staticmethod
    def get_version(): ...
    @staticmethod
    def is_json(data): ...
    def is_update_available(self): ...
    @staticmethod
    def set_to_false_if_not_exist(value, key): ...
