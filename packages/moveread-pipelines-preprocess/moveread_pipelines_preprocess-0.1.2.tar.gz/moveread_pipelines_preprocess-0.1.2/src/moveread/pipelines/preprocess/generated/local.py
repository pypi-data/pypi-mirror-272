"""
Code generated by `q.pipelines`
- Timestamp: 2024-05-04 16:49:42.795053
- Input file: "preprocess/src/moveread/pipelines/preprocess/spec.py"
- Input spec: Tasks({
  'input_task': 'extract',
  'Input': moveread.pipelines.preprocess.types.Input,  # class
  'Output': moveread.pipelines.preprocess.types.Result,  # class
  'tasks': {
    'extract': Task(Input -> validate | correct),
    'validate': Task(Extracted -> preoutput | correct | select),
    'correct': Task(Input -> extract | reextract),
    'reextract': Task(Corrected -> revalidate | select),
    'revalidate': Task(Extracted -> preoutput | select),
    'select': Task(Corrected -> preoutput | correct),
    'preoutput': Task(RootOutput -> output)
  }
})
"""
from typing_extensions import Literal, Any, Unpack
from dslog import Logger
from q.api import ReadQueue, WriteQueue
from q.kv import QueueKV
import q.pipelines as qp
AnyT: type = Any # type: ignore
from ..spec import Input, Result, TASKS
from .types import Queues, Pipelines

def input_queue(
  input_path: str, *, protocol: Literal['sqlite', 'fs'] = 'sqlite'
) -> QueueKV[Input]:
  return QueueKV.at(Input, input_path, protocol=protocol)

def output_queue(
  output_path: str, *, protocol: Literal['sqlite', 'fs'] = 'sqlite'
) -> QueueKV[Result]:
  return QueueKV.at(Result, output_path, protocol=protocol)

def queues(
  path: str, *,
  protocol: Literal['sqlite', 'fs'] = 'sqlite',
) -> Queues:
  return qp.local.local_queues(path, TASKS, protocol=protocol) # type: ignore

async def connect(
  Qin: ReadQueue[Input],
  Qout: WriteQueue[Result],
  queues: Queues, *,
  logger = Logger.rich().prefix('[CONNECT]')
):
  await qp.connect(Qin, Qout, queues, input_task='extract', logger=logger) # type: ignore

def run_pipelines(queues: Queues, **pipelines: Unpack[Pipelines]):
  qp.run_pipelines(queues, **pipelines) # type: ignore

def run(
  Qin: ReadQueue[Input],
  Qout: WriteQueue[Result],
  queues: Queues,
  connect_logger = Logger.rich().prefix('[CONNECT]'),
  **pipelines: Unpack[Pipelines]
):
  qp.run(Qin, Qout, queues, input_task='extract', connect_logger=connect_logger, **pipelines) # type: ignore

__all__ = ['input_queue', 'output_queue', 'queues', 'connect', 'run_pipelines', 'run']
