# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ...core.datetime_utils import serialize_datetime


class CreateAnalysisTemplate(pydantic.BaseModel):
    """
    Examples
    --------
    from sphinxbio import CreateAnalysisTemplate

    CreateAnalysisTemplate(
        name="qPCR Assay Template",
        analysis_id="nb_12345",
    )
    """

    name: str
    analysis_id: str = pydantic.Field(alias="analysisId")
    """
    The ID of the analysis to use as a template.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
