# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ...core.datetime_utils import serialize_datetime


class CreateDataset(pydantic.BaseModel):
    """
    Examples
    --------
    from sphinxbio import CreateDataset

    CreateDataset(
        campaign_id="camp_67890",
        description="Dataset containing gene expression levels.",
        eln_link="https://eln.example.com",
        name="qPCR Results",
        staged_upload_path="unique-prefix/results.csv",
        tags=["exp001", "Gene Expression", "ML Ready"],
    )
    """

    campaign_id: str = pydantic.Field(alias="campaignId")
    description: typing.Optional[str] = None
    eln_link: typing.Optional[str] = pydantic.Field(alias="elnLink", default=None)
    name: str
    staged_upload_path: str = pydantic.Field(alias="stagedUploadPath")
    tags: typing.Optional[typing.List[str]] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
