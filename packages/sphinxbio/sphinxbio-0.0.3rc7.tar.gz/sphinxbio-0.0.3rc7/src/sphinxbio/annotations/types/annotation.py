# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ...core.datetime_utils import serialize_datetime


class Annotation(pydantic.BaseModel):
    """
    Examples
    --------
    import datetime

    from sphinxbio import Annotation

    Annotation(
        campaign_id="camp_12345",
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        dataset_id="ds_9d538f5",
        entity_id="rna_1a441e4",
        id="hit_asd3b18",
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    campaign_id: str = pydantic.Field(alias="campaignId")
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    dataset_id: str = pydantic.Field(alias="datasetId")
    entity_id: str = pydantic.Field(alias="entityId")
    id: str
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
