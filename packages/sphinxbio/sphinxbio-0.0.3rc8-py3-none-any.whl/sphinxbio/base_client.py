# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .analyses.client import AnalysesClient, AsyncAnalysesClient
from .analysis_templates.client import AnalysisTemplatesClient, AsyncAnalysisTemplatesClient
from .annotations.client import AnnotationsClient, AsyncAnnotationsClient
from .campaigns.client import AsyncCampaignsClient, CampaignsClient
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .dataset_schemas.client import AsyncDatasetSchemasClient, DatasetSchemasClient
from .datasets.client import AsyncDatasetsClient, DatasetsClient
from .entities.client import AsyncEntitiesClient, EntitiesClient
from .entity_schemas.client import AsyncEntitySchemasClient, EntitySchemasClient
from .environment import SphinxbioEnvironment
from .external_tasks.client import AsyncExternalTasksClient, ExternalTasksClient
from .files.client import AsyncFilesClient, FilesClient
from .plots.client import AsyncPlotsClient, PlotsClient
from .storage.client import AsyncStorageClient, StorageClient


class BaseSphinxBio:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : SphinxbioEnvironment
        The environment to use for requests from the client. from .environment import SphinxbioEnvironment



        Defaults to SphinxbioEnvironment.PRODUCTION



    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests by default the timeout is 60 seconds, unless a custom httpx client is used, in which case a default is not set.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from sphinxbio.client import Sphinxbio

    client = Sphinxbio(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SphinxbioEnvironment = SphinxbioEnvironment.PRODUCTION,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.analyses = AnalysesClient(client_wrapper=self._client_wrapper)
        self.analysis_templates = AnalysisTemplatesClient(client_wrapper=self._client_wrapper)
        self.annotations = AnnotationsClient(client_wrapper=self._client_wrapper)
        self.campaigns = CampaignsClient(client_wrapper=self._client_wrapper)
        self.dataset_schemas = DatasetSchemasClient(client_wrapper=self._client_wrapper)
        self.datasets = DatasetsClient(client_wrapper=self._client_wrapper)
        self.entities = EntitiesClient(client_wrapper=self._client_wrapper)
        self.entity_schemas = EntitySchemasClient(client_wrapper=self._client_wrapper)
        self.external_tasks = ExternalTasksClient(client_wrapper=self._client_wrapper)
        self.files = FilesClient(client_wrapper=self._client_wrapper)
        self.plots = PlotsClient(client_wrapper=self._client_wrapper)
        self.storage = StorageClient(client_wrapper=self._client_wrapper)


class AsyncBaseSphinxBio:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : SphinxbioEnvironment
        The environment to use for requests from the client. from .environment import SphinxbioEnvironment



        Defaults to SphinxbioEnvironment.PRODUCTION



    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests by default the timeout is 60 seconds, unless a custom httpx client is used, in which case a default is not set.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from sphinxbio.client import AsyncSphinxbio

    client = AsyncSphinxbio(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SphinxbioEnvironment = SphinxbioEnvironment.PRODUCTION,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.analyses = AsyncAnalysesClient(client_wrapper=self._client_wrapper)
        self.analysis_templates = AsyncAnalysisTemplatesClient(client_wrapper=self._client_wrapper)
        self.annotations = AsyncAnnotationsClient(client_wrapper=self._client_wrapper)
        self.campaigns = AsyncCampaignsClient(client_wrapper=self._client_wrapper)
        self.dataset_schemas = AsyncDatasetSchemasClient(client_wrapper=self._client_wrapper)
        self.datasets = AsyncDatasetsClient(client_wrapper=self._client_wrapper)
        self.entities = AsyncEntitiesClient(client_wrapper=self._client_wrapper)
        self.entity_schemas = AsyncEntitySchemasClient(client_wrapper=self._client_wrapper)
        self.external_tasks = AsyncExternalTasksClient(client_wrapper=self._client_wrapper)
        self.files = AsyncFilesClient(client_wrapper=self._client_wrapper)
        self.plots = AsyncPlotsClient(client_wrapper=self._client_wrapper)
        self.storage = AsyncStorageClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: SphinxbioEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
