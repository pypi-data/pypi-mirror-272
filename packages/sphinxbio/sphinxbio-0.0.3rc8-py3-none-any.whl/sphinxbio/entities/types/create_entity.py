# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ...core.datetime_utils import serialize_datetime


class CreateEntity(pydantic.BaseModel):
    """
    Examples
    --------
    from sphinxbio import CreateEntity

    CreateEntity(
        campaign_id="camp_67890",
        data={"gene": "BRCA1", "expressionLevel": "High"},
        external_id="ext_12345",
        is_control=False,
        name="BRCA1 High Expression",
        schema_name="Plasmid",
    )
    """

    campaign_id: typing.Optional[str] = pydantic.Field(alias="campaignId", default=None)
    data: typing.Optional[typing.Dict[str, typing.Any]] = None
    external_id: str = pydantic.Field(alias="externalId")
    is_control: typing.Optional[bool] = pydantic.Field(alias="isControl", default=None)
    name: str
    schema_name: typing.Optional[str] = pydantic.Field(alias="schemaName", default=None)

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
