# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ...core.datetime_utils import serialize_datetime
from ...shared.creator.types.creator import Creator


class Plot(pydantic.BaseModel):
    """
    Examples
    --------
    import datetime

    from sphinxbio import Plot
    from sphinxbio.shared import Creator

    Plot(
        created_at=datetime.datetime.fromisoformat(
            "2023-01-01 12:00:00+00:00",
        ),
        creator=Creator(
            id="user_67890",
            email="researcher@example.com",
        ),
        id="plot_12345",
        notebook_id="nb_12345",
        title="Gene Expression Over Time",
        updated_at=datetime.datetime.fromisoformat(
            "2023-01-02 12:00:00+00:00",
        ),
    )
    """

    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    creator: Creator
    id: str
    notebook_id: str = pydantic.Field(alias="notebookId")
    title: typing.Optional[str] = None
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
