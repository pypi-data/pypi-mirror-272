# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ....core.datetime_utils import serialize_datetime
from ...creator.types.creator import Creator


class EntityBase(pydantic.BaseModel):
    campaign_id: str = pydantic.Field(alias="campaignId")
    creator: Creator
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    data: typing.Optional[typing.Dict[str, typing.Any]] = None
    external_id: typing.Optional[str] = pydantic.Field(alias="externalId", default=None)
    id: str
    is_control: bool = pydantic.Field(alias="isControl")
    name: str
    model: typing.Optional[str] = None
    parent_id: typing.Optional[str] = pydantic.Field(alias="parentId", default=None)
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
