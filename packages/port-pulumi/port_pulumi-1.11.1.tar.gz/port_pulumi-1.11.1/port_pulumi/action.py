# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ActionArgs', 'Action']

@pulumi.input_type
class ActionArgs:
    def __init__(__self__, *,
                 blueprint: pulumi.Input[str],
                 identifier: pulumi.Input[str],
                 title: pulumi.Input[str],
                 trigger: pulumi.Input[str],
                 approval_email_notification: Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']] = None,
                 approval_webhook_notification: Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']] = None,
                 azure_method: Optional[pulumi.Input['ActionAzureMethodArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_method: Optional[pulumi.Input['ActionGithubMethodArgs']] = None,
                 gitlab_method: Optional[pulumi.Input['ActionGitlabMethodArgs']] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 kafka_method: Optional[pulumi.Input['ActionKafkaMethodArgs']] = None,
                 order_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 required_approval: Optional[pulumi.Input[bool]] = None,
                 required_jq_query: Optional[pulumi.Input[str]] = None,
                 user_properties: Optional[pulumi.Input['ActionUserPropertiesArgs']] = None,
                 webhook_method: Optional[pulumi.Input['ActionWebhookMethodArgs']] = None):
        """
        The set of arguments for constructing a Action resource.
        :param pulumi.Input[str] blueprint: The blueprint identifier the action relates to
        :param pulumi.Input[str] identifier: Identifier
        :param pulumi.Input[str] title: Title
        :param pulumi.Input[str] trigger: The trigger type of the action
        :param pulumi.Input['ActionApprovalEmailNotificationArgs'] approval_email_notification: The email notification of the approval
        :param pulumi.Input['ActionApprovalWebhookNotificationArgs'] approval_webhook_notification: The webhook notification of the approval
        :param pulumi.Input['ActionAzureMethodArgs'] azure_method: The invocation method of the action
        :param pulumi.Input[str] description: Description
        :param pulumi.Input['ActionGithubMethodArgs'] github_method: The invocation method of the action
        :param pulumi.Input['ActionGitlabMethodArgs'] gitlab_method: The invocation method of the action
        :param pulumi.Input[str] icon: Icon
        :param pulumi.Input['ActionKafkaMethodArgs'] kafka_method: The invocation method of the action
        :param pulumi.Input[Sequence[pulumi.Input[str]]] order_properties: Order properties
        :param pulumi.Input[bool] required_approval: Require approval before invoking the action
        :param pulumi.Input[str] required_jq_query: The required jq query of the property
        :param pulumi.Input['ActionUserPropertiesArgs'] user_properties: User properties
        :param pulumi.Input['ActionWebhookMethodArgs'] webhook_method: The invocation method of the action
        """
        pulumi.set(__self__, "blueprint", blueprint)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "trigger", trigger)
        if approval_email_notification is not None:
            pulumi.set(__self__, "approval_email_notification", approval_email_notification)
        if approval_webhook_notification is not None:
            pulumi.set(__self__, "approval_webhook_notification", approval_webhook_notification)
        if azure_method is not None:
            pulumi.set(__self__, "azure_method", azure_method)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if github_method is not None:
            pulumi.set(__self__, "github_method", github_method)
        if gitlab_method is not None:
            pulumi.set(__self__, "gitlab_method", gitlab_method)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if kafka_method is not None:
            pulumi.set(__self__, "kafka_method", kafka_method)
        if order_properties is not None:
            pulumi.set(__self__, "order_properties", order_properties)
        if required_approval is not None:
            pulumi.set(__self__, "required_approval", required_approval)
        if required_jq_query is not None:
            pulumi.set(__self__, "required_jq_query", required_jq_query)
        if user_properties is not None:
            pulumi.set(__self__, "user_properties", user_properties)
        if webhook_method is not None:
            pulumi.set(__self__, "webhook_method", webhook_method)

    @property
    @pulumi.getter
    def blueprint(self) -> pulumi.Input[str]:
        """
        The blueprint identifier the action relates to
        """
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        Identifier
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Input[str]:
        """
        The trigger type of the action
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: pulumi.Input[str]):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter(name="approvalEmailNotification")
    def approval_email_notification(self) -> Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']]:
        """
        The email notification of the approval
        """
        return pulumi.get(self, "approval_email_notification")

    @approval_email_notification.setter
    def approval_email_notification(self, value: Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']]):
        pulumi.set(self, "approval_email_notification", value)

    @property
    @pulumi.getter(name="approvalWebhookNotification")
    def approval_webhook_notification(self) -> Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']]:
        """
        The webhook notification of the approval
        """
        return pulumi.get(self, "approval_webhook_notification")

    @approval_webhook_notification.setter
    def approval_webhook_notification(self, value: Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']]):
        pulumi.set(self, "approval_webhook_notification", value)

    @property
    @pulumi.getter(name="azureMethod")
    def azure_method(self) -> Optional[pulumi.Input['ActionAzureMethodArgs']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "azure_method")

    @azure_method.setter
    def azure_method(self, value: Optional[pulumi.Input['ActionAzureMethodArgs']]):
        pulumi.set(self, "azure_method", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="githubMethod")
    def github_method(self) -> Optional[pulumi.Input['ActionGithubMethodArgs']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "github_method")

    @github_method.setter
    def github_method(self, value: Optional[pulumi.Input['ActionGithubMethodArgs']]):
        pulumi.set(self, "github_method", value)

    @property
    @pulumi.getter(name="gitlabMethod")
    def gitlab_method(self) -> Optional[pulumi.Input['ActionGitlabMethodArgs']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "gitlab_method")

    @gitlab_method.setter
    def gitlab_method(self, value: Optional[pulumi.Input['ActionGitlabMethodArgs']]):
        pulumi.set(self, "gitlab_method", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        Icon
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="kafkaMethod")
    def kafka_method(self) -> Optional[pulumi.Input['ActionKafkaMethodArgs']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "kafka_method")

    @kafka_method.setter
    def kafka_method(self, value: Optional[pulumi.Input['ActionKafkaMethodArgs']]):
        pulumi.set(self, "kafka_method", value)

    @property
    @pulumi.getter(name="orderProperties")
    def order_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Order properties
        """
        return pulumi.get(self, "order_properties")

    @order_properties.setter
    def order_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "order_properties", value)

    @property
    @pulumi.getter(name="requiredApproval")
    def required_approval(self) -> Optional[pulumi.Input[bool]]:
        """
        Require approval before invoking the action
        """
        return pulumi.get(self, "required_approval")

    @required_approval.setter
    def required_approval(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required_approval", value)

    @property
    @pulumi.getter(name="requiredJqQuery")
    def required_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The required jq query of the property
        """
        return pulumi.get(self, "required_jq_query")

    @required_jq_query.setter
    def required_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required_jq_query", value)

    @property
    @pulumi.getter(name="userProperties")
    def user_properties(self) -> Optional[pulumi.Input['ActionUserPropertiesArgs']]:
        """
        User properties
        """
        return pulumi.get(self, "user_properties")

    @user_properties.setter
    def user_properties(self, value: Optional[pulumi.Input['ActionUserPropertiesArgs']]):
        pulumi.set(self, "user_properties", value)

    @property
    @pulumi.getter(name="webhookMethod")
    def webhook_method(self) -> Optional[pulumi.Input['ActionWebhookMethodArgs']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "webhook_method")

    @webhook_method.setter
    def webhook_method(self, value: Optional[pulumi.Input['ActionWebhookMethodArgs']]):
        pulumi.set(self, "webhook_method", value)


@pulumi.input_type
class _ActionState:
    def __init__(__self__, *,
                 approval_email_notification: Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']] = None,
                 approval_webhook_notification: Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']] = None,
                 azure_method: Optional[pulumi.Input['ActionAzureMethodArgs']] = None,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_method: Optional[pulumi.Input['ActionGithubMethodArgs']] = None,
                 gitlab_method: Optional[pulumi.Input['ActionGitlabMethodArgs']] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 kafka_method: Optional[pulumi.Input['ActionKafkaMethodArgs']] = None,
                 order_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 required_approval: Optional[pulumi.Input[bool]] = None,
                 required_jq_query: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 trigger: Optional[pulumi.Input[str]] = None,
                 user_properties: Optional[pulumi.Input['ActionUserPropertiesArgs']] = None,
                 webhook_method: Optional[pulumi.Input['ActionWebhookMethodArgs']] = None):
        """
        Input properties used for looking up and filtering Action resources.
        :param pulumi.Input['ActionApprovalEmailNotificationArgs'] approval_email_notification: The email notification of the approval
        :param pulumi.Input['ActionApprovalWebhookNotificationArgs'] approval_webhook_notification: The webhook notification of the approval
        :param pulumi.Input['ActionAzureMethodArgs'] azure_method: The invocation method of the action
        :param pulumi.Input[str] blueprint: The blueprint identifier the action relates to
        :param pulumi.Input[str] description: Description
        :param pulumi.Input['ActionGithubMethodArgs'] github_method: The invocation method of the action
        :param pulumi.Input['ActionGitlabMethodArgs'] gitlab_method: The invocation method of the action
        :param pulumi.Input[str] icon: Icon
        :param pulumi.Input[str] identifier: Identifier
        :param pulumi.Input['ActionKafkaMethodArgs'] kafka_method: The invocation method of the action
        :param pulumi.Input[Sequence[pulumi.Input[str]]] order_properties: Order properties
        :param pulumi.Input[bool] required_approval: Require approval before invoking the action
        :param pulumi.Input[str] required_jq_query: The required jq query of the property
        :param pulumi.Input[str] title: Title
        :param pulumi.Input[str] trigger: The trigger type of the action
        :param pulumi.Input['ActionUserPropertiesArgs'] user_properties: User properties
        :param pulumi.Input['ActionWebhookMethodArgs'] webhook_method: The invocation method of the action
        """
        if approval_email_notification is not None:
            pulumi.set(__self__, "approval_email_notification", approval_email_notification)
        if approval_webhook_notification is not None:
            pulumi.set(__self__, "approval_webhook_notification", approval_webhook_notification)
        if azure_method is not None:
            pulumi.set(__self__, "azure_method", azure_method)
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if github_method is not None:
            pulumi.set(__self__, "github_method", github_method)
        if gitlab_method is not None:
            pulumi.set(__self__, "gitlab_method", gitlab_method)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if kafka_method is not None:
            pulumi.set(__self__, "kafka_method", kafka_method)
        if order_properties is not None:
            pulumi.set(__self__, "order_properties", order_properties)
        if required_approval is not None:
            pulumi.set(__self__, "required_approval", required_approval)
        if required_jq_query is not None:
            pulumi.set(__self__, "required_jq_query", required_jq_query)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)
        if user_properties is not None:
            pulumi.set(__self__, "user_properties", user_properties)
        if webhook_method is not None:
            pulumi.set(__self__, "webhook_method", webhook_method)

    @property
    @pulumi.getter(name="approvalEmailNotification")
    def approval_email_notification(self) -> Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']]:
        """
        The email notification of the approval
        """
        return pulumi.get(self, "approval_email_notification")

    @approval_email_notification.setter
    def approval_email_notification(self, value: Optional[pulumi.Input['ActionApprovalEmailNotificationArgs']]):
        pulumi.set(self, "approval_email_notification", value)

    @property
    @pulumi.getter(name="approvalWebhookNotification")
    def approval_webhook_notification(self) -> Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']]:
        """
        The webhook notification of the approval
        """
        return pulumi.get(self, "approval_webhook_notification")

    @approval_webhook_notification.setter
    def approval_webhook_notification(self, value: Optional[pulumi.Input['ActionApprovalWebhookNotificationArgs']]):
        pulumi.set(self, "approval_webhook_notification", value)

    @property
    @pulumi.getter(name="azureMethod")
    def azure_method(self) -> Optional[pulumi.Input['ActionAzureMethodArgs']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "azure_method")

    @azure_method.setter
    def azure_method(self, value: Optional[pulumi.Input['ActionAzureMethodArgs']]):
        pulumi.set(self, "azure_method", value)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        """
        The blueprint identifier the action relates to
        """
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="githubMethod")
    def github_method(self) -> Optional[pulumi.Input['ActionGithubMethodArgs']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "github_method")

    @github_method.setter
    def github_method(self, value: Optional[pulumi.Input['ActionGithubMethodArgs']]):
        pulumi.set(self, "github_method", value)

    @property
    @pulumi.getter(name="gitlabMethod")
    def gitlab_method(self) -> Optional[pulumi.Input['ActionGitlabMethodArgs']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "gitlab_method")

    @gitlab_method.setter
    def gitlab_method(self, value: Optional[pulumi.Input['ActionGitlabMethodArgs']]):
        pulumi.set(self, "gitlab_method", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        Icon
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="kafkaMethod")
    def kafka_method(self) -> Optional[pulumi.Input['ActionKafkaMethodArgs']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "kafka_method")

    @kafka_method.setter
    def kafka_method(self, value: Optional[pulumi.Input['ActionKafkaMethodArgs']]):
        pulumi.set(self, "kafka_method", value)

    @property
    @pulumi.getter(name="orderProperties")
    def order_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Order properties
        """
        return pulumi.get(self, "order_properties")

    @order_properties.setter
    def order_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "order_properties", value)

    @property
    @pulumi.getter(name="requiredApproval")
    def required_approval(self) -> Optional[pulumi.Input[bool]]:
        """
        Require approval before invoking the action
        """
        return pulumi.get(self, "required_approval")

    @required_approval.setter
    def required_approval(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required_approval", value)

    @property
    @pulumi.getter(name="requiredJqQuery")
    def required_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The required jq query of the property
        """
        return pulumi.get(self, "required_jq_query")

    @required_jq_query.setter
    def required_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required_jq_query", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input[str]]:
        """
        The trigger type of the action
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter(name="userProperties")
    def user_properties(self) -> Optional[pulumi.Input['ActionUserPropertiesArgs']]:
        """
        User properties
        """
        return pulumi.get(self, "user_properties")

    @user_properties.setter
    def user_properties(self, value: Optional[pulumi.Input['ActionUserPropertiesArgs']]):
        pulumi.set(self, "user_properties", value)

    @property
    @pulumi.getter(name="webhookMethod")
    def webhook_method(self) -> Optional[pulumi.Input['ActionWebhookMethodArgs']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "webhook_method")

    @webhook_method.setter
    def webhook_method(self, value: Optional[pulumi.Input['ActionWebhookMethodArgs']]):
        pulumi.set(self, "webhook_method", value)


class Action(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval_email_notification: Optional[pulumi.Input[pulumi.InputType['ActionApprovalEmailNotificationArgs']]] = None,
                 approval_webhook_notification: Optional[pulumi.Input[pulumi.InputType['ActionApprovalWebhookNotificationArgs']]] = None,
                 azure_method: Optional[pulumi.Input[pulumi.InputType['ActionAzureMethodArgs']]] = None,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_method: Optional[pulumi.Input[pulumi.InputType['ActionGithubMethodArgs']]] = None,
                 gitlab_method: Optional[pulumi.Input[pulumi.InputType['ActionGitlabMethodArgs']]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 kafka_method: Optional[pulumi.Input[pulumi.InputType['ActionKafkaMethodArgs']]] = None,
                 order_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 required_approval: Optional[pulumi.Input[bool]] = None,
                 required_jq_query: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 trigger: Optional[pulumi.Input[str]] = None,
                 user_properties: Optional[pulumi.Input[pulumi.InputType['ActionUserPropertiesArgs']]] = None,
                 webhook_method: Optional[pulumi.Input[pulumi.InputType['ActionWebhookMethodArgs']]] = None,
                 __props__=None):
        """
        Create a Action resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ActionApprovalEmailNotificationArgs']] approval_email_notification: The email notification of the approval
        :param pulumi.Input[pulumi.InputType['ActionApprovalWebhookNotificationArgs']] approval_webhook_notification: The webhook notification of the approval
        :param pulumi.Input[pulumi.InputType['ActionAzureMethodArgs']] azure_method: The invocation method of the action
        :param pulumi.Input[str] blueprint: The blueprint identifier the action relates to
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[pulumi.InputType['ActionGithubMethodArgs']] github_method: The invocation method of the action
        :param pulumi.Input[pulumi.InputType['ActionGitlabMethodArgs']] gitlab_method: The invocation method of the action
        :param pulumi.Input[str] icon: Icon
        :param pulumi.Input[str] identifier: Identifier
        :param pulumi.Input[pulumi.InputType['ActionKafkaMethodArgs']] kafka_method: The invocation method of the action
        :param pulumi.Input[Sequence[pulumi.Input[str]]] order_properties: Order properties
        :param pulumi.Input[bool] required_approval: Require approval before invoking the action
        :param pulumi.Input[str] required_jq_query: The required jq query of the property
        :param pulumi.Input[str] title: Title
        :param pulumi.Input[str] trigger: The trigger type of the action
        :param pulumi.Input[pulumi.InputType['ActionUserPropertiesArgs']] user_properties: User properties
        :param pulumi.Input[pulumi.InputType['ActionWebhookMethodArgs']] webhook_method: The invocation method of the action
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Action resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval_email_notification: Optional[pulumi.Input[pulumi.InputType['ActionApprovalEmailNotificationArgs']]] = None,
                 approval_webhook_notification: Optional[pulumi.Input[pulumi.InputType['ActionApprovalWebhookNotificationArgs']]] = None,
                 azure_method: Optional[pulumi.Input[pulumi.InputType['ActionAzureMethodArgs']]] = None,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 github_method: Optional[pulumi.Input[pulumi.InputType['ActionGithubMethodArgs']]] = None,
                 gitlab_method: Optional[pulumi.Input[pulumi.InputType['ActionGitlabMethodArgs']]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 kafka_method: Optional[pulumi.Input[pulumi.InputType['ActionKafkaMethodArgs']]] = None,
                 order_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 required_approval: Optional[pulumi.Input[bool]] = None,
                 required_jq_query: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 trigger: Optional[pulumi.Input[str]] = None,
                 user_properties: Optional[pulumi.Input[pulumi.InputType['ActionUserPropertiesArgs']]] = None,
                 webhook_method: Optional[pulumi.Input[pulumi.InputType['ActionWebhookMethodArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ActionArgs.__new__(ActionArgs)

            __props__.__dict__["approval_email_notification"] = approval_email_notification
            __props__.__dict__["approval_webhook_notification"] = approval_webhook_notification
            __props__.__dict__["azure_method"] = azure_method
            if blueprint is None and not opts.urn:
                raise TypeError("Missing required property 'blueprint'")
            __props__.__dict__["blueprint"] = blueprint
            __props__.__dict__["description"] = description
            __props__.__dict__["github_method"] = github_method
            __props__.__dict__["gitlab_method"] = gitlab_method
            __props__.__dict__["icon"] = icon
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["kafka_method"] = kafka_method
            __props__.__dict__["order_properties"] = order_properties
            __props__.__dict__["required_approval"] = required_approval
            __props__.__dict__["required_jq_query"] = required_jq_query
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            if trigger is None and not opts.urn:
                raise TypeError("Missing required property 'trigger'")
            __props__.__dict__["trigger"] = trigger
            __props__.__dict__["user_properties"] = user_properties
            __props__.__dict__["webhook_method"] = webhook_method
        super(Action, __self__).__init__(
            'port:index/action:Action',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            approval_email_notification: Optional[pulumi.Input[pulumi.InputType['ActionApprovalEmailNotificationArgs']]] = None,
            approval_webhook_notification: Optional[pulumi.Input[pulumi.InputType['ActionApprovalWebhookNotificationArgs']]] = None,
            azure_method: Optional[pulumi.Input[pulumi.InputType['ActionAzureMethodArgs']]] = None,
            blueprint: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            github_method: Optional[pulumi.Input[pulumi.InputType['ActionGithubMethodArgs']]] = None,
            gitlab_method: Optional[pulumi.Input[pulumi.InputType['ActionGitlabMethodArgs']]] = None,
            icon: Optional[pulumi.Input[str]] = None,
            identifier: Optional[pulumi.Input[str]] = None,
            kafka_method: Optional[pulumi.Input[pulumi.InputType['ActionKafkaMethodArgs']]] = None,
            order_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            required_approval: Optional[pulumi.Input[bool]] = None,
            required_jq_query: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            trigger: Optional[pulumi.Input[str]] = None,
            user_properties: Optional[pulumi.Input[pulumi.InputType['ActionUserPropertiesArgs']]] = None,
            webhook_method: Optional[pulumi.Input[pulumi.InputType['ActionWebhookMethodArgs']]] = None) -> 'Action':
        """
        Get an existing Action resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ActionApprovalEmailNotificationArgs']] approval_email_notification: The email notification of the approval
        :param pulumi.Input[pulumi.InputType['ActionApprovalWebhookNotificationArgs']] approval_webhook_notification: The webhook notification of the approval
        :param pulumi.Input[pulumi.InputType['ActionAzureMethodArgs']] azure_method: The invocation method of the action
        :param pulumi.Input[str] blueprint: The blueprint identifier the action relates to
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[pulumi.InputType['ActionGithubMethodArgs']] github_method: The invocation method of the action
        :param pulumi.Input[pulumi.InputType['ActionGitlabMethodArgs']] gitlab_method: The invocation method of the action
        :param pulumi.Input[str] icon: Icon
        :param pulumi.Input[str] identifier: Identifier
        :param pulumi.Input[pulumi.InputType['ActionKafkaMethodArgs']] kafka_method: The invocation method of the action
        :param pulumi.Input[Sequence[pulumi.Input[str]]] order_properties: Order properties
        :param pulumi.Input[bool] required_approval: Require approval before invoking the action
        :param pulumi.Input[str] required_jq_query: The required jq query of the property
        :param pulumi.Input[str] title: Title
        :param pulumi.Input[str] trigger: The trigger type of the action
        :param pulumi.Input[pulumi.InputType['ActionUserPropertiesArgs']] user_properties: User properties
        :param pulumi.Input[pulumi.InputType['ActionWebhookMethodArgs']] webhook_method: The invocation method of the action
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ActionState.__new__(_ActionState)

        __props__.__dict__["approval_email_notification"] = approval_email_notification
        __props__.__dict__["approval_webhook_notification"] = approval_webhook_notification
        __props__.__dict__["azure_method"] = azure_method
        __props__.__dict__["blueprint"] = blueprint
        __props__.__dict__["description"] = description
        __props__.__dict__["github_method"] = github_method
        __props__.__dict__["gitlab_method"] = gitlab_method
        __props__.__dict__["icon"] = icon
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["kafka_method"] = kafka_method
        __props__.__dict__["order_properties"] = order_properties
        __props__.__dict__["required_approval"] = required_approval
        __props__.__dict__["required_jq_query"] = required_jq_query
        __props__.__dict__["title"] = title
        __props__.__dict__["trigger"] = trigger
        __props__.__dict__["user_properties"] = user_properties
        __props__.__dict__["webhook_method"] = webhook_method
        return Action(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="approvalEmailNotification")
    def approval_email_notification(self) -> pulumi.Output[Optional['outputs.ActionApprovalEmailNotification']]:
        """
        The email notification of the approval
        """
        return pulumi.get(self, "approval_email_notification")

    @property
    @pulumi.getter(name="approvalWebhookNotification")
    def approval_webhook_notification(self) -> pulumi.Output[Optional['outputs.ActionApprovalWebhookNotification']]:
        """
        The webhook notification of the approval
        """
        return pulumi.get(self, "approval_webhook_notification")

    @property
    @pulumi.getter(name="azureMethod")
    def azure_method(self) -> pulumi.Output[Optional['outputs.ActionAzureMethod']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "azure_method")

    @property
    @pulumi.getter
    def blueprint(self) -> pulumi.Output[str]:
        """
        The blueprint identifier the action relates to
        """
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="githubMethod")
    def github_method(self) -> pulumi.Output[Optional['outputs.ActionGithubMethod']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "github_method")

    @property
    @pulumi.getter(name="gitlabMethod")
    def gitlab_method(self) -> pulumi.Output[Optional['outputs.ActionGitlabMethod']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "gitlab_method")

    @property
    @pulumi.getter
    def icon(self) -> pulumi.Output[Optional[str]]:
        """
        Icon
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[str]:
        """
        Identifier
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="kafkaMethod")
    def kafka_method(self) -> pulumi.Output[Optional['outputs.ActionKafkaMethod']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "kafka_method")

    @property
    @pulumi.getter(name="orderProperties")
    def order_properties(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Order properties
        """
        return pulumi.get(self, "order_properties")

    @property
    @pulumi.getter(name="requiredApproval")
    def required_approval(self) -> pulumi.Output[Optional[bool]]:
        """
        Require approval before invoking the action
        """
        return pulumi.get(self, "required_approval")

    @property
    @pulumi.getter(name="requiredJqQuery")
    def required_jq_query(self) -> pulumi.Output[Optional[str]]:
        """
        The required jq query of the property
        """
        return pulumi.get(self, "required_jq_query")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        Title
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Output[str]:
        """
        The trigger type of the action
        """
        return pulumi.get(self, "trigger")

    @property
    @pulumi.getter(name="userProperties")
    def user_properties(self) -> pulumi.Output[Optional['outputs.ActionUserProperties']]:
        """
        User properties
        """
        return pulumi.get(self, "user_properties")

    @property
    @pulumi.getter(name="webhookMethod")
    def webhook_method(self) -> pulumi.Output[Optional['outputs.ActionWebhookMethod']]:
        """
        The invocation method of the action
        """
        return pulumi.get(self, "webhook_method")

