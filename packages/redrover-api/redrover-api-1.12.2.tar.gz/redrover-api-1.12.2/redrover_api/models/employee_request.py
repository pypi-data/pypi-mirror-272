# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from redrover_api.models.country_enum import CountryEnum
from redrover_api.models.int32_locator_request import Int32LocatorRequest
from redrover_api.models.position_request import PositionRequest
from redrover_api.models.state_enum import StateEnum
from redrover_api.models.substitute_preferences_request import SubstitutePreferencesRequest
from redrover_api.models.time_off_balance_request import TimeOffBalanceRequest

class EmployeeRequest(BaseModel):
    """
    EmployeeRequest  # noqa: E501
    """
    positions: Optional[conlist(PositionRequest)] = Field(None, description="The Positions of the employee")
    substitute_preferences: Optional[SubstitutePreferencesRequest] = Field(None, alias="substitutePreferences")
    replace_existing_substitute_preferences: Optional[StrictBool] = Field(None, alias="replaceExistingSubstitutePreferences", description="Whether the existing substitute preferences will be replaced. (Default is true)")
    time_off_balances: Optional[conlist(TimeOffBalanceRequest)] = Field(None, alias="timeOffBalances", description="The Employee's time off balances")
    replace_existing_time_off_balances: Optional[StrictBool] = Field(None, alias="replaceExistingTimeOffBalances", description="Whether the existing time off balances will be replaced. (Default is true)")
    comp_time_start_date: Optional[datetime] = Field(None, alias="compTimeStartDate", description="When comp time starts")
    comp_time_end_date: Optional[datetime] = Field(None, alias="compTimeEndDate", description="When comp time ends")
    id: Optional[StrictInt] = Field(None, description="The Red Rover internal Id of OrgUser (numeric)")
    secondary_identifier: Optional[StrictStr] = Field(None, alias="secondaryIdentifier", description="The secondary identifier for the User")
    external_id: Optional[StrictStr] = Field(None, alias="externalId", description="The external Id of OrgUser (alpha-numeric)")
    first_name: Optional[StrictStr] = Field(None, alias="firstName", description="The User's first name")
    middle_name: Optional[StrictStr] = Field(None, alias="middleName", description="The User's middle name")
    last_name: Optional[StrictStr] = Field(None, alias="lastName", description="The User's last name")
    email: Optional[StrictStr] = Field(None, description="The User's email (authentication)")
    notification_email: Optional[StrictStr] = Field(None, alias="notificationEmail", description="The User's email that will receive notifications. For SSO districts only. If empty, the Email field will be used. Field is optional")
    date_of_birth: Optional[datetime] = Field(None, alias="dateOfBirth", description="The User's date of birth")
    address1: Optional[StrictStr] = Field(None, description="The User's address")
    address2: Optional[StrictStr] = Field(None, description="The User's address (continued)")
    city: Optional[StrictStr] = Field(None, description="The User's city")
    postal_code: Optional[StrictStr] = Field(None, alias="postalCode", description="The User's postal code")
    badge_number: Optional[StrictStr] = Field(None, alias="badgeNumber", description="The User's badge number")
    state: Optional[StateEnum] = None
    country: Optional[CountryEnum] = None
    phone_number: Optional[StrictStr] = Field(None, alias="phoneNumber", description="The User's phone number")
    active: Optional[StrictBool] = Field(None, description="If the user is active. (Default is true for Create)")
    permission_set: Optional[Int32LocatorRequest] = Field(None, alias="permissionSet")
    remove_future_assignments_on_inactivate: Optional[StrictBool] = Field(None, alias="removeFutureAssignmentsOnInactivate", description="If all assignments are to be removed if the user is inactivated at any time")
    invite_immediately: Optional[StrictBool] = Field(None, alias="inviteImmediately", description="If the user is to receive an invitation email right away")
    __properties = ["positions", "substitutePreferences", "replaceExistingSubstitutePreferences", "timeOffBalances", "replaceExistingTimeOffBalances", "compTimeStartDate", "compTimeEndDate", "id", "secondaryIdentifier", "externalId", "firstName", "middleName", "lastName", "email", "notificationEmail", "dateOfBirth", "address1", "address2", "city", "postalCode", "badgeNumber", "state", "country", "phoneNumber", "active", "permissionSet", "removeFutureAssignmentsOnInactivate", "inviteImmediately"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EmployeeRequest:
        """Create an instance of EmployeeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in positions (list)
        _items = []
        if self.positions:
            for _item in self.positions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['positions'] = _items
        # override the default output from pydantic by calling `to_dict()` of substitute_preferences
        if self.substitute_preferences:
            _dict['substitutePreferences'] = self.substitute_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in time_off_balances (list)
        _items = []
        if self.time_off_balances:
            for _item in self.time_off_balances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['timeOffBalances'] = _items
        # override the default output from pydantic by calling `to_dict()` of permission_set
        if self.permission_set:
            _dict['permissionSet'] = self.permission_set.to_dict()
        # set to None if positions (nullable) is None
        # and __fields_set__ contains the field
        if self.positions is None and "positions" in self.__fields_set__:
            _dict['positions'] = None

        # set to None if time_off_balances (nullable) is None
        # and __fields_set__ contains the field
        if self.time_off_balances is None and "time_off_balances" in self.__fields_set__:
            _dict['timeOffBalances'] = None

        # set to None if comp_time_start_date (nullable) is None
        # and __fields_set__ contains the field
        if self.comp_time_start_date is None and "comp_time_start_date" in self.__fields_set__:
            _dict['compTimeStartDate'] = None

        # set to None if comp_time_end_date (nullable) is None
        # and __fields_set__ contains the field
        if self.comp_time_end_date is None and "comp_time_end_date" in self.__fields_set__:
            _dict['compTimeEndDate'] = None

        # set to None if secondary_identifier (nullable) is None
        # and __fields_set__ contains the field
        if self.secondary_identifier is None and "secondary_identifier" in self.__fields_set__:
            _dict['secondaryIdentifier'] = None

        # set to None if external_id (nullable) is None
        # and __fields_set__ contains the field
        if self.external_id is None and "external_id" in self.__fields_set__:
            _dict['externalId'] = None

        # set to None if first_name (nullable) is None
        # and __fields_set__ contains the field
        if self.first_name is None and "first_name" in self.__fields_set__:
            _dict['firstName'] = None

        # set to None if middle_name (nullable) is None
        # and __fields_set__ contains the field
        if self.middle_name is None and "middle_name" in self.__fields_set__:
            _dict['middleName'] = None

        # set to None if last_name (nullable) is None
        # and __fields_set__ contains the field
        if self.last_name is None and "last_name" in self.__fields_set__:
            _dict['lastName'] = None

        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict['email'] = None

        # set to None if notification_email (nullable) is None
        # and __fields_set__ contains the field
        if self.notification_email is None and "notification_email" in self.__fields_set__:
            _dict['notificationEmail'] = None

        # set to None if date_of_birth (nullable) is None
        # and __fields_set__ contains the field
        if self.date_of_birth is None and "date_of_birth" in self.__fields_set__:
            _dict['dateOfBirth'] = None

        # set to None if address1 (nullable) is None
        # and __fields_set__ contains the field
        if self.address1 is None and "address1" in self.__fields_set__:
            _dict['address1'] = None

        # set to None if address2 (nullable) is None
        # and __fields_set__ contains the field
        if self.address2 is None and "address2" in self.__fields_set__:
            _dict['address2'] = None

        # set to None if city (nullable) is None
        # and __fields_set__ contains the field
        if self.city is None and "city" in self.__fields_set__:
            _dict['city'] = None

        # set to None if postal_code (nullable) is None
        # and __fields_set__ contains the field
        if self.postal_code is None and "postal_code" in self.__fields_set__:
            _dict['postalCode'] = None

        # set to None if badge_number (nullable) is None
        # and __fields_set__ contains the field
        if self.badge_number is None and "badge_number" in self.__fields_set__:
            _dict['badgeNumber'] = None

        # set to None if phone_number (nullable) is None
        # and __fields_set__ contains the field
        if self.phone_number is None and "phone_number" in self.__fields_set__:
            _dict['phoneNumber'] = None

        # set to None if active (nullable) is None
        # and __fields_set__ contains the field
        if self.active is None and "active" in self.__fields_set__:
            _dict['active'] = None

        # set to None if remove_future_assignments_on_inactivate (nullable) is None
        # and __fields_set__ contains the field
        if self.remove_future_assignments_on_inactivate is None and "remove_future_assignments_on_inactivate" in self.__fields_set__:
            _dict['removeFutureAssignmentsOnInactivate'] = None

        # set to None if invite_immediately (nullable) is None
        # and __fields_set__ contains the field
        if self.invite_immediately is None and "invite_immediately" in self.__fields_set__:
            _dict['inviteImmediately'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EmployeeRequest:
        """Create an instance of EmployeeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EmployeeRequest.parse_obj(obj)

        _obj = EmployeeRequest.parse_obj({
            "positions": [PositionRequest.from_dict(_item) for _item in obj.get("positions")] if obj.get("positions") is not None else None,
            "substitute_preferences": SubstitutePreferencesRequest.from_dict(obj.get("substitutePreferences")) if obj.get("substitutePreferences") is not None else None,
            "replace_existing_substitute_preferences": obj.get("replaceExistingSubstitutePreferences"),
            "time_off_balances": [TimeOffBalanceRequest.from_dict(_item) for _item in obj.get("timeOffBalances")] if obj.get("timeOffBalances") is not None else None,
            "replace_existing_time_off_balances": obj.get("replaceExistingTimeOffBalances"),
            "comp_time_start_date": obj.get("compTimeStartDate"),
            "comp_time_end_date": obj.get("compTimeEndDate"),
            "id": obj.get("id"),
            "secondary_identifier": obj.get("secondaryIdentifier"),
            "external_id": obj.get("externalId"),
            "first_name": obj.get("firstName"),
            "middle_name": obj.get("middleName"),
            "last_name": obj.get("lastName"),
            "email": obj.get("email"),
            "notification_email": obj.get("notificationEmail"),
            "date_of_birth": obj.get("dateOfBirth"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "postal_code": obj.get("postalCode"),
            "badge_number": obj.get("badgeNumber"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "phone_number": obj.get("phoneNumber"),
            "active": obj.get("active"),
            "permission_set": Int32LocatorRequest.from_dict(obj.get("permissionSet")) if obj.get("permissionSet") is not None else None,
            "remove_future_assignments_on_inactivate": obj.get("removeFutureAssignmentsOnInactivate"),
            "invite_immediately": obj.get("inviteImmediately")
        })
        return _obj


