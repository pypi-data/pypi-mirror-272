{
  "openapi": "3.0.1",
  "info": {
    "title": "Red Rover API",
    "description": "Access Red Rover data via this REST API for Organizations that have granted you access.\r\n\r\n# Authentication\r\nThe API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.\r\n\r\nThis value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.\r\n\r\nEndpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.\r\n\r\n# API Information\r\n## Api Key\r\nEach Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.\r\n\r\nYou must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.\r\n\r\n## Identifier\r\nWhere an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.\r\n\r\n## Transaction Id\r\nEach request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.",
    "contact": {
      "name": "Developer",
      "email": "dev@redroverk12.com"
    },
    "version": "v1",
    "x-logo": {
      "url": "/documentation/redrover.png",
      "altText": "Red Rover",
      "backgroundColor": "#FFFFFF"
    }
  },
  "paths": {
    "/api/v1/{orgId}/Absence/{identifier}": {
      "get": {
        "tags": [
          "Absence"
        ],
        "summary": "Get Absence",
        "description": "Get a specific Absence by it's identifier.",
        "operationId": "GetAbsence",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the Absence. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets Absence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Absences not found or has been deleted"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "Absence"
        ],
        "summary": "Update existing Absence",
        "description": "Update details an already existing Absence.",
        "operationId": "UpdateAbsence",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the Absence. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Absence Payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Absence updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceResponse"
                }
              }
            }
          },
          "201": {
            "description": "Absence created if it previously did not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Absence already exists. Employee not included in request. Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found. Employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Absence"
        ],
        "summary": "Delete an Absence",
        "description": "Delete an existing Absence based on it's identifier",
        "operationId": "DeleteAbsence",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the Absence. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletes the Absence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found. Absences not found or has already been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/Absence": {
      "get": {
        "tags": [
          "Absence"
        ],
        "summary": "Get list of Absences",
        "description": "Get a list of Absences by their identifiers. Must use consistent Ids types (only Red Rover Ids, or ExternalIds).",
        "operationId": "GetAbsences",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "The identifier of the Absences. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets Absences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Absences not found or has been deleted"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Absence"
        ],
        "summary": "Create new Absence",
        "description": "Create an Absence for an Employee",
        "operationId": "CreateAbsence",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the Absence",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Absence created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Absence already exists. Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Absences not found or has been deleted. Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/{orgId}/AbsenceReason/{identifier}": {
      "get": {
        "tags": [
          "Absence Reason"
        ],
        "summary": "Get Absence Reason",
        "description": "Get a specific Absence Reason by it's identifier",
        "operationId": "GetAbsenceReason",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the AbsenceReason. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets Absence Reason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceReasonResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "AbsenceReason not found or has been deleted"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/AbsenceReason": {
      "get": {
        "tags": [
          "Absence Reason"
        ],
        "summary": "Get list of Absence Reasons",
        "description": "Get a list of AbsenceReasons by their identifiers. Must use consistent Ids types (only Red Rover Ids, or ExternalIds).",
        "operationId": "GetAbsenceReasons",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "The identifier of the AbsenceReasons. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets Absence Reasons",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceReasonResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "AbsenceReasons not found or has been deleted"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances/{id}": {
      "get": {
        "tags": [
          "Absence Reason Balance"
        ],
        "summary": "Get Absence Reason Balance",
        "description": "Gets a specific Absence Reason Balance by its Red Rover Id  (numeric)",
        "operationId": "GetAbsenceReasonBalance",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeIdentifier",
            "in": "path",
            "description": "The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the AbsenceReasonBalance",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets Absence Reason Balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceReasonBalanceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found. Absence Reason Balance not found. Employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "Absence Reason Balance"
        ],
        "summary": "Update Absence Reason Balance",
        "description": "Update an Absence Reason Balance for an Employee by its Red Rover Id (numeric)",
        "operationId": "UpdateAbsenceReasonBalance",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeIdentifier",
            "in": "path",
            "description": "The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the AbsenceReasonBalance",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceReasonBalanceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates Absence Reason Balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceReasonBalanceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found. Employee not found. Absence Reason Balance not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Absence Reason Balance"
        ],
        "summary": "Delete Absence Reason Balance",
        "description": "Delete an Absence Reason Balance for an Employee by its Red Rover Id (numeric)",
        "operationId": "DeleteAbsenceReasonBalance",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeIdentifier",
            "in": "path",
            "description": "The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the AbsenceReasonBalance",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletes Absence Reason Balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkObjectResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found. Employee not found. Absence Reason Balance not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances": {
      "get": {
        "tags": [
          "Absence Reason Balance"
        ],
        "summary": "Get Absence Reason Balances",
        "description": "Get Absence Reason Balance for an employee",
        "operationId": "GetAbsenceReasonBalances",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeIdentifier",
            "in": "path",
            "description": "The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schoolYearId",
            "in": "query",
            "description": "Filter by school year (optional)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets Absence Reason Balances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceReasonBalanceResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found. School Year not found. Employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Absence Reason Balance"
        ],
        "summary": "Create Absence Reason Balance",
        "description": "Create new Absence Reason Balance for an Employee",
        "operationId": "CreateAbsenceReasonBalance",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeIdentifier",
            "in": "path",
            "description": "The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceReasonBalanceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creates Absence Reason Balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceReasonBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Absence Reason Balance already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found. Absence Reason not found. Absence Reason Category not found. School Year not found. Employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/Assignment/{identifier}": {
      "get": {
        "tags": [
          "Assignment"
        ],
        "summary": "Get Assignment",
        "description": "Get Assignment by Identifier",
        "operationId": "GetAssignment",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the Assignment. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets Assignment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found. School Year not found. Employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/Connection/{id}/download": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Download Report",
        "description": "Download an existing report",
        "operationId": "DownloadReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "File format type. (Delimited, Flat)",
            "schema": {
              "$ref": "#/components/schemas/FileFormat"
            }
          },
          {
            "name": "includeHeaders",
            "in": "query",
            "description": "Whether to include headers on the report",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nowUtc",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not granted access to Connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbidResult"
                }
              }
            }
          },
          "404": {
            "description": "Connection not found"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Connection"
        ],
        "summary": "Download Report",
        "description": "Download an existing report",
        "operationId": "DownloadReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "File format type. (Delimited, Flat)",
            "schema": {
              "$ref": "#/components/schemas/FileFormat"
            }
          },
          {
            "name": "includeHeaders",
            "in": "query",
            "description": "Whether to include headers on the report",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nowUtc",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not granted access to Connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbidResult"
                }
              }
            }
          },
          "404": {
            "description": "Connection not found"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/Connection/{id}/data": {
      "post": {
        "tags": [
          "Connection"
        ],
        "summary": "Posts Report",
        "description": "Supply the date filter as the request body in the following JSON string array format.  (The content type for the body should be “application/json”.) For e.g. (`[\"Date BETWEEN '2020-07-01' AND '2020-07-30'\"]`",
        "operationId": "PostReportData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "pascalCase",
            "in": "query",
            "description": "Pascal Case results",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "nowUtc",
            "in": "query",
            "description": "The 'now' date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Connection not found"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/Connection/{id}/run": {
      "post": {
        "tags": [
          "Connection"
        ],
        "summary": "Run Report",
        "description": "Run a report and receive a file download",
        "operationId": "RunReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Report that will be run",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nowUtc",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not granted access to Connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbidResult"
                }
              }
            }
          },
          "404": {
            "description": "Connection not found"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/Organization": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get Organizations",
        "description": "Retrieve organizations you have been granted access to",
        "operationId": "GetOrganizations",
        "responses": {
          "200": {
            "description": "Returns Organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/Organization/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get Organization",
        "description": "Retrieve an organization you have been granted access to by its Id",
        "operationId": "GetOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found"
          }
        }
      }
    },
    "/api/v1/Organization/{id}/schoolYear": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get School Years",
        "description": "Get School Year data for an Organization",
        "operationId": "GetSchoolYears",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns School Years",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchoolYearResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found"
          }
        }
      }
    },
    "/api/v1/Organization/{id}/schoolYear/current": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get current School Year",
        "description": "Get current School Year for an Organization",
        "operationId": "GetCurrentSchoolYears",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns current School Year",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchoolYearResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found"
          }
        }
      }
    },
    "/api/v1/{orgId}/PayCode/{identifier}": {
      "get": {
        "tags": [
          "Pay Code"
        ],
        "summary": "Get PayCode",
        "description": "Get a specific pay code by it's identifier.",
        "operationId": "GetPayCode",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the PayCode. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets PayCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayCodeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "PayCodes not found or has been deleted"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "Pay Code"
        ],
        "summary": "Update existing pay code",
        "description": "Update details an already existing pay code.",
        "operationId": "UpdatePayCode",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the PayCode. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The PayCode Payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayCodeUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PayCode updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayCodeResponse"
                }
              }
            }
          },
          "201": {
            "description": "PayCode created if it previously did not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "PayCode already exists. Employee not included in request. Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found. Employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Pay Code"
        ],
        "summary": "Delete an pay code",
        "description": "Delete an existing pay code based on it's identifier",
        "operationId": "DeletePayCode",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the PayCode. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletes the PayCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization not found. PayCodes not found or has already been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/PayCode": {
      "get": {
        "tags": [
          "Pay Code"
        ],
        "summary": "Get all pay codes",
        "description": "Get all pay codes in an Organization",
        "operationId": "GetPayCodes",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets PayCodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayCodeResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "PayCodes not found or has been deleted"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Pay Code"
        ],
        "summary": "Create new pay code",
        "description": "Create an pay code for an Employee",
        "operationId": "CreatePayCode",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the PayCode",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayCodeCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PayCode created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "PayCode already exists. Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/ReferenceData/attribute": {
      "get": {
        "tags": [
          "Attribute"
        ],
        "summary": "Get Attributes",
        "description": "Get Attributes for an Organization",
        "operationId": "GetsAttributes",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "apiKey",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Attribute",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Attribute"
        ],
        "summary": "Create attribute",
        "description": "Create attributes for an Organization",
        "operationId": "CreateAttributes",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "apiKey",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created attribute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "412": {
            "description": "Client Error"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/User/{identifier}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes User",
        "description": "Delete a user by their Red Rover Id",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResult"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found. OrgUser not found or has already been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/User/{identifier}/{role}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes User's Role",
        "description": "Delete a user's role by their Red Rover Id",
        "operationId": "DeleteUserRole",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserRoles"
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Role Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResult"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found. OrgUser not found or has already been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/User/substitute": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Query for Substitutes",
        "description": "Query for Substitutes based on search criteria",
        "operationId": "GetSubstitutes",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "If the Substitute is active",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hasRelatedToOrgIdsAny",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "hasAttributeExternalIdsAny",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. For pagination purposes",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset. For pagination purposes",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Substitutes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubstituteResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Limit may not be greater than 1000"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates Substitute",
        "description": "Creates a Substitute",
        "operationId": "CreateSubstitute",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubstituteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Substitute Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubstituteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/User/substitute/{identifier}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Substitute by Id",
        "description": "Get a Substitute by their Red Rover Id",
        "operationId": "GetSubstitute",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Substitute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubstituteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates Substitute",
        "description": "Update a Substitute",
        "operationId": "UpdateSubstitute",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubstituteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creates / Updates Substitute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubstituteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/User/employee/{identifier}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets Employee",
        "description": "Get an Employee by their Red Rover Id",
        "operationId": "GetEmployee",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates Employee",
        "description": "Update an Employee",
        "operationId": "UpdateEmployee",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created / Updated Employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/User/administrator/{identifier}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets Administrator",
        "description": "Get an Administrator by their Red Rover Id",
        "operationId": "GetAdmin",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdministratorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Administrator not found"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates Administrator",
        "description": "Update an Administrator",
        "operationId": "UpdateAdmin",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdministratorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created / Updated Administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdministratorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/User/employee": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates Employee",
        "description": "Create an Employee",
        "operationId": "CreateEmployee",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created / Updated Employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/User/administrator": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates Administrator",
        "description": "Create an Administrator",
        "operationId": "CreateAdmin",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdministratorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created / Updated Administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdministratorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/Vacancy/{identifier}": {
      "get": {
        "tags": [
          "Vacancy"
        ],
        "summary": "Get Vacancy By Id",
        "description": "Get a specific Vacancy by it's identifier",
        "operationId": "GetVacancy",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the Vacancy. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets Vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VacancyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Vacancy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Vacancy"
        ],
        "summary": "Delete Vacancy By Id",
        "description": "Delete specific Vacancy by it's identifier",
        "operationId": "DeleteVacancy",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the Vacancy. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletes the Vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResult"
                }
              }
            }
          },
          "404": {
            "description": "Vacancy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/Vacancy/vacancyDetails": {
      "get": {
        "tags": [
          "Vacancy"
        ],
        "summary": " Query Vacancy Details",
        "description": "Query for Vacancy Details based on specified search criteria",
        "operationId": "GetVacancyDetails",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "apiKey",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "From date to filter Vacancies",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "From date to filter Vacancies",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "verified",
            "in": "query",
            "description": "If a Vacancy has been verified",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filled",
            "in": "query",
            "description": "If a Vacancy has been filled",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "substituteSourceOrgId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Numerical limit of results returned",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of results returned",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets Vacancy Details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VacancyDetailSearchResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Limit may not be greater than 2500. FromDate may not be later than EndDate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/{orgId}/Vacancy": {
      "post": {
        "tags": [
          "Vacancy"
        ],
        "summary": "Create a Vacancy",
        "description": "Create a Vacancy",
        "operationId": "PostVacancy",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Red Rover Id of the Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the Vacancy",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VacancyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Creates Vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VacancyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/api/v1/Webhooks/{id}": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update Webhook",
        "description": "Updates a Webhook's Uri, Basic Auth credentials, and whether it is Active. Additional documentation can be found in our help desk: https://help.redroverk12.com/hc/en-us/articles/4417040764308-Webhooks",
        "operationId": "PutWebhookUri",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Webhook (Guid)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated Uri",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Uri"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete Webhook",
        "description": "In doing this, this will make all of the User's implementation of this webhook disabled",
        "operationId": "DeleteWebhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Webhook (Guid)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          }
        }
      }
    },
    "/api/v1/Webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhooks",
        "description": "Gets all of your Webhooks",
        "operationId": "GetWebhook",
        "responses": {
          "200": {
            "description": "Returns Webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create Webhook.",
        "description": "Create a new Webhook\r\nThe 'Topic' is the type of webhook that you are creating. Please use the following standard: **domain/action**\r\nThe supported domains are `absence`, `vacancy`, `substitute_assignment`, `administrator`, `employee`, `substitute`\r\nThe supported actions are `create`, `update`, `delete`",
        "operationId": "CreateWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates Webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Webhook already exists for this topic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/Webhooks/{identifier}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhook",
        "description": "Gets a specific Webhook by its Id (Guid)",
        "operationId": "GetWebhook",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "The Id of the Webhook. (Guid)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AbsenceCreateRequest": {
        "title": "AbsenceCreateRequest",
        "required": [
          "Details",
          "Employee",
          "EndDate",
          "StartDate"
        ],
        "type": "object",
        "properties": {
          "validateOnly": {
            "type": "boolean",
            "description": "When set, this will only validate the Absence and will not save it. (default: false)",
            "default": false
          },
          "externalId": {
            "maxLength": 50,
            "type": "string",
            "description": "The external identifier to the Absence",
            "nullable": true
          },
          "employee": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "notesToApprover": {
            "maxLength": 1500,
            "type": "string",
            "description": "Notes that will be shown to the individual who approves the Absence",
            "nullable": true
          },
          "adminOnlyNotes": {
            "maxLength": 1500,
            "type": "string",
            "description": "Notes that will be only shown to Admins",
            "nullable": true
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceDetailCreateRequest"
            },
            "description": "The specific details of the Absence"
          },
          "startDate": {
            "type": "string",
            "description": "The date that the absence begins",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The date that the absence ends",
            "format": "date-time"
          },
          "vacancies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceVacancyRequest"
            },
            "description": "Assign a substitute to the Absence",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AbsenceDetailCreateRequest": {
        "title": "AbsenceDetail",
        "required": [
          "date",
          "dayPart",
          "endTime",
          "reasons",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The Date of the AbsenceDetail",
            "format": "date-time"
          },
          "dayPart": {
            "$ref": "#/components/schemas/DayPartEnum"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "description": "The start time of the AbsenceDetail",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The start time of the AbsenceDetail",
            "format": "date-time"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceReasonUsageCreateRequest"
            },
            "description": "The Reasons for absence in this AbsenceDetail"
          }
        },
        "additionalProperties": false,
        "description": "Absences are broken up into individual components called AbsenceDetails. Each AbsenceDetail is contained within one date. An absence can have many AbsenceDetails associated with it"
      },
      "AbsenceDetailResponse": {
        "title": "AbsenceDetail",
        "type": "object",
        "properties": {
          "datePart": {
            "$ref": "#/components/schemas/DayPartEnum"
          },
          "startTime": {
            "type": "string",
            "description": "The start time of the Absence for this day",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of the Absence for this day",
            "format": "date-time"
          },
          "absenceReasonUsage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceReasonUsageResponse"
            },
            "description": "The usage of Absence Reasons for this day",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Absence Detail"
      },
      "AbsenceReasonBalanceCreateRequest": {
        "required": [
          "absenceReason",
          "schoolYear"
        ],
        "type": "object",
        "properties": {
          "schoolYear": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "absenceReason": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "absenceReasonCategory": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "initialBalance": {
            "type": "number",
            "description": "The starting balance for this Absence Reason",
            "format": "double",
            "nullable": true
          },
          "balanceAsOf": {
            "type": "string",
            "description": "The 'As of' date as to when this balance was last update",
            "format": "date-time",
            "nullable": true
          },
          "absenceReasonTrackingType": {
            "$ref": "#/components/schemas/AbsenceReasonTrackingTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "AbsenceReasonBalanceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of AbsenceReasonBalance (numeric)",
            "format": "int32"
          },
          "employeeId": {
            "type": "integer",
            "description": "The Red Rover internal Id of Employee (numeric)",
            "format": "int32"
          },
          "schoolYearId": {
            "type": "integer",
            "description": "The Red Rover internal Id of SchoolYear (numeric)",
            "format": "int32"
          },
          "absenceReasonId": {
            "type": "integer",
            "description": "The Red Rover internal Id of AbsenceReason (numeric)",
            "format": "int32",
            "nullable": true
          },
          "absenceReasonCategoryId": {
            "type": "integer",
            "description": "The Red Rover internal Id of AbsenceReasonCategory (numeric)",
            "format": "int32",
            "nullable": true
          },
          "balanceAsOf": {
            "type": "string",
            "description": "The 'As of' date as to when this balance was last update",
            "format": "date-time"
          },
          "initialBalance": {
            "type": "number",
            "description": "How much the employee initially had",
            "format": "double"
          },
          "usedBalance": {
            "type": "number",
            "description": "How much has been used",
            "format": "double"
          },
          "unusedBalance": {
            "type": "number",
            "description": "How much has not been used",
            "format": "double"
          },
          "earnedBalance": {
            "type": "number",
            "description": "The amount of balance that was earned",
            "format": "double"
          },
          "netBalance": {
            "type": "number",
            "description": "The net balance",
            "format": "double"
          },
          "usedBalanceCalculatedAtUtc": {
            "type": "string",
            "description": "When the last time that the 'used' balance was calculated",
            "format": "date-time"
          },
          "absenceReasonTrackingType": {
            "$ref": "#/components/schemas/AbsenceReasonTrackingTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "AbsenceReasonBalanceUpdateRequest": {
        "type": "object",
        "properties": {
          "initialBalance": {
            "type": "number",
            "description": "The starting balance for this Absence Reason",
            "format": "double",
            "nullable": true
          },
          "balanceAsOf": {
            "type": "string",
            "description": "The 'As of' date as to when this balance was last update",
            "format": "date-time",
            "nullable": true
          },
          "absenceReasonTrackingType": {
            "$ref": "#/components/schemas/AbsenceReasonTrackingTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "AbsenceReasonCategoryResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of AbsenceReasonCategory (numeric)",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of AbsenceReason (alpha-numeric)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The Absence Reason Category's name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the Absence Reason Category",
            "nullable": true
          },
          "validUntilUtc": {
            "type": "string",
            "description": "When the Absence Reason Category expires",
            "format": "date-time"
          },
          "allowNegativeBalance": {
            "type": "boolean",
            "description": "If negative balances are allowed for this Absence Reason Categroy"
          },
          "code": {
            "type": "string",
            "description": "The 'Code' assigned to this Absence Reason Category. For external purposes",
            "nullable": true
          },
          "balancesAreSensitive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AbsenceReasonResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of AbsenceReason (numeric)",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of AbsenceReason (alpha-numeric)",
            "nullable": true
          },
          "allowNegativeBalance": {
            "type": "boolean",
            "description": "If negative balances are allowed for this Absence Reason"
          },
          "name": {
            "type": "string",
            "description": "The Absence Reason's name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the Absence Reason",
            "nullable": true
          },
          "category": {
            "$ref": "#/components/schemas/AbsenceReasonCategoryResponse"
          },
          "requiresNotesToAdmin": {
            "type": "boolean",
            "description": "If this Absence Reason requires a note to the Administrator",
            "nullable": true
          },
          "requiresApproval": {
            "type": "boolean",
            "description": "If this Absence Reason requires an approval"
          },
          "code": {
            "type": "string",
            "description": "The 'Code' assigned to this Absence Reason. For external purposes",
            "nullable": true
          },
          "positionTypeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Position Type Ids that are associated with this Absence Reason",
            "nullable": true
          },
          "contractIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Contract Ids that are associated with this Absence Reason",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AbsenceReasonTrackingTypeEnum": {
        "enum": [
          "Invalid",
          "Hourly",
          "Daily",
          "ByUnits"
        ],
        "type": "string"
      },
      "AbsenceReasonUsageCreateRequest": {
        "title": "AbsenceReasonUsage",
        "type": "object",
        "properties": {
          "usage": {
            "type": "string",
            "nullable": true
          },
          "dailyAmount": {
            "type": "number",
            "description": "What percentage (decimal value) of the Absence is used by this AbsenceReason. E.g. 0.5",
            "format": "double"
          },
          "hourlyAmount": {
            "type": "number",
            "description": "How many hours (decimal value) of the Absence is used by this AbsenceReason. E.g. 3.5",
            "format": "double"
          },
          "id": {
            "type": "integer",
            "description": "The Red Rover Id (numeric)",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "description": "The External Id (alpha-numeric)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An AbsenceDetail can have multiple reasons for the absence. This property allocates the AbsenceReason(s) to the AbsenceDetail"
      },
      "AbsenceReasonUsageResponse": {
        "title": "AbsenceReasonUsage",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of AbsenceReasonUsage (numeric)",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of AbsenceReasonUsage (alpha-numeric)",
            "nullable": true
          },
          "absenceReasonId": {
            "type": "integer",
            "description": "The Red Rover internal Id of AbsenceReason (numeric)",
            "format": "int64",
            "deprecated": true
          },
          "dailyAmount": {
            "type": "number",
            "description": "The allocation of this Absence Reason for this day (daily)",
            "format": "double"
          },
          "hourlyAmount": {
            "type": "number",
            "description": "The allocation of this Absence Reason for this day (hourly)",
            "format": "double"
          },
          "absenceReason": {
            "$ref": "#/components/schemas/AbsenceReasonResponse"
          }
        },
        "additionalProperties": false,
        "description": "Absence Reason Usage"
      },
      "AbsenceResponse": {
        "title": "AbsenceResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of Absence (numeric)",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of Absence (alpha-numeric)",
            "nullable": true
          },
          "orgId": {
            "type": "integer",
            "description": "The Red Rover internal Id of Organization (numeric)",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "description": "The first date of the Absence",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The last date of the Absence",
            "format": "date-time"
          },
          "numberOfDays": {
            "type": "integer",
            "description": "How many days the Absence spans",
            "format": "int32"
          },
          "isClosed": {
            "type": "boolean",
            "description": "If the Absence is closed"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "If the Absence is deleted"
          },
          "approvalStatus": {
            "type": "string",
            "description": "The approval status of the Absence",
            "nullable": true
          },
          "notesToApprover": {
            "type": "string",
            "description": "Any notes that are meant to go to the person who will approve this Absence",
            "nullable": true
          },
          "adminOnlyNotes": {
            "type": "string",
            "description": "Any notes that are entered by an admin for this Absence",
            "nullable": true
          },
          "totalDuration": {
            "type": "number",
            "description": "The total duration of this absence (minutes)",
            "format": "double"
          },
          "totalDayPortion": {
            "type": "number",
            "description": "The total duration of this absence (days)",
            "format": "double"
          },
          "employee": {
            "$ref": "#/components/schemas/OrgUserEmployeeResponse"
          },
          "absenceDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceDetailResponse"
            },
            "description": "The details of the Absence",
            "nullable": true
          },
          "adminEditUrl": {
            "type": "string",
            "description": "The Url that the Admin can edit the Absence",
            "nullable": true,
            "readOnly": true
          },
          "employeeEditUrl": {
            "type": "string",
            "description": "The Url that the Employee can edit the Absence",
            "nullable": true,
            "readOnly": true
          },
          "vacancies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VacancyResponse"
            },
            "description": "The Vacancies associated with this Absence",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Absence"
      },
      "AbsenceUpdateRequest": {
        "title": "AbsenceUpdateRequest",
        "required": [
          "Details",
          "Employee",
          "EndDate",
          "StartDate"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "maxLength": 50,
            "type": "string",
            "description": "The external identifier to the Absence",
            "nullable": true
          },
          "employee": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "notesToApprover": {
            "maxLength": 1500,
            "type": "string",
            "description": "Notes that will be shown to the individual who approves the Absence",
            "nullable": true
          },
          "adminOnlyNotes": {
            "maxLength": 1500,
            "type": "string",
            "description": "Notes that will be only shown to Admins",
            "nullable": true
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceDetailCreateRequest"
            },
            "description": "The specific details of the Absence"
          },
          "startDate": {
            "type": "string",
            "description": "The date that the absence begins",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The date that the absence ends",
            "format": "date-time"
          },
          "vacancies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceVacancyRequest"
            },
            "description": "Assign a substitute to the Absence",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AbsenceVacancyDetailRequest": {
        "title": "AbsenceVacancyDetailRequest",
        "required": [
          "Date",
          "EndTime",
          "StartTime"
        ],
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "needsReplacement": {
            "type": "boolean",
            "description": "If this Vacancy needs to be open for a Substitute to fill"
          },
          "date": {
            "type": "string",
            "description": "The Date of this Detail",
            "format": "date-time"
          },
          "dayPartId": {
            "$ref": "#/components/schemas/DayPartEnum"
          },
          "startTime": {
            "type": "string",
            "description": "The time of day this Vacancy Detail begins",
            "format": "(hh:mm:ss)"
          },
          "endTime": {
            "type": "string",
            "description": "The time of day this Vacancy Detail ends",
            "format": "(hh:mm:ss)"
          },
          "accountingCodeAllocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VacancyAccountingCodeAllocationRequest"
            },
            "description": "Accounting code allocations",
            "nullable": true
          },
          "payCode": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "replacementEmployee": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          }
        },
        "additionalProperties": false,
        "description": "The Vacancy Date Details"
      },
      "AbsenceVacancyRequest": {
        "title": "Vacancy",
        "required": [
          "Details",
          "Position"
        ],
        "type": "object",
        "properties": {
          "position": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceVacancyDetailRequest"
            },
            "description": "The Details of the Vacancy"
          },
          "notesToReplacement": {
            "maxLength": 1500,
            "type": "string",
            "description": "Notes for the Replacement Substitute",
            "nullable": true
          },
          "allowSubToAcceptPart": {
            "type": "boolean",
            "description": "Allows the Sub to accept individual parts of a Vacancy",
            "nullable": true
          },
          "externalId": {
            "maxLength": 50,
            "type": "string",
            "description": "The External Id of the Vacancy",
            "nullable": true
          },
          "payCode": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "holdForManualFill": {
            "type": "boolean",
            "description": "This will hold the Vacancy until it will be manually filled"
          },
          "administratorComments": {
            "maxLength": 1500,
            "type": "string",
            "description": "Administrator comments",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccessControlRequest": {
        "title": "AccessControlRequest",
        "type": "object",
        "properties": {
          "allLocations": {
            "type": "boolean",
            "description": "If the Administrator can be granted access to all Locations",
            "nullable": true
          },
          "allPositionTypes": {
            "type": "boolean",
            "description": "If the Administrator can be granted access to all Position Types",
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LocatorRequest"
            },
            "description": "The Locations that the Administrator is granted access to",
            "nullable": true
          },
          "locationGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LocatorRequest"
            },
            "description": "The Location Groups that the Administrator is granted access to",
            "nullable": true
          },
          "positionTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LocatorRequest"
            },
            "description": "The Position Types that the Administrator is granted access to",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "AccessControlRequest"
      },
      "AccessControlResponse": {
        "title": "AccessControlResponse",
        "type": "object",
        "properties": {
          "allLocations": {
            "type": "boolean",
            "description": "If the user has access to all locations"
          },
          "allPositionTypes": {
            "type": "boolean",
            "description": "If the user has access to all position types"
          },
          "locationIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The Ids of the Locations the user has access to",
            "nullable": true
          },
          "locationGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The Ids of the Location Groups the user has access to",
            "nullable": true
          },
          "positionTypeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The Ids of the Position Types the user has access to",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Access control levels of the user"
      },
      "AccountingCodeAllocationRequest": {
        "title": "AccountingCodeAllocationRequest",
        "required": [
          "accountingCodeId",
          "allocation"
        ],
        "type": "object",
        "properties": {
          "accountingCodeId": {
            "type": "integer",
            "description": "The Red Rover internal Id of AccountingCode (numeric)",
            "format": "int32"
          },
          "allocation": {
            "type": "number",
            "description": "How much of the Accounting Code is allocated. Must be in decimal format (e.g. 0.4)",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "AccountingCodeAllocationRequest"
      },
      "AccountingCodeAllocationResponse": {
        "title": "AccountingCodeAllocation",
        "type": "object",
        "properties": {
          "accountingCode": {
            "$ref": "#/components/schemas/AccountingCodeLightResponse"
          },
          "allocation": {
            "type": "number",
            "description": "What percentage (decimal) the Accounting code is allocated to",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Accounting code allocations"
      },
      "AccountingCodeLightResponse": {
        "title": "AccountingCodeLight",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Red Rover internal id of the Accounting code",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "description": "The Code used",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the Accounting code",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Accounting code that is associated with the Vacancy"
      },
      "AdministratorRequest": {
        "title": "AdministratorRequest",
        "required": [
          "accessControl"
        ],
        "type": "object",
        "properties": {
          "accessControl": {
            "$ref": "#/components/schemas/AccessControlRequest"
          },
          "replaceExistingRelatedOrgs": {
            "type": "boolean",
            "description": "If existing related Organizations will be replaced. (Default is true)"
          },
          "isSuperUser": {
            "type": "boolean",
            "description": "If the Administrator is a super user",
            "nullable": true
          },
          "relatedOrgIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Organization Ids that the Administrator is related it",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of OrgUser (numeric)",
            "format": "int32"
          },
          "secondaryIdentifier": {
            "type": "string",
            "description": "The secondary identifier for the User",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of OrgUser (alpha-numeric)",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The User's first name",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "The User's middle name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The User's last name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The User's email (authentication)",
            "nullable": true
          },
          "notificationEmail": {
            "type": "string",
            "description": "The User's email that will receive notifications. For SSO districts only. If empty, the Email field will be used. Field is optional",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The User's date of birth",
            "format": "date-time",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "The User's address",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "The User's address (continued)",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The User's city",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The User's postal code",
            "nullable": true
          },
          "badgeNumber": {
            "type": "string",
            "description": "The User's badge number",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/StateEnum"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEnum"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The User's phone number",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "If the user is active. (Default is true for Create)",
            "nullable": true
          },
          "permissionSet": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "removeFutureAssignmentsOnInactivate": {
            "type": "boolean",
            "description": "If all assignments are to be removed if the user is inactivated at any time",
            "nullable": true
          },
          "inviteImmediately": {
            "type": "boolean",
            "description": "If the user is to receive an invitation email right away",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "AdministratorRequest"
      },
      "AdministratorResponse": {
        "title": "AdministratorResponse",
        "type": "object",
        "properties": {
          "isSuperUser": {
            "type": "boolean",
            "description": "If the User is a super user"
          },
          "accessControl": {
            "$ref": "#/components/schemas/AccessControlResponse"
          },
          "relatedOrgIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of the OrganizationIds the user is related to",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of OrgUser (numeric)",
            "format": "int32"
          },
          "orgId": {
            "type": "integer",
            "description": "The Red Rover internal Id of Organization (numeric)",
            "format": "int32"
          },
          "createdUtc": {
            "type": "string",
            "description": "When the User was created",
            "format": "date-time"
          },
          "changedUtc": {
            "type": "string",
            "description": "When the User's record was last changed",
            "format": "date-time"
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of OrgUser (alpha-numeric)",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The User's first name",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "The User's middle name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The User's last name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The User's email",
            "nullable": true
          },
          "notificationEmail": {
            "type": "string",
            "description": "The User's notification email (for SSO organizations only)",
            "nullable": true
          },
          "loginEmail": {
            "type": "string",
            "description": "The User's Login email (for SSO organizations only)",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The User's date of birth",
            "format": "date-time",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "The User's address",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "The User's address (continued)",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The User's city",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/StateEnum"
          },
          "postalCode": {
            "type": "string",
            "description": "The User's postal code",
            "nullable": true
          },
          "country": {
            "$ref": "#/components/schemas/CountryEnum"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The User's phone number",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "If the user is active"
          },
          "permissionSetId": {
            "type": "integer",
            "description": "The Red Rover internal Id of PermissionSet (numeric)",
            "format": "int32",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is the User Deleted"
          }
        },
        "additionalProperties": false,
        "description": "AdministratorResponse"
      },
      "ApprovalStatusEnum": {
        "type": "integer",
        "format": "int32"
      },
      "AssignmentResponse": {
        "title": "Assignment",
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "position": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "contract": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "vacancy": {
            "$ref": "#/components/schemas/VacancyResponse"
          },
          "startTimeLocal": {
            "type": "string",
            "description": "When the Assignment starts (local time)",
            "format": "date-time"
          },
          "endTimeLocal": {
            "type": "string",
            "description": "When the Assignment ends (local time)",
            "format": "date-time"
          },
          "isLongTerm": {
            "type": "boolean",
            "description": "Is the Assignment classified as a long-term assignment"
          },
          "cancelledAtUtc": {
            "type": "string",
            "description": "When was the Assignment cancelled",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Assignment"
      },
      "AttributeRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of Attribute (numeric)",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the Attribute",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of Attribute (alpha-numeric)",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Whether the Attribute is active"
          },
          "description": {
            "type": "string",
            "description": "The description of the Attribute",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttributeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of Attribute (numeric)",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the Attribute",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of Attribute (alpha-numeric)",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "If the Attribute is active"
          },
          "description": {
            "type": "string",
            "description": "Description of the Attribute",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationProperties": {
        "type": "object",
        "properties": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "isPersistent": {
            "type": "boolean"
          },
          "redirectUri": {
            "type": "string",
            "nullable": true
          },
          "issuedUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiresUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allowRefresh": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BadRequestResult": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ContractLightResponse": {
        "title": "Contract",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contract"
      },
      "CountryEnum": {
        "type": "integer",
        "format": "int32"
      },
      "DayOfWeek": {
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "DayPartEnum": {
        "enum": [
          "Invalid",
          "FullDay",
          "HalfDayMorning",
          "HalfDayAfternoon",
          "QuarterDayEarlyMorning",
          "QuarterDayLateMorning",
          "QuarterDayEarlyAfternoon",
          "QuarterDayLateAfternoon",
          "Hourly",
          "PeriodByPeriod"
        ],
        "type": "string"
      },
      "EmployeeRequest": {
        "title": "EmployeeRequest",
        "type": "object",
        "properties": {
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionRequest"
            },
            "description": "The Positions of the employee",
            "nullable": true
          },
          "substitutePreferences": {
            "$ref": "#/components/schemas/SubstitutePreferencesRequest"
          },
          "replaceExistingSubstitutePreferences": {
            "type": "boolean",
            "description": "Whether the existing substitute preferences will be replaced. (Default is true)"
          },
          "timeOffBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeOffBalanceRequest"
            },
            "description": "The Employee's time off balances",
            "nullable": true
          },
          "replaceExistingTimeOffBalances": {
            "type": "boolean",
            "description": "Whether the existing time off balances will be replaced. (Default is true)"
          },
          "compTimeStartDate": {
            "type": "string",
            "description": "When comp time starts",
            "format": "date-time",
            "nullable": true
          },
          "compTimeEndDate": {
            "type": "string",
            "description": "When comp time ends",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of OrgUser (numeric)",
            "format": "int32"
          },
          "secondaryIdentifier": {
            "type": "string",
            "description": "The secondary identifier for the User",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of OrgUser (alpha-numeric)",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The User's first name",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "The User's middle name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The User's last name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The User's email (authentication)",
            "nullable": true
          },
          "notificationEmail": {
            "type": "string",
            "description": "The User's email that will receive notifications. For SSO districts only. If empty, the Email field will be used. Field is optional",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The User's date of birth",
            "format": "date-time",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "The User's address",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "The User's address (continued)",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The User's city",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The User's postal code",
            "nullable": true
          },
          "badgeNumber": {
            "type": "string",
            "description": "The User's badge number",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/StateEnum"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEnum"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The User's phone number",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "If the user is active. (Default is true for Create)",
            "nullable": true
          },
          "permissionSet": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "removeFutureAssignmentsOnInactivate": {
            "type": "boolean",
            "description": "If all assignments are to be removed if the user is inactivated at any time",
            "nullable": true
          },
          "inviteImmediately": {
            "type": "boolean",
            "description": "If the user is to receive an invitation email right away",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "EmployeeRequest"
      },
      "EmployeeResponse": {
        "title": "Employee",
        "type": "object",
        "properties": {
          "positions": {
            "title": "Positions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionResponse"
            },
            "description": "The Positions that belong to the employee",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of OrgUser (numeric)",
            "format": "int32"
          },
          "orgId": {
            "type": "integer",
            "description": "The Red Rover internal Id of Organization (numeric)",
            "format": "int32"
          },
          "createdUtc": {
            "type": "string",
            "description": "When the User was created",
            "format": "date-time"
          },
          "changedUtc": {
            "type": "string",
            "description": "When the User's record was last changed",
            "format": "date-time"
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of OrgUser (alpha-numeric)",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The User's first name",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "The User's middle name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The User's last name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The User's email",
            "nullable": true
          },
          "notificationEmail": {
            "type": "string",
            "description": "The User's notification email (for SSO organizations only)",
            "nullable": true
          },
          "loginEmail": {
            "type": "string",
            "description": "The User's Login email (for SSO organizations only)",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The User's date of birth",
            "format": "date-time",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "The User's address",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "The User's address (continued)",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The User's city",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/StateEnum"
          },
          "postalCode": {
            "type": "string",
            "description": "The User's postal code",
            "nullable": true
          },
          "country": {
            "$ref": "#/components/schemas/CountryEnum"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The User's phone number",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "If the user is active"
          },
          "permissionSetId": {
            "type": "integer",
            "description": "The Red Rover internal Id of PermissionSet (numeric)",
            "format": "int32",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is the User Deleted"
          }
        },
        "additionalProperties": false,
        "description": "Employee"
      },
      "FileFormat": {
        "enum": [
          "Delimited",
          "Flat"
        ],
        "type": "string"
      },
      "FillStatusEnum": {
        "enum": [
          "Invalid",
          "Unfilled",
          "PartlyFilled",
          "Filled",
          "NoSubRequired"
        ],
        "type": "string"
      },
      "ForbidResult": {
        "type": "object",
        "properties": {
          "authenticationSchemes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "properties": {
            "$ref": "#/components/schemas/AuthenticationProperties"
          }
        },
        "additionalProperties": false
      },
      "IOutputFormatter": {
        "type": "object",
        "additionalProperties": false
      },
      "Int32IdNameClass": {
        "title": "SimpleClass",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains the Id, ExternalId, and Name"
      },
      "Int32LocatorRequest": {
        "title": "Identifier",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover Id (numeric)",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "description": "The External Id (alpha-numeric)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Identifiers of the object"
      },
      "Int32LocatorResponse": {
        "title": "Identifier",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover Id (numeric)",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "description": "The External Id (alpha-numeric)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Identifiers of the object"
      },
      "NeedsReplacementEnum": {
        "type": "integer",
        "format": "int32"
      },
      "NotFoundResult": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OkObjectResult": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "formatters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IOutputFormatter"
            },
            "nullable": true
          },
          "contentTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "declaredType": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OkResult": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OrgUserEmployeeResponse": {
        "title": "Employee",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of OrgUser (numeric)",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of OrgUser (alpha-numeric)",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "User's first name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "User's last name",
            "nullable": true
          },
          "secondaryIdentifier": {
            "type": "string",
            "description": "Secondary Identifier of the user",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Employee"
      },
      "OrganizationResponse": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "integer",
            "description": "The Red Rover internal id of the Organization",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The Organization's name",
            "nullable": true
          },
          "apiKey": {
            "type": "string",
            "description": "The Api Key the Organization has granted you",
            "nullable": true
          },
          "grantedAtUtc": {
            "type": "string",
            "description": "When the Organization granted you",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PayCodeCreateRequest": {
        "required": [
          "code",
          "description",
          "expired",
          "externalId",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the pay code"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "The pay code's description"
          },
          "externalId": {
            "minLength": 1,
            "type": "string",
            "description": "The pay code's ExternalId"
          },
          "expired": {
            "type": "boolean",
            "description": "If the pay code is expired"
          },
          "code": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The assigned code of the code"
          },
          "hourlyRate": {
            "type": "number",
            "description": "The hourly rate",
            "format": "double",
            "nullable": true
          },
          "unitRate": {
            "type": "number",
            "description": "The unit rate",
            "format": "double",
            "nullable": true
          },
          "halfDayRate": {
            "type": "number",
            "description": "The half date rate",
            "format": "double",
            "nullable": true
          },
          "fullDayRate": {
            "type": "number",
            "description": "The full date rate",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayCodeResponse": {
        "title": "PayCode",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The Code used",
            "nullable": true
          },
          "hourlyRate": {
            "type": "number",
            "description": "Hourly rate (decimal 7,2)",
            "format": "double",
            "nullable": true
          },
          "unitRate": {
            "type": "number",
            "description": "Unit rate (decimal 7,2)",
            "format": "double",
            "nullable": true
          },
          "halfDayRate": {
            "type": "number",
            "description": "Half day rate (decimal 7,2)",
            "format": "double",
            "nullable": true
          },
          "fullDayRate": {
            "type": "number",
            "description": "Full day rate (decimal 7,2)",
            "format": "double",
            "nullable": true
          },
          "validUntilUtc": {
            "type": "string",
            "description": "When the pay code is valid until",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Pay code of the Vacancy"
      },
      "PayCodeUpdateRequest": {
        "required": [
          "code",
          "description",
          "expired",
          "externalId",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the pay code"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "The pay code's description"
          },
          "externalId": {
            "minLength": 1,
            "type": "string",
            "description": "The pay code's ExternalId"
          },
          "expired": {
            "type": "boolean",
            "description": "If the pay code is expired"
          },
          "code": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The assigned code of the code"
          },
          "hourlyRate": {
            "type": "number",
            "description": "The hourly rate",
            "format": "double",
            "nullable": true
          },
          "unitRate": {
            "type": "number",
            "description": "The unit rate",
            "format": "double",
            "nullable": true
          },
          "halfDayRate": {
            "type": "number",
            "description": "The half date rate",
            "format": "double",
            "nullable": true
          },
          "fullDayRate": {
            "type": "number",
            "description": "The full date rate",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PositionJobRequest": {
        "type": "object",
        "properties": {
          "job": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "payStep": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "overridePayRate": {
            "type": "number",
            "description": "The pay rate override",
            "format": "double",
            "nullable": true
          },
          "visible": {
            "type": "boolean",
            "description": "If the Job is visible. (Default is true)"
          },
          "positionJobId": {
            "type": "integer",
            "description": "The Position Job Id",
            "format": "int32",
            "nullable": true
          },
          "effectiveAsOf": {
            "type": "string",
            "description": "The effective date of ths Job",
            "format": "date-time",
            "nullable": true
          },
          "accountingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingCodeAllocationRequest"
            },
            "description": "Accounting code allocations",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PositionRequest": {
        "required": [
          "contract",
          "positionType",
          "schedules"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "The external Id of SchoolYear (alpha-numeric)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The Position's name",
            "nullable": true
          },
          "positionScheduleModeId": {
            "$ref": "#/components/schemas/PositionScheduleModeEnum"
          },
          "contract": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "positionType": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "hoursPerFullWorkDay": {
            "type": "number",
            "description": "Amount of hours per a full workday (hours)",
            "format": "double",
            "nullable": true
          },
          "needsReplacement": {
            "$ref": "#/components/schemas/NeedsReplacementEnum"
          },
          "startDate": {
            "type": "string",
            "description": "The StartDate of the Position",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "The EndDate of the Position",
            "format": "date-time",
            "nullable": true
          },
          "isStaffAugmentation": {
            "type": "boolean",
            "description": "Is the Position for staff augmentation",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "fte": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "qualifiedForPto": {
            "type": "boolean",
            "description": "Is the Position qualified for paid time off",
            "nullable": true,
            "deprecated": true
          },
          "qualifiedForPaidHolidays": {
            "type": "boolean",
            "description": "Is the Position qualified for holidays",
            "nullable": true,
            "deprecated": true
          },
          "qualifiedForPtoAsOf": {
            "type": "string",
            "description": "The effective date that the Position qualifies for paid time off (If not included, the default is that it is always qualified)",
            "format": "date-time",
            "nullable": true
          },
          "qualifiedForPaidHolidaysAsOf": {
            "type": "string",
            "description": "The effective date that the Position qualifies for holidays (If not included, the default is that it is always qualified)",
            "format": "date-time",
            "nullable": true
          },
          "defaultJobPayOverride": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "code": {
            "type": "string",
            "description": "The 'Code' for the Position.",
            "nullable": true
          },
          "schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionScheduleRequest"
            },
            "description": "The Schedules for the Position"
          },
          "replaceExistingPositionJobs": {
            "type": "boolean",
            "description": "If existing Position Jobs are to be replaced. (Default is true)"
          },
          "allowedLocationIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LocatorRequest"
            },
            "description": "Locations the Position is granted",
            "nullable": true
          },
          "otherJobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionJobRequest"
            },
            "description": "Other Jobs",
            "nullable": true
          },
          "primaryJob": {
            "$ref": "#/components/schemas/PositionJobRequest"
          },
          "accountingCodeAllocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingCodeAllocationRequest"
            },
            "description": "The Accounting Code Allocation for this position",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PositionResponse": {
        "title": "Position",
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "type": "string",
            "description": "The code of the position",
            "nullable": true
          },
          "startDate": {
            "title": "StartDate",
            "type": "string",
            "description": "The date the position begins",
            "format": "date-time"
          },
          "endDate": {
            "title": "EndDate",
            "type": "string",
            "description": "The date the position ends",
            "format": "date-time"
          },
          "defaultAccountingCodesFromSchedule": {
            "type": "boolean"
          },
          "needsReplacement": {
            "$ref": "#/components/schemas/NeedsReplacementEnum"
          },
          "contract": {
            "$ref": "#/components/schemas/ContractLightResponse"
          },
          "positionScheduleMode": {
            "$ref": "#/components/schemas/PositionScheduleModeEnum"
          },
          "hoursPerFullWorkDay": {
            "title": "HoursPerFullWorkDay",
            "type": "number",
            "description": "The hours worked in a full day",
            "format": "double",
            "nullable": true
          },
          "fte": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "qualifiedForPtoAsOf": {
            "title": "QualifiedForPtoAsOf",
            "type": "string",
            "description": "When is the position qualified for PTO",
            "format": "date-time"
          },
          "qualifiedForPaidHolidaysAsOf": {
            "title": "QualifiedForPaidHolidaysAsOf",
            "type": "string",
            "description": "When is the position qualified for holidays",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Position"
      },
      "PositionScheduleCustomVariantRequest": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "The start time",
            "format": "date-span",
            "nullable": true
          },
          "halfDayMorningEndTime": {
            "type": "string",
            "description": "Halfday morning start time",
            "format": "date-span",
            "nullable": true
          },
          "halfDayAfternoonStartTime": {
            "type": "string",
            "description": "Halfday afternoon start time",
            "format": "date-span",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "description": "The next end time",
            "format": "date-span",
            "nullable": true
          },
          "nextStartTime": {
            "type": "string",
            "description": "The next start time",
            "format": "date-span",
            "nullable": true
          },
          "isWorkTime": {
            "type": "boolean",
            "description": "If is work time"
          },
          "needsReplacement": {
            "type": "boolean",
            "description": "If needs replacement"
          },
          "needsReplacementAm": {
            "type": "boolean",
            "description": "If needs replacement for AM"
          },
          "needsReplacementPm": {
            "type": "boolean",
            "description": "If needs replacement for PM"
          },
          "workDayScheduleVariantType": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          }
        },
        "additionalProperties": false
      },
      "PositionScheduleItemRequest": {
        "required": [
          "bellSchedule",
          "location"
        ],
        "type": "object",
        "properties": {
          "accountingCodeAllocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingCodeAllocationRequest"
            },
            "description": "Accounting Code allocations",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "job": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "bellSchedule": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "startPeriod": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "endPeriod": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "periodsNotNeedingReplacement": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LocatorRequest"
            },
            "description": "The Periods that do not need replacement",
            "nullable": true
          },
          "standardCustomScheduleVariant": {
            "$ref": "#/components/schemas/PositionScheduleCustomVariantRequest"
          },
          "additionalCustomScheduleVariants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionScheduleCustomVariantRequest"
            },
            "description": "Additional custom schedule variant",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PositionScheduleModeEnum": {
        "enum": [
          "Normal",
          "FlexibleSchedule",
          "FlexibleNoSchedule",
          "FlexibleHoursOnly"
        ],
        "type": "string"
      },
      "PositionScheduleRequest": {
        "required": [
          "daysOfTheWeek",
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionScheduleItemRequest"
            },
            "description": "Position Schedule Items"
          },
          "daysOfTheWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            },
            "description": "Days of the week"
          }
        },
        "additionalProperties": false
      },
      "Reason": {
        "title": "Reason",
        "type": "object",
        "properties": {
          "absenceReasonId": {
            "type": "integer",
            "description": "Id of the Absence's Reason",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "description": "The External Id for the Absence Reason",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The Reason",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Reason for the Absence"
      },
      "SchoolYearResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of SchoolYear (numeric)",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The generated name for the School Year",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "The Start Date of the School Year",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The End Date of the School Year",
            "format": "date-time"
          },
          "earliestDateForAbsenceEntry": {
            "type": "string",
            "description": "The date in which Absences are allowed to be created",
            "format": "date-time"
          },
          "isCurrentSchoolYear": {
            "type": "boolean",
            "description": "Is this the current school year"
          }
        },
        "additionalProperties": false
      },
      "SimpleAbsenceDetail": {
        "title": "AbsenceDetail",
        "type": "object",
        "properties": {
          "absenceId": {
            "type": "integer",
            "description": "Id of the Absence",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "description": "Id of the Absence Detail",
            "format": "int64"
          },
          "absenceDetailId": {
            "type": "integer",
            "description": "Id of the Absence Detail",
            "format": "int64",
            "deprecated": true
          },
          "employee": {
            "$ref": "#/components/schemas/SimplePerson"
          },
          "start": {
            "type": "string",
            "description": "The StartDate of the Absence",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The EndDate of the Absence",
            "format": "date-time"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reason"
            },
            "description": "The Absence Reasons",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of the Absence"
      },
      "SimplePerson": {
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Red Rover internal id of the user",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "description": "External Id of the user",
            "nullable": true
          },
          "secondaryIdentifier": {
            "type": "string",
            "description": "Secondary Identifier of the user",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "User's first name",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "User's middle name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "User's last name",
            "nullable": true
          },
          "sourceOrganization": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          }
        },
        "additionalProperties": false,
        "description": "User"
      },
      "SimplePosition": {
        "title": "Position",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The name of the Position",
            "nullable": true
          },
          "hoursPerFullWorkDay": {
            "type": "number",
            "description": "Hours per full work day",
            "format": "double",
            "nullable": true
          },
          "positionType": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "needsReplacement": {
            "$ref": "#/components/schemas/NeedsReplacementEnum"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Position of the Employee"
      },
      "SimplePositionResponse": {
        "title": "Position",
        "type": "object",
        "properties": {
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Name of the Position",
            "nullable": true,
            "readOnly": true
          },
          "positionType": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Position"
      },
      "StateEnum": {
        "type": "integer",
        "format": "int32"
      },
      "SubstituteAttributeRequest": {
        "title": "SubstituteAttributeRequest",
        "type": "object",
        "properties": {
          "attribute": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "expires": {
            "type": "string",
            "description": "When the attribute expires",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "SubstituteAttributeRequest"
      },
      "SubstituteAttributeResponse": {
        "title": "SubstituteAttributeResponse",
        "type": "object",
        "properties": {
          "attribute": {
            "$ref": "#/components/schemas/Int32LocatorResponse"
          },
          "expires": {
            "type": "string",
            "description": "When the attribute expire",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "SubstituteAttributeResponse"
      },
      "SubstitutePreferencesRequest": {
        "title": "SubstitutePreferencesRequest",
        "type": "object",
        "properties": {
          "favoriteSubstitutes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LocatorRequest"
            },
            "description": "Substitutes that are preferred favorites",
            "nullable": true
          },
          "blockedSubstitutes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LocatorRequest"
            },
            "description": "Substitutes that are blocked",
            "nullable": true
          },
          "autoAssignedSubstitutes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LocatorRequest"
            },
            "description": "Substitutes that can be auto assigned",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "SubstitutePreferencesRequest"
      },
      "SubstituteRelatedOrgRequest": {
        "title": "SubstituteRelatedOrgRequest",
        "type": "object",
        "properties": {
          "orgId": {
            "type": "integer",
            "description": "The Red Rover internal Id of Organization (numeric)",
            "format": "int32"
          },
          "payCode": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubstituteAttributeRequest"
            },
            "description": "The Substitute's attributes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "SubstituteRelatedOrgRequest"
      },
      "SubstituteRequest": {
        "title": "SubstituteRequest",
        "type": "object",
        "properties": {
          "replaceExistingRelatedOrgs": {
            "type": "boolean",
            "description": "If related Organizations are to be replaced. (Default is true)"
          },
          "relatedOrgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubstituteRelatedOrgRequest"
            },
            "description": "Related Organizations",
            "nullable": true
          },
          "replaceExistingAttributes": {
            "type": "boolean",
            "description": "If related Attributes are to be replaced. (Default is true)"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubstituteAttributeRequest"
            },
            "description": "Related Attributes",
            "nullable": true
          },
          "payCode": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "relatedOrgIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Related Organization Ids",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of OrgUser (numeric)",
            "format": "int32"
          },
          "secondaryIdentifier": {
            "type": "string",
            "description": "The secondary identifier for the User",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of OrgUser (alpha-numeric)",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The User's first name",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "The User's middle name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The User's last name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The User's email (authentication)",
            "nullable": true
          },
          "notificationEmail": {
            "type": "string",
            "description": "The User's email that will receive notifications. For SSO districts only. If empty, the Email field will be used. Field is optional",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The User's date of birth",
            "format": "date-time",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "The User's address",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "The User's address (continued)",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The User's city",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The User's postal code",
            "nullable": true
          },
          "badgeNumber": {
            "type": "string",
            "description": "The User's badge number",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/StateEnum"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEnum"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The User's phone number",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "If the user is active. (Default is true for Create)",
            "nullable": true
          },
          "permissionSet": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "removeFutureAssignmentsOnInactivate": {
            "type": "boolean",
            "description": "If all assignments are to be removed if the user is inactivated at any time",
            "nullable": true
          },
          "inviteImmediately": {
            "type": "boolean",
            "description": "If the user is to receive an invitation email right away",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "SubstituteRequest"
      },
      "SubstituteResponse": {
        "title": "SubstituteResponse",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubstituteAttributeResponse"
            },
            "description": "Attributes of the substitute",
            "nullable": true
          },
          "relatedOrgIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of the OrganizationIds the user is related to",
            "nullable": true
          },
          "payCode": {
            "$ref": "#/components/schemas/PayCodeResponse"
          },
          "id": {
            "type": "integer",
            "description": "The Red Rover internal Id of OrgUser (numeric)",
            "format": "int32"
          },
          "orgId": {
            "type": "integer",
            "description": "The Red Rover internal Id of Organization (numeric)",
            "format": "int32"
          },
          "createdUtc": {
            "type": "string",
            "description": "When the User was created",
            "format": "date-time"
          },
          "changedUtc": {
            "type": "string",
            "description": "When the User's record was last changed",
            "format": "date-time"
          },
          "externalId": {
            "type": "string",
            "description": "The external Id of OrgUser (alpha-numeric)",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The User's first name",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "The User's middle name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The User's last name",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The User's email",
            "nullable": true
          },
          "notificationEmail": {
            "type": "string",
            "description": "The User's notification email (for SSO organizations only)",
            "nullable": true
          },
          "loginEmail": {
            "type": "string",
            "description": "The User's Login email (for SSO organizations only)",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The User's date of birth",
            "format": "date-time",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "The User's address",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "The User's address (continued)",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The User's city",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/StateEnum"
          },
          "postalCode": {
            "type": "string",
            "description": "The User's postal code",
            "nullable": true
          },
          "country": {
            "$ref": "#/components/schemas/CountryEnum"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The User's phone number",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "If the user is active"
          },
          "permissionSetId": {
            "type": "integer",
            "description": "The Red Rover internal Id of PermissionSet (numeric)",
            "format": "int32",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is the User Deleted"
          }
        },
        "additionalProperties": false,
        "description": "SubstituteResponse"
      },
      "TimeOffBalanceRequest": {
        "title": "TimeOffBalanceRequest",
        "type": "object",
        "properties": {
          "absenceReason": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "absenceReasonCategory": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "schoolYear": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "asOf": {
            "type": "string",
            "description": "The 'AsOf' date",
            "format": "date-time",
            "nullable": true
          },
          "absenceReasonTrackingTypeId": {
            "$ref": "#/components/schemas/AbsenceReasonTrackingTypeEnum"
          },
          "balance": {
            "type": "number",
            "description": "The balance for this time off balance request",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "TimeOffBalanceRequest"
      },
      "UserRoles": {
        "enum": [
          "Admin",
          "Employee",
          "Substitute"
        ],
        "type": "string"
      },
      "VacancyAccountingCodeAllocationRequest": {
        "title": "AccountingCodeAllocation",
        "required": [
          "accountingCode",
          "allocation"
        ],
        "type": "object",
        "properties": {
          "accountingCode": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "allocation": {
            "type": "number",
            "description": "How much is to be allocated. (0-1.0)",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Accounting Code Allocation"
      },
      "VacancyCreateRequest": {
        "title": "VacancyCreate",
        "required": [
          "Contract",
          "Details",
          "PositionType"
        ],
        "type": "object",
        "properties": {
          "positionType": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "contract": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VacancyDetailCreateRequest"
            },
            "description": "The Details of the Vacancy"
          },
          "location": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "bellSchedule": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "title": {
            "minLength": 1,
            "type": "string",
            "description": "The Title of the Position that will be created"
          },
          "notesToReplacement": {
            "maxLength": 1500,
            "type": "string",
            "description": "Notes for the Replacement Substitute",
            "nullable": true
          },
          "allowSubToAcceptPart": {
            "type": "boolean",
            "description": "Allows the Sub to accept individual parts of a Vacancy",
            "nullable": true
          },
          "externalId": {
            "maxLength": 50,
            "type": "string",
            "description": "The External Id of the Vacancy",
            "nullable": true
          },
          "payCode": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "holdForManualFill": {
            "type": "boolean",
            "description": "This will hold the Vacancy until it will be manually filled"
          },
          "administratorComments": {
            "maxLength": 1500,
            "type": "string",
            "description": "Administrator comments",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Vacancy Create Request"
      },
      "VacancyDetailCreateRequest": {
        "title": "VacancyDetailCreate",
        "required": [
          "Date",
          "EndTime",
          "StartTime"
        ],
        "type": "object",
        "properties": {
          "vacancyReason": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "needsReplacement": {
            "type": "boolean",
            "description": "If this Vacancy needs to be open for a Substitute to fill"
          },
          "date": {
            "type": "string",
            "description": "The Date of this Detail",
            "format": "date-time"
          },
          "dayPartId": {
            "$ref": "#/components/schemas/DayPartEnum"
          },
          "startTime": {
            "type": "string",
            "description": "The time of day this Vacancy Detail begins",
            "format": "(hh:mm:ss)"
          },
          "endTime": {
            "type": "string",
            "description": "The time of day this Vacancy Detail ends",
            "format": "(hh:mm:ss)"
          },
          "accountingCodeAllocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VacancyAccountingCodeAllocationRequest"
            },
            "description": "Accounting code allocations",
            "nullable": true
          },
          "payCode": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          },
          "replacementEmployee": {
            "$ref": "#/components/schemas/Int32LocatorRequest"
          }
        },
        "additionalProperties": false,
        "description": "The Vacancy Date Details"
      },
      "VacancyDetailResponse": {
        "title": "VacancyDetail",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the Vacancy Detail",
            "format": "int64"
          },
          "assignmentId": {
            "type": "integer",
            "description": "Id of the Assignment",
            "format": "int64",
            "nullable": true
          },
          "substitute": {
            "$ref": "#/components/schemas/SimplePerson"
          },
          "externalAssignmentNumber": {
            "type": "string",
            "description": "Assignment number to match another system",
            "nullable": true
          },
          "assignmentIsLongTerm": {
            "type": "boolean",
            "description": "Is this assignment considered long term?",
            "nullable": true
          },
          "assignmentNotes": {
            "type": "string",
            "description": "Notes about this assignment",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "start": {
            "type": "string",
            "description": "When the Vacancy starts",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "When the Vacancy ends",
            "format": "date-time"
          },
          "actualDurationMinutes": {
            "type": "integer",
            "description": "How long the Vacancy Detail is scheduled (minutes)",
            "format": "int32"
          },
          "accountingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingCodeAllocationResponse"
            },
            "description": "The Accounting codes associated with the Vacancy",
            "nullable": true
          },
          "payDuration": {
            "type": "number",
            "description": "The Calculated Effective Duration (Days or Minutes)",
            "format": "double"
          },
          "payUnit": {
            "type": "string",
            "description": "The pay unit. ('DAYS', 'MINUTES')",
            "nullable": true
          },
          "payCode": {
            "$ref": "#/components/schemas/PayCodeResponse"
          },
          "vacancyReason": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "verified": {
            "type": "boolean",
            "description": "If the Vacancy has been verified"
          },
          "verifiedAtUtc": {
            "type": "string",
            "description": "When the Vacancy was verified",
            "format": "date-time",
            "nullable": true
          },
          "verifyComment": {
            "type": "string",
            "description": "Comment made when the Vacancy was verified",
            "nullable": true
          },
          "verifiedBy": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "approvalStatus": {
            "type": "string",
            "description": "The current approval status of the vacancy",
            "nullable": true,
            "deprecated": true
          },
          "approvalStatusId": {
            "$ref": "#/components/schemas/ApprovalStatusEnum"
          }
        },
        "additionalProperties": false,
        "description": "Vacancy Detail"
      },
      "VacancyDetailSearchResponse": {
        "title": "VacancyDetail",
        "type": "object",
        "properties": {
          "notesToAdmin": {
            "type": "string",
            "description": "Any notes to the admin",
            "nullable": true
          },
          "adminOnlyNotes": {
            "type": "string",
            "description": "Notes made by the admin",
            "nullable": true
          },
          "absenceDetail": {
            "$ref": "#/components/schemas/SimpleAbsenceDetail"
          },
          "vacancyId": {
            "type": "integer",
            "description": "Id of the Vacancy",
            "format": "int64"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "If the vacancy was deleted"
          },
          "position": {
            "$ref": "#/components/schemas/SimplePosition"
          },
          "createdUtc": {
            "type": "string",
            "description": "When the Vacancy Detail was created",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "description": "Id of the Vacancy Detail",
            "format": "int64"
          },
          "assignmentId": {
            "type": "integer",
            "description": "Id of the Assignment",
            "format": "int64",
            "nullable": true
          },
          "substitute": {
            "$ref": "#/components/schemas/SimplePerson"
          },
          "externalAssignmentNumber": {
            "type": "string",
            "description": "Assignment number to match another system",
            "nullable": true
          },
          "assignmentIsLongTerm": {
            "type": "boolean",
            "description": "Is this assignment considered long term?",
            "nullable": true
          },
          "assignmentNotes": {
            "type": "string",
            "description": "Notes about this assignment",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "start": {
            "type": "string",
            "description": "When the Vacancy starts",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "When the Vacancy ends",
            "format": "date-time"
          },
          "actualDurationMinutes": {
            "type": "integer",
            "description": "How long the Vacancy Detail is scheduled (minutes)",
            "format": "int32"
          },
          "accountingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingCodeAllocationResponse"
            },
            "description": "The Accounting codes associated with the Vacancy",
            "nullable": true
          },
          "payDuration": {
            "type": "number",
            "description": "The Calculated Effective Duration (Days or Minutes)",
            "format": "double"
          },
          "payUnit": {
            "type": "string",
            "description": "The pay unit. ('DAYS', 'MINUTES')",
            "nullable": true
          },
          "payCode": {
            "$ref": "#/components/schemas/PayCodeResponse"
          },
          "vacancyReason": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "verified": {
            "type": "boolean",
            "description": "If the Vacancy has been verified"
          },
          "verifiedAtUtc": {
            "type": "string",
            "description": "When the Vacancy was verified",
            "format": "date-time",
            "nullable": true
          },
          "verifyComment": {
            "type": "string",
            "description": "Comment made when the Vacancy was verified",
            "nullable": true
          },
          "verifiedBy": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "approvalStatus": {
            "type": "string",
            "description": "The current approval status of the vacancy",
            "nullable": true,
            "deprecated": true
          },
          "approvalStatusId": {
            "$ref": "#/components/schemas/ApprovalStatusEnum"
          }
        },
        "additionalProperties": false,
        "description": "Vacancy Detail"
      },
      "VacancyResponse": {
        "title": "Vacancy",
        "type": "object",
        "properties": {
          "position": {
            "$ref": "#/components/schemas/SimplePositionResponse"
          },
          "contract": {
            "$ref": "#/components/schemas/Int32IdNameClass"
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/ApprovalStatusEnum"
          },
          "isLongTerm": {
            "type": "boolean",
            "description": "If the Vacancy is long term"
          },
          "notesToReplacement": {
            "type": "string",
            "description": "Notes to the Substitute",
            "nullable": true
          },
          "adminOnlyNotes": {
            "type": "string",
            "description": "Notes for only Admins",
            "nullable": true,
            "deprecated": true
          },
          "administratorComments": {
            "type": "string",
            "description": "Administrator comments",
            "nullable": true
          },
          "allowSubToAcceptPart": {
            "type": "boolean",
            "description": "If the Vacancy can be accepted in parts",
            "nullable": true
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VacancyDetailResponse"
            },
            "description": "The Vacancy's Details",
            "nullable": true
          },
          "holdForManualFillUntilUtc": {
            "type": "string",
            "description": "When the Vacancy is held for manual fill",
            "format": "date-time",
            "nullable": true
          },
          "holdForAutoAssignUntilUtc": {
            "type": "string",
            "description": "When the Vacancy is held for auto assign",
            "format": "date-time",
            "nullable": true
          },
          "fillStatus": {
            "$ref": "#/components/schemas/FillStatusEnum"
          },
          "absenceId": {
            "type": "integer",
            "description": "The Vacancy's AbsenceId if it is correlated to one",
            "format": "int64",
            "nullable": true
          },
          "adminEditUrl": {
            "type": "string",
            "description": "The Url that the Admin can edit the Vacancy or Absence that it is associated with",
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Vacancy"
      },
      "WebhookCreateRequest": {
        "required": [
          "topic",
          "webhookUri"
        ],
        "type": "object",
        "properties": {
          "topic": {
            "minLength": 1,
            "type": "string",
            "description": "Webhook topics are structure like such `DOMAIN/ACTION`. \r\nSupported domains are `absence`, `vacancy`, `substitute_assignment`.\r\nSupported actions are `create`, `update`, `delete`."
          },
          "webhookUri": {
            "minLength": 1,
            "type": "string",
            "description": "The absolute uri that data will be posted to"
          },
          "basicAuthUsername": {
            "maxLength": 100,
            "type": "string",
            "description": "The Basic Auth username. If this is included, the Webhook POST requests will contain a Base64-encoded header of 'BasicAuthUsername:BasicAuthPassword'. (Optional)",
            "nullable": true
          },
          "basicAuthPassword": {
            "maxLength": 100,
            "type": "string",
            "description": "The Basic Auth username. If this is included, the Webhook POST requests will contain a Base64-encoded header of 'BasicAuthUsername:BasicAuthPassword'. (Optional)",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this Webhook is active. If it is inactive, no data will be posted to it",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookResponse": {
        "type": "object",
        "properties": {
          "webhookUri": {
            "type": "string",
            "description": "The absolute uri that data will be posted to",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The Id of the Webhook (Guid)",
            "format": "uuid"
          },
          "version": {
            "type": "string",
            "description": "The version of the webhook",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "When the webhook was created",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "When the webhook was last updated",
            "format": "date-time"
          },
          "topic": {
            "type": "string",
            "description": "Webhook topics are structure like such `DOMAIN/ACTION`. \r\nSupported domains are `absence`, `vacancy`, `substitute_assignment`.\r\nSupported actions are `create`, `update`, `delete`.",
            "nullable": true
          },
          "basicAuthUsername": {
            "maxLength": 100,
            "type": "string",
            "description": "The Basic Auth username for the Basic Auth header that will be included in the Webhook payload",
            "nullable": true
          },
          "basicAuthPassword": {
            "maxLength": 100,
            "type": "string",
            "description": "The Basic Auth password for the Basic Auth header that will be included in the Webhook payload",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "If the Webhook is active"
          }
        },
        "additionalProperties": false
      },
      "WebhookUpdateRequest": {
        "required": [
          "webhookUri"
        ],
        "type": "object",
        "properties": {
          "webhookUri": {
            "minLength": 1,
            "type": "string",
            "description": "The absolute uri that data will be posted to"
          },
          "basicAuthUsername": {
            "maxLength": 100,
            "type": "string",
            "description": "The Basic Auth username. If this is included, the Webhook POST requests will contain a Base64-encoded header of 'BasicAuthUsername:BasicAuthPassword'. (Optional)",
            "nullable": true
          },
          "basicAuthPassword": {
            "maxLength": 100,
            "type": "string",
            "description": "The Basic Auth username. If this is included, the Webhook POST requests will contain a Base64-encoded header of 'BasicAuthUsername:BasicAuthPassword'. (Optional)",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this Webhook is active. If it is inactive, no data will be posted to it",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "http",
        "description": "Enter username and password",
        "scheme": "basic"
      },
      "apiKey": {
        "type": "http",
        "description": " Requires an ApiKey",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "basic": []
    }
  ],
  "tags": [
    {
      "name": "Absence",
      "description": "When an employee is not able to show up to their scheduled position, they create an Absence"
    },
    {
      "name": "AbsenceReasonBalance",
      "description": "Employees have balances for the different absence reasons they are assigned"
    },
    {
      "name": "AbsenceReason",
      "description": " When an employee takes an absence, they must select the reason for their absence"
    },
    {
      "name": "Assignment",
      "description": "An assignment is the link between a substitute and a vacancy"
    },
    {
      "name": "Connection",
      "description": "Data connections"
    },
    {
      "name": "ReferenceData",
      "description": "Organizational reference data"
    },
    {
      "name": "User",
      "description": "Manage the organizational user along with their roles (admin, employee, and substitute)"
    },
    {
      "name": "Vacancy",
      "description": "Vacancies are openings that are able to be filled by substitutes"
    },
    {
      "name": "PayCode",
      "description": "Pay codes for substitutes"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Domain",
      "tags": [
        "Absence",
        "Absence Reason",
        "Absence Reason Balance",
        "Assignment",
        "Organization",
        "User",
        "Vacancy"
      ]
    },
    {
      "name": "Reference Data",
      "tags": [
        "Attribute",
        "Pay Code"
      ]
    },
    {
      "name": "Data",
      "tags": [
        "Connection",
        "Webhooks"
      ]
    }
  ]
}
