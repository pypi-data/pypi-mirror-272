# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from redrover_api.models.int32_id_name_class import Int32IdNameClass
from redrover_api.models.vacancy_response import VacancyResponse

class AssignmentResponse(BaseModel):
    """
    Assignment  # noqa: E501
    """
    employee: Optional[Int32IdNameClass] = None
    position: Optional[Int32IdNameClass] = None
    contract: Optional[Int32IdNameClass] = None
    vacancy: Optional[VacancyResponse] = None
    start_time_local: Optional[datetime] = Field(None, alias="startTimeLocal", description="When the Assignment starts (local time)")
    end_time_local: Optional[datetime] = Field(None, alias="endTimeLocal", description="When the Assignment ends (local time)")
    is_long_term: Optional[StrictBool] = Field(None, alias="isLongTerm", description="Is the Assignment classified as a long-term assignment")
    cancelled_at_utc: Optional[datetime] = Field(None, alias="cancelledAtUtc", description="When was the Assignment cancelled")
    id: Optional[StrictInt] = None
    external_id: Optional[StrictStr] = Field(None, alias="externalId")
    __properties = ["employee", "position", "contract", "vacancy", "startTimeLocal", "endTimeLocal", "isLongTerm", "cancelledAtUtc", "id", "externalId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AssignmentResponse:
        """Create an instance of AssignmentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of employee
        if self.employee:
            _dict['employee'] = self.employee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vacancy
        if self.vacancy:
            _dict['vacancy'] = self.vacancy.to_dict()
        # set to None if cancelled_at_utc (nullable) is None
        # and __fields_set__ contains the field
        if self.cancelled_at_utc is None and "cancelled_at_utc" in self.__fields_set__:
            _dict['cancelledAtUtc'] = None

        # set to None if external_id (nullable) is None
        # and __fields_set__ contains the field
        if self.external_id is None and "external_id" in self.__fields_set__:
            _dict['externalId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AssignmentResponse:
        """Create an instance of AssignmentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AssignmentResponse.parse_obj(obj)

        _obj = AssignmentResponse.parse_obj({
            "employee": Int32IdNameClass.from_dict(obj.get("employee")) if obj.get("employee") is not None else None,
            "position": Int32IdNameClass.from_dict(obj.get("position")) if obj.get("position") is not None else None,
            "contract": Int32IdNameClass.from_dict(obj.get("contract")) if obj.get("contract") is not None else None,
            "vacancy": VacancyResponse.from_dict(obj.get("vacancy")) if obj.get("vacancy") is not None else None,
            "start_time_local": obj.get("startTimeLocal"),
            "end_time_local": obj.get("endTimeLocal"),
            "is_long_term": obj.get("isLongTerm"),
            "cancelled_at_utc": obj.get("cancelledAtUtc"),
            "id": obj.get("id"),
            "external_id": obj.get("externalId")
        })
        return _obj


