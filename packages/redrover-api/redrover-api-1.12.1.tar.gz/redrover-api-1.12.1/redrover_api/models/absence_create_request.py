# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist, constr
from redrover_api.models.absence_detail_create_request import AbsenceDetailCreateRequest
from redrover_api.models.absence_vacancy_request import AbsenceVacancyRequest
from redrover_api.models.int32_locator_request import Int32LocatorRequest

class AbsenceCreateRequest(BaseModel):
    """
    AbsenceCreateRequest
    """
    validate_only: Optional[StrictBool] = Field(False, alias="validateOnly", description="When set, this will only validate the Absence and will not save it. (default: false)")
    external_id: Optional[constr(strict=True, max_length=50)] = Field(None, alias="externalId", description="The external identifier to the Absence")
    employee: Optional[Int32LocatorRequest] = None
    notes_to_approver: Optional[constr(strict=True, max_length=1500)] = Field(None, alias="notesToApprover", description="Notes that will be shown to the individual who approves the Absence")
    admin_only_notes: Optional[constr(strict=True, max_length=1500)] = Field(None, alias="adminOnlyNotes", description="Notes that will be only shown to Admins")
    details: Optional[conlist(AbsenceDetailCreateRequest)] = Field(None, description="The specific details of the Absence")
    start_date: Optional[datetime] = Field(None, alias="startDate", description="The date that the absence begins")
    end_date: Optional[datetime] = Field(None, alias="endDate", description="The date that the absence ends")
    vacancies: Optional[conlist(AbsenceVacancyRequest)] = Field(None, description="Assign a substitute to the Absence")
    __properties = ["validateOnly", "externalId", "employee", "notesToApprover", "adminOnlyNotes", "details", "startDate", "endDate", "vacancies"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AbsenceCreateRequest:
        """Create an instance of AbsenceCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of employee
        if self.employee:
            _dict['employee'] = self.employee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vacancies (list)
        _items = []
        if self.vacancies:
            for _item in self.vacancies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vacancies'] = _items
        # set to None if external_id (nullable) is None
        # and __fields_set__ contains the field
        if self.external_id is None and "external_id" in self.__fields_set__:
            _dict['externalId'] = None

        # set to None if notes_to_approver (nullable) is None
        # and __fields_set__ contains the field
        if self.notes_to_approver is None and "notes_to_approver" in self.__fields_set__:
            _dict['notesToApprover'] = None

        # set to None if admin_only_notes (nullable) is None
        # and __fields_set__ contains the field
        if self.admin_only_notes is None and "admin_only_notes" in self.__fields_set__:
            _dict['adminOnlyNotes'] = None

        # set to None if vacancies (nullable) is None
        # and __fields_set__ contains the field
        if self.vacancies is None and "vacancies" in self.__fields_set__:
            _dict['vacancies'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AbsenceCreateRequest:
        """Create an instance of AbsenceCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AbsenceCreateRequest.parse_obj(obj)

        _obj = AbsenceCreateRequest.parse_obj({
            "validate_only": obj.get("validateOnly") if obj.get("validateOnly") is not None else False,
            "external_id": obj.get("externalId"),
            "employee": Int32LocatorRequest.from_dict(obj.get("employee")) if obj.get("employee") is not None else None,
            "notes_to_approver": obj.get("notesToApprover"),
            "admin_only_notes": obj.get("adminOnlyNotes"),
            "details": [AbsenceDetailCreateRequest.from_dict(_item) for _item in obj.get("details")] if obj.get("details") is not None else None,
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "vacancies": [AbsenceVacancyRequest.from_dict(_item) for _item in obj.get("vacancies")] if obj.get("vacancies") is not None else None
        })
        return _obj


