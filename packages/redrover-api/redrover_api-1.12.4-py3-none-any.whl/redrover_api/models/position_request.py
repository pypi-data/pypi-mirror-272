# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from redrover_api.models.accounting_code_allocation_request import AccountingCodeAllocationRequest
from redrover_api.models.int32_locator_request import Int32LocatorRequest
from redrover_api.models.position_job_request import PositionJobRequest
from redrover_api.models.position_schedule_mode_enum import PositionScheduleModeEnum
from redrover_api.models.position_schedule_request import PositionScheduleRequest

class PositionRequest(BaseModel):
    """
    PositionRequest
    """
    external_id: Optional[StrictStr] = Field(None, alias="externalId", description="The external Id of SchoolYear (alpha-numeric)")
    name: Optional[StrictStr] = Field(None, description="The Position's name")
    position_schedule_mode_id: Optional[PositionScheduleModeEnum] = Field(None, alias="positionScheduleModeId")
    contract: Int32LocatorRequest = Field(...)
    position_type: Int32LocatorRequest = Field(..., alias="positionType")
    hours_per_full_work_day: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="hoursPerFullWorkDay", description="Amount of hours per a full workday (hours)")
    needs_replacement: Optional[StrictInt] = Field(None, alias="needsReplacement")
    start_date: Optional[datetime] = Field(None, alias="startDate", description="The StartDate of the Position")
    end_date: Optional[datetime] = Field(None, alias="endDate", description="The EndDate of the Position")
    is_staff_augmentation: Optional[StrictBool] = Field(None, alias="isStaffAugmentation", description="Is the Position for staff augmentation")
    fte: Optional[Union[StrictFloat, StrictInt]] = None
    qualified_for_pto: Optional[StrictBool] = Field(None, alias="qualifiedForPto", description="Is the Position qualified for paid time off")
    qualified_for_paid_holidays: Optional[StrictBool] = Field(None, alias="qualifiedForPaidHolidays", description="Is the Position qualified for holidays")
    qualified_for_pto_as_of: Optional[datetime] = Field(None, alias="qualifiedForPtoAsOf", description="The effective date that the Position qualifies for paid time off (If not included, the default is that it is always qualified)")
    qualified_for_paid_holidays_as_of: Optional[datetime] = Field(None, alias="qualifiedForPaidHolidaysAsOf", description="The effective date that the Position qualifies for holidays (If not included, the default is that it is always qualified)")
    default_job_pay_override: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="defaultJobPayOverride")
    code: Optional[StrictStr] = Field(None, description="The 'Code' for the Position.")
    schedules: conlist(PositionScheduleRequest) = Field(..., description="The Schedules for the Position")
    replace_existing_position_jobs: Optional[StrictBool] = Field(None, alias="replaceExistingPositionJobs", description="If existing Position Jobs are to be replaced. (Default is true)")
    allowed_location_ids: Optional[conlist(Int32LocatorRequest)] = Field(None, alias="allowedLocationIds", description="Locations the Position is granted")
    other_jobs: Optional[conlist(PositionJobRequest)] = Field(None, alias="otherJobs", description="Other Jobs")
    primary_job: Optional[PositionJobRequest] = Field(None, alias="primaryJob")
    accounting_code_allocations: Optional[conlist(AccountingCodeAllocationRequest)] = Field(None, alias="accountingCodeAllocations", description="The Accounting Code Allocation for this position")
    __properties = ["externalId", "name", "positionScheduleModeId", "contract", "positionType", "hoursPerFullWorkDay", "needsReplacement", "startDate", "endDate", "isStaffAugmentation", "fte", "qualifiedForPto", "qualifiedForPaidHolidays", "qualifiedForPtoAsOf", "qualifiedForPaidHolidaysAsOf", "defaultJobPayOverride", "code", "schedules", "replaceExistingPositionJobs", "allowedLocationIds", "otherJobs", "primaryJob", "accountingCodeAllocations"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PositionRequest:
        """Create an instance of PositionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "is_staff_augmentation",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position_type
        if self.position_type:
            _dict['positionType'] = self.position_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in schedules (list)
        _items = []
        if self.schedules:
            for _item in self.schedules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['schedules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_location_ids (list)
        _items = []
        if self.allowed_location_ids:
            for _item in self.allowed_location_ids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedLocationIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in other_jobs (list)
        _items = []
        if self.other_jobs:
            for _item in self.other_jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['otherJobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of primary_job
        if self.primary_job:
            _dict['primaryJob'] = self.primary_job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in accounting_code_allocations (list)
        _items = []
        if self.accounting_code_allocations:
            for _item in self.accounting_code_allocations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountingCodeAllocations'] = _items
        # set to None if external_id (nullable) is None
        # and __fields_set__ contains the field
        if self.external_id is None and "external_id" in self.__fields_set__:
            _dict['externalId'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if hours_per_full_work_day (nullable) is None
        # and __fields_set__ contains the field
        if self.hours_per_full_work_day is None and "hours_per_full_work_day" in self.__fields_set__:
            _dict['hoursPerFullWorkDay'] = None

        # set to None if start_date (nullable) is None
        # and __fields_set__ contains the field
        if self.start_date is None and "start_date" in self.__fields_set__:
            _dict['startDate'] = None

        # set to None if end_date (nullable) is None
        # and __fields_set__ contains the field
        if self.end_date is None and "end_date" in self.__fields_set__:
            _dict['endDate'] = None

        # set to None if is_staff_augmentation (nullable) is None
        # and __fields_set__ contains the field
        if self.is_staff_augmentation is None and "is_staff_augmentation" in self.__fields_set__:
            _dict['isStaffAugmentation'] = None

        # set to None if fte (nullable) is None
        # and __fields_set__ contains the field
        if self.fte is None and "fte" in self.__fields_set__:
            _dict['fte'] = None

        # set to None if qualified_for_pto (nullable) is None
        # and __fields_set__ contains the field
        if self.qualified_for_pto is None and "qualified_for_pto" in self.__fields_set__:
            _dict['qualifiedForPto'] = None

        # set to None if qualified_for_paid_holidays (nullable) is None
        # and __fields_set__ contains the field
        if self.qualified_for_paid_holidays is None and "qualified_for_paid_holidays" in self.__fields_set__:
            _dict['qualifiedForPaidHolidays'] = None

        # set to None if qualified_for_pto_as_of (nullable) is None
        # and __fields_set__ contains the field
        if self.qualified_for_pto_as_of is None and "qualified_for_pto_as_of" in self.__fields_set__:
            _dict['qualifiedForPtoAsOf'] = None

        # set to None if qualified_for_paid_holidays_as_of (nullable) is None
        # and __fields_set__ contains the field
        if self.qualified_for_paid_holidays_as_of is None and "qualified_for_paid_holidays_as_of" in self.__fields_set__:
            _dict['qualifiedForPaidHolidaysAsOf'] = None

        # set to None if default_job_pay_override (nullable) is None
        # and __fields_set__ contains the field
        if self.default_job_pay_override is None and "default_job_pay_override" in self.__fields_set__:
            _dict['defaultJobPayOverride'] = None

        # set to None if code (nullable) is None
        # and __fields_set__ contains the field
        if self.code is None and "code" in self.__fields_set__:
            _dict['code'] = None

        # set to None if allowed_location_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.allowed_location_ids is None and "allowed_location_ids" in self.__fields_set__:
            _dict['allowedLocationIds'] = None

        # set to None if other_jobs (nullable) is None
        # and __fields_set__ contains the field
        if self.other_jobs is None and "other_jobs" in self.__fields_set__:
            _dict['otherJobs'] = None

        # set to None if accounting_code_allocations (nullable) is None
        # and __fields_set__ contains the field
        if self.accounting_code_allocations is None and "accounting_code_allocations" in self.__fields_set__:
            _dict['accountingCodeAllocations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PositionRequest:
        """Create an instance of PositionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PositionRequest.parse_obj(obj)

        _obj = PositionRequest.parse_obj({
            "external_id": obj.get("externalId"),
            "name": obj.get("name"),
            "position_schedule_mode_id": obj.get("positionScheduleModeId"),
            "contract": Int32LocatorRequest.from_dict(obj.get("contract")) if obj.get("contract") is not None else None,
            "position_type": Int32LocatorRequest.from_dict(obj.get("positionType")) if obj.get("positionType") is not None else None,
            "hours_per_full_work_day": obj.get("hoursPerFullWorkDay"),
            "needs_replacement": obj.get("needsReplacement"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "is_staff_augmentation": obj.get("isStaffAugmentation"),
            "fte": obj.get("fte"),
            "qualified_for_pto": obj.get("qualifiedForPto"),
            "qualified_for_paid_holidays": obj.get("qualifiedForPaidHolidays"),
            "qualified_for_pto_as_of": obj.get("qualifiedForPtoAsOf"),
            "qualified_for_paid_holidays_as_of": obj.get("qualifiedForPaidHolidaysAsOf"),
            "default_job_pay_override": obj.get("defaultJobPayOverride"),
            "code": obj.get("code"),
            "schedules": [PositionScheduleRequest.from_dict(_item) for _item in obj.get("schedules")] if obj.get("schedules") is not None else None,
            "replace_existing_position_jobs": obj.get("replaceExistingPositionJobs"),
            "allowed_location_ids": [Int32LocatorRequest.from_dict(_item) for _item in obj.get("allowedLocationIds")] if obj.get("allowedLocationIds") is not None else None,
            "other_jobs": [PositionJobRequest.from_dict(_item) for _item in obj.get("otherJobs")] if obj.get("otherJobs") is not None else None,
            "primary_job": PositionJobRequest.from_dict(obj.get("primaryJob")) if obj.get("primaryJob") is not None else None,
            "accounting_code_allocations": [AccountingCodeAllocationRequest.from_dict(_item) for _item in obj.get("accountingCodeAllocations")] if obj.get("accountingCodeAllocations") is not None else None
        })
        return _obj


