# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist

from typing import Optional, Union

from redrover_api.models.file_format import FileFormat

from redrover_api.api_client import ApiClient
from redrover_api.api_response import ApiResponse
from redrover_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ConnectionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def download_report(self, id : StrictInt, org_id : StrictStr, file_format : Annotated[Optional[FileFormat], Field(description="File format type. (Delimited, Flat)")] = None, include_headers : Annotated[Optional[StrictBool], Field(description="Whether to include headers on the report")] = None, now_utc : Optional[datetime] = None, request_body : Optional[conlist(StrictStr)] = None, **kwargs) -> bytearray:  # noqa: E501
        """Download Report  # noqa: E501

        Download an existing report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_report(id, org_id, file_format, include_headers, now_utc, request_body, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param org_id: (required)
        :type org_id: str
        :param file_format: File format type. (Delimited, Flat)
        :type file_format: FileFormat
        :param include_headers: Whether to include headers on the report
        :type include_headers: bool
        :param now_utc:
        :type now_utc: datetime
        :param request_body:
        :type request_body: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the download_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.download_report_with_http_info(id, org_id, file_format, include_headers, now_utc, request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def download_report_with_http_info(self, id : StrictInt, org_id : StrictStr, file_format : Annotated[Optional[FileFormat], Field(description="File format type. (Delimited, Flat)")] = None, include_headers : Annotated[Optional[StrictBool], Field(description="Whether to include headers on the report")] = None, now_utc : Optional[datetime] = None, request_body : Optional[conlist(StrictStr)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Report  # noqa: E501

        Download an existing report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_report_with_http_info(id, org_id, file_format, include_headers, now_utc, request_body, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param org_id: (required)
        :type org_id: str
        :param file_format: File format type. (Delimited, Flat)
        :type file_format: FileFormat
        :param include_headers: Whether to include headers on the report
        :type include_headers: bool
        :param now_utc:
        :type now_utc: datetime
        :param request_body:
        :type request_body: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'org_id',
            'file_format',
            'include_headers',
            'now_utc',
            'request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        if _params.get('file_format') is not None:  # noqa: E501
            _query_params.append(('fileFormat', _params['file_format'].value))

        if _params.get('include_headers') is not None:  # noqa: E501
            _query_params.append(('includeHeaders', _params['include_headers']))

        if _params.get('now_utc') is not None:  # noqa: E501
            if isinstance(_params['now_utc'], datetime):
                _query_params.append(('nowUtc', _params['now_utc'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('nowUtc', _params['now_utc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body'] is not None:
            _body_params = _params['request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '401': None,
            '403': "ForbidResult",
            '404': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/Connection/{id}/download', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def download_report_0(self, id : StrictInt, org_id : StrictStr, file_format : Annotated[Optional[FileFormat], Field(description="File format type. (Delimited, Flat)")] = None, include_headers : Annotated[Optional[StrictBool], Field(description="Whether to include headers on the report")] = None, now_utc : Optional[datetime] = None, request_body : Optional[conlist(StrictStr)] = None, **kwargs) -> bytearray:  # noqa: E501
        """Download Report  # noqa: E501

        Download an existing report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_report_0(id, org_id, file_format, include_headers, now_utc, request_body, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param org_id: (required)
        :type org_id: str
        :param file_format: File format type. (Delimited, Flat)
        :type file_format: FileFormat
        :param include_headers: Whether to include headers on the report
        :type include_headers: bool
        :param now_utc:
        :type now_utc: datetime
        :param request_body:
        :type request_body: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the download_report_0_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.download_report_0_with_http_info(id, org_id, file_format, include_headers, now_utc, request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def download_report_0_with_http_info(self, id : StrictInt, org_id : StrictStr, file_format : Annotated[Optional[FileFormat], Field(description="File format type. (Delimited, Flat)")] = None, include_headers : Annotated[Optional[StrictBool], Field(description="Whether to include headers on the report")] = None, now_utc : Optional[datetime] = None, request_body : Optional[conlist(StrictStr)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Report  # noqa: E501

        Download an existing report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_report_0_with_http_info(id, org_id, file_format, include_headers, now_utc, request_body, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param org_id: (required)
        :type org_id: str
        :param file_format: File format type. (Delimited, Flat)
        :type file_format: FileFormat
        :param include_headers: Whether to include headers on the report
        :type include_headers: bool
        :param now_utc:
        :type now_utc: datetime
        :param request_body:
        :type request_body: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'org_id',
            'file_format',
            'include_headers',
            'now_utc',
            'request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_report_0" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        if _params.get('file_format') is not None:  # noqa: E501
            _query_params.append(('fileFormat', _params['file_format'].value))

        if _params.get('include_headers') is not None:  # noqa: E501
            _query_params.append(('includeHeaders', _params['include_headers']))

        if _params.get('now_utc') is not None:  # noqa: E501
            if isinstance(_params['now_utc'], datetime):
                _query_params.append(('nowUtc', _params['now_utc'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('nowUtc', _params['now_utc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body'] is not None:
            _body_params = _params['request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '401': None,
            '403': "ForbidResult",
            '404': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/Connection/{id}/download', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_report_data(self, id : StrictInt, pascal_case : Annotated[StrictBool, Field(..., description="Pascal Case results")], org_id : StrictStr, accept : Optional[StrictStr] = None, now_utc : Annotated[Optional[datetime], Field(description="The 'now' date")] = None, request_body : Optional[conlist(StrictStr)] = None, **kwargs) -> None:  # noqa: E501
        """Posts Report  # noqa: E501

        Supply the date filter as the request body in the following JSON string array format.  (The content type for the body should be “application/json”.) For e.g. (`[\"Date BETWEEN '2020-07-01' AND '2020-07-30'\"]`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_report_data(id, pascal_case, org_id, accept, now_utc, request_body, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param pascal_case: Pascal Case results (required)
        :type pascal_case: bool
        :param org_id: (required)
        :type org_id: str
        :param accept:
        :type accept: str
        :param now_utc: The 'now' date
        :type now_utc: datetime
        :param request_body:
        :type request_body: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the post_report_data_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.post_report_data_with_http_info(id, pascal_case, org_id, accept, now_utc, request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def post_report_data_with_http_info(self, id : StrictInt, pascal_case : Annotated[StrictBool, Field(..., description="Pascal Case results")], org_id : StrictStr, accept : Optional[StrictStr] = None, now_utc : Annotated[Optional[datetime], Field(description="The 'now' date")] = None, request_body : Optional[conlist(StrictStr)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Posts Report  # noqa: E501

        Supply the date filter as the request body in the following JSON string array format.  (The content type for the body should be “application/json”.) For e.g. (`[\"Date BETWEEN '2020-07-01' AND '2020-07-30'\"]`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_report_data_with_http_info(id, pascal_case, org_id, accept, now_utc, request_body, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param pascal_case: Pascal Case results (required)
        :type pascal_case: bool
        :param org_id: (required)
        :type org_id: str
        :param accept:
        :type accept: str
        :param now_utc: The 'now' date
        :type now_utc: datetime
        :param request_body:
        :type request_body: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'pascal_case',
            'org_id',
            'accept',
            'now_utc',
            'request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_report_data" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        if _params.get('pascal_case') is not None:  # noqa: E501
            _query_params.append(('pascalCase', _params['pascal_case']))

        if _params.get('now_utc') is not None:  # noqa: E501
            if isinstance(_params['now_utc'], datetime):
                _query_params.append(('nowUtc', _params['now_utc'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('nowUtc', _params['now_utc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept'] is not None:
            _header_params['accept'] = _params['accept']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body'] is not None:
            _body_params = _params['request_body']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/{orgId}/Connection/{id}/data', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def run_report(self, id : Annotated[StrictInt, Field(..., description="The Id of the Report that will be run")], org_id : StrictStr, now_utc : Optional[datetime] = None, request_body : Optional[conlist(StrictStr)] = None, **kwargs) -> bytearray:  # noqa: E501
        """Run Report  # noqa: E501

        Run a report and receive a file download  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.run_report(id, org_id, now_utc, request_body, async_req=True)
        >>> result = thread.get()

        :param id: The Id of the Report that will be run (required)
        :type id: int
        :param org_id: (required)
        :type org_id: str
        :param now_utc:
        :type now_utc: datetime
        :param request_body:
        :type request_body: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the run_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.run_report_with_http_info(id, org_id, now_utc, request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def run_report_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The Id of the Report that will be run")], org_id : StrictStr, now_utc : Optional[datetime] = None, request_body : Optional[conlist(StrictStr)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Run Report  # noqa: E501

        Run a report and receive a file download  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.run_report_with_http_info(id, org_id, now_utc, request_body, async_req=True)
        >>> result = thread.get()

        :param id: The Id of the Report that will be run (required)
        :type id: int
        :param org_id: (required)
        :type org_id: str
        :param now_utc:
        :type now_utc: datetime
        :param request_body:
        :type request_body: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'org_id',
            'now_utc',
            'request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        if _params.get('now_utc') is not None:  # noqa: E501
            if isinstance(_params['now_utc'], datetime):
                _query_params.append(('nowUtc', _params['now_utc'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('nowUtc', _params['now_utc']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body'] is not None:
            _body_params = _params['request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '401': None,
            '403': "ForbidResult",
            '404': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/Connection/{id}/run', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
