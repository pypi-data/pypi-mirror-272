# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist

from typing import List, Optional

from redrover_api.models.administrator_request import AdministratorRequest
from redrover_api.models.administrator_response import AdministratorResponse
from redrover_api.models.employee_request import EmployeeRequest
from redrover_api.models.employee_response import EmployeeResponse
from redrover_api.models.ok_result import OkResult
from redrover_api.models.substitute_request import SubstituteRequest
from redrover_api.models.substitute_response import SubstituteResponse
from redrover_api.models.user_roles import UserRoles

from redrover_api.api_client import ApiClient
from redrover_api.api_response import ApiResponse
from redrover_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class UserApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_admin(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], administrator_request : Optional[AdministratorRequest] = None, **kwargs) -> AdministratorResponse:  # noqa: E501
        """Creates Administrator  # noqa: E501

        Create an Administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_admin(org_id, administrator_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param administrator_request:
        :type administrator_request: AdministratorRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AdministratorResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_admin_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_admin_with_http_info(org_id, administrator_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_admin_with_http_info(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], administrator_request : Optional[AdministratorRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Creates Administrator  # noqa: E501

        Create an Administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_admin_with_http_info(org_id, administrator_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param administrator_request:
        :type administrator_request: AdministratorRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AdministratorResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'administrator_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_admin" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['administrator_request'] is not None:
            _body_params = _params['administrator_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "AdministratorResponse",
            '400': None,
            '401': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/administrator', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_employee(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], employee_request : Optional[EmployeeRequest] = None, **kwargs) -> EmployeeResponse:  # noqa: E501
        """Creates Employee  # noqa: E501

        Create an Employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_employee(org_id, employee_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_request:
        :type employee_request: EmployeeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EmployeeResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_employee_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_employee_with_http_info(org_id, employee_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_employee_with_http_info(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], employee_request : Optional[EmployeeRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Creates Employee  # noqa: E501

        Create an Employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_employee_with_http_info(org_id, employee_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_request:
        :type employee_request: EmployeeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EmployeeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'employee_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_employee" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['employee_request'] is not None:
            _body_params = _params['employee_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "EmployeeResponse",
            '400': None,
            '401': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/employee', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_substitute(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], substitute_request : Optional[SubstituteRequest] = None, **kwargs) -> SubstituteResponse:  # noqa: E501
        """Creates Substitute  # noqa: E501

        Creates a Substitute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_substitute(org_id, substitute_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param substitute_request:
        :type substitute_request: SubstituteRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SubstituteResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_substitute_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_substitute_with_http_info(org_id, substitute_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_substitute_with_http_info(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], substitute_request : Optional[SubstituteRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Creates Substitute  # noqa: E501

        Creates a Substitute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_substitute_with_http_info(org_id, substitute_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param substitute_request:
        :type substitute_request: SubstituteRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SubstituteResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'substitute_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_substitute" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['substitute_request'] is not None:
            _body_params = _params['substitute_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "SubstituteResponse",
            '400': None,
            '401': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/substitute', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_user(self, identifier : StrictStr, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], **kwargs) -> OkResult:  # noqa: E501
        """Deletes User  # noqa: E501

        Delete a user by their Red Rover Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_user(identifier, org_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OkResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_user_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_user_with_http_info(identifier, org_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_user_with_http_info(self, identifier : StrictStr, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], **kwargs) -> ApiResponse:  # noqa: E501
        """Deletes User  # noqa: E501

        Delete a user by their Red Rover Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_user_with_http_info(identifier, org_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OkResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identifier',
            'org_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identifier'] is not None:
            _path_params['identifier'] = _params['identifier']

        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "OkResult",
            '404': "NotFoundResult",
            '401': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/{identifier}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_user_role(self, identifier : StrictStr, role : UserRoles, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], **kwargs) -> OkResult:  # noqa: E501
        """Deletes User's Role  # noqa: E501

        Delete a user's role by their Red Rover Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_user_role(identifier, role, org_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param role: (required)
        :type role: UserRoles
        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OkResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_user_role_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_user_role_with_http_info(identifier, role, org_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_user_role_with_http_info(self, identifier : StrictStr, role : UserRoles, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], **kwargs) -> ApiResponse:  # noqa: E501
        """Deletes User's Role  # noqa: E501

        Delete a user's role by their Red Rover Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_user_role_with_http_info(identifier, role, org_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param role: (required)
        :type role: UserRoles
        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OkResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identifier',
            'role',
            'org_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_role" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identifier'] is not None:
            _path_params['identifier'] = _params['identifier']

        if _params['role'] is not None:
            _path_params['role'] = _params['role']

        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "OkResult",
            '404': "NotFoundResult",
            '401': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/{identifier}/{role}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_admin(self, identifier : StrictStr, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], **kwargs) -> AdministratorResponse:  # noqa: E501
        """Gets Administrator  # noqa: E501

        Get an Administrator by their Red Rover Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_admin(identifier, org_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AdministratorResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_admin_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_admin_with_http_info(identifier, org_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_admin_with_http_info(self, identifier : StrictStr, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], **kwargs) -> ApiResponse:  # noqa: E501
        """Gets Administrator  # noqa: E501

        Get an Administrator by their Red Rover Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_admin_with_http_info(identifier, org_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AdministratorResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identifier',
            'org_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_admin" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identifier'] is not None:
            _path_params['identifier'] = _params['identifier']

        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "AdministratorResponse",
            '401': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/administrator/{identifier}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_employee(self, identifier : StrictStr, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], **kwargs) -> EmployeeResponse:  # noqa: E501
        """Gets Employee  # noqa: E501

        Get an Employee by their Red Rover Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_employee(identifier, org_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EmployeeResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_employee_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_employee_with_http_info(identifier, org_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_employee_with_http_info(self, identifier : StrictStr, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], **kwargs) -> ApiResponse:  # noqa: E501
        """Gets Employee  # noqa: E501

        Get an Employee by their Red Rover Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_employee_with_http_info(identifier, org_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EmployeeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identifier',
            'org_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_employee" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identifier'] is not None:
            _path_params['identifier'] = _params['identifier']

        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "EmployeeResponse",
            '401': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/employee/{identifier}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_substitute(self, identifier : StrictStr, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], **kwargs) -> SubstituteResponse:  # noqa: E501
        """Get Substitute by Id  # noqa: E501

        Get a Substitute by their Red Rover Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_substitute(identifier, org_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SubstituteResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_substitute_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_substitute_with_http_info(identifier, org_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_substitute_with_http_info(self, identifier : StrictStr, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Substitute by Id  # noqa: E501

        Get a Substitute by their Red Rover Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_substitute_with_http_info(identifier, org_id, async_req=True)
        >>> result = thread.get()

        :param identifier: (required)
        :type identifier: str
        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SubstituteResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identifier',
            'org_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_substitute" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identifier'] is not None:
            _path_params['identifier'] = _params['identifier']

        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "SubstituteResponse",
            '401': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/substitute/{identifier}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_substitutes(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], active : Annotated[Optional[StrictBool], Field(description="If the Substitute is active")] = None, has_related_to_org_ids_any : Optional[conlist(StrictInt)] = None, has_attribute_external_ids_any : Optional[conlist(StrictStr)] = None, limit : Annotated[Optional[StrictInt], Field(description="Limit. For pagination purposes")] = None, offset : Annotated[Optional[StrictInt], Field(description="Offset. For pagination purposes")] = None, **kwargs) -> List[SubstituteResponse]:  # noqa: E501
        """Query for Substitutes  # noqa: E501

        Query for Substitutes based on search criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_substitutes(org_id, active, has_related_to_org_ids_any, has_attribute_external_ids_any, limit, offset, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param active: If the Substitute is active
        :type active: bool
        :param has_related_to_org_ids_any:
        :type has_related_to_org_ids_any: List[int]
        :param has_attribute_external_ids_any:
        :type has_attribute_external_ids_any: List[str]
        :param limit: Limit. For pagination purposes
        :type limit: int
        :param offset: Offset. For pagination purposes
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[SubstituteResponse]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_substitutes_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_substitutes_with_http_info(org_id, active, has_related_to_org_ids_any, has_attribute_external_ids_any, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def get_substitutes_with_http_info(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], active : Annotated[Optional[StrictBool], Field(description="If the Substitute is active")] = None, has_related_to_org_ids_any : Optional[conlist(StrictInt)] = None, has_attribute_external_ids_any : Optional[conlist(StrictStr)] = None, limit : Annotated[Optional[StrictInt], Field(description="Limit. For pagination purposes")] = None, offset : Annotated[Optional[StrictInt], Field(description="Offset. For pagination purposes")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Query for Substitutes  # noqa: E501

        Query for Substitutes based on search criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_substitutes_with_http_info(org_id, active, has_related_to_org_ids_any, has_attribute_external_ids_any, limit, offset, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param active: If the Substitute is active
        :type active: bool
        :param has_related_to_org_ids_any:
        :type has_related_to_org_ids_any: List[int]
        :param has_attribute_external_ids_any:
        :type has_attribute_external_ids_any: List[str]
        :param limit: Limit. For pagination purposes
        :type limit: int
        :param offset: Offset. For pagination purposes
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[SubstituteResponse], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'active',
            'has_related_to_org_ids_any',
            'has_attribute_external_ids_any',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_substitutes" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']


        # process the query parameters
        _query_params = []
        if _params.get('active') is not None:  # noqa: E501
            _query_params.append(('active', _params['active']))

        if _params.get('has_related_to_org_ids_any') is not None:  # noqa: E501
            _query_params.append(('hasRelatedToOrgIdsAny', _params['has_related_to_org_ids_any']))
            _collection_formats['hasRelatedToOrgIdsAny'] = 'multi'

        if _params.get('has_attribute_external_ids_any') is not None:  # noqa: E501
            _query_params.append(('hasAttributeExternalIdsAny', _params['has_attribute_external_ids_any']))
            _collection_formats['hasAttributeExternalIdsAny'] = 'multi'

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "List[SubstituteResponse]",
            '401': None,
            '400': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/substitute', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_admin(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], identifier : Annotated[StrictStr, Field(..., description="The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)")], administrator_request : Optional[AdministratorRequest] = None, **kwargs) -> AdministratorResponse:  # noqa: E501
        """Updates Administrator  # noqa: E501

        Update an Administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_admin(org_id, identifier, administrator_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param identifier: The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :type identifier: str
        :param administrator_request:
        :type administrator_request: AdministratorRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AdministratorResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_admin_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_admin_with_http_info(org_id, identifier, administrator_request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_admin_with_http_info(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], identifier : Annotated[StrictStr, Field(..., description="The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)")], administrator_request : Optional[AdministratorRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Updates Administrator  # noqa: E501

        Update an Administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_admin_with_http_info(org_id, identifier, administrator_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param identifier: The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :type identifier: str
        :param administrator_request:
        :type administrator_request: AdministratorRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AdministratorResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'identifier',
            'administrator_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_admin" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']

        if _params['identifier'] is not None:
            _path_params['identifier'] = _params['identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['administrator_request'] is not None:
            _body_params = _params['administrator_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "AdministratorResponse",
            '400': None,
            '401': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/administrator/{identifier}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_employee(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], identifier : Annotated[StrictStr, Field(..., description="The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)")], employee_request : Optional[EmployeeRequest] = None, **kwargs) -> EmployeeResponse:  # noqa: E501
        """Updates Employee  # noqa: E501

        Update an Employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_employee(org_id, identifier, employee_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param identifier: The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :type identifier: str
        :param employee_request:
        :type employee_request: EmployeeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EmployeeResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_employee_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_employee_with_http_info(org_id, identifier, employee_request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_employee_with_http_info(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], identifier : Annotated[StrictStr, Field(..., description="The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)")], employee_request : Optional[EmployeeRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Updates Employee  # noqa: E501

        Update an Employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_employee_with_http_info(org_id, identifier, employee_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param identifier: The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :type identifier: str
        :param employee_request:
        :type employee_request: EmployeeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EmployeeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'identifier',
            'employee_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_employee" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']

        if _params['identifier'] is not None:
            _path_params['identifier'] = _params['identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['employee_request'] is not None:
            _body_params = _params['employee_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "EmployeeResponse",
            '400': None,
            '401': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/employee/{identifier}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_substitute(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], identifier : Annotated[StrictStr, Field(..., description="The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)")], substitute_request : Optional[SubstituteRequest] = None, **kwargs) -> SubstituteResponse:  # noqa: E501
        """Updates Substitute  # noqa: E501

        Update a Substitute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_substitute(org_id, identifier, substitute_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param identifier: The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :type identifier: str
        :param substitute_request:
        :type substitute_request: SubstituteRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SubstituteResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_substitute_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_substitute_with_http_info(org_id, identifier, substitute_request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_substitute_with_http_info(self, org_id : Annotated[StrictInt, Field(..., description="The Red Rover Id of the Organization")], identifier : Annotated[StrictStr, Field(..., description="The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)")], substitute_request : Optional[SubstituteRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Updates Substitute  # noqa: E501

        Update a Substitute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_substitute_with_http_info(org_id, identifier, substitute_request, async_req=True)
        >>> result = thread.get()

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param identifier: The identifier of the OrgUser. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :type identifier: str
        :param substitute_request:
        :type substitute_request: SubstituteRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SubstituteResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'identifier',
            'substitute_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_substitute" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id'] is not None:
            _path_params['orgId'] = _params['org_id']

        if _params['identifier'] is not None:
            _path_params['identifier'] = _params['identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['substitute_request'] is not None:
            _body_params = _params['substitute_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['apiKey']  # noqa: E501

        _response_types_map = {
            '200': "SubstituteResponse",
            '400': None,
            '401': None,
        }

        return self.api_client.call_api(
            '/api/v1/{orgId}/User/substitute/{identifier}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
