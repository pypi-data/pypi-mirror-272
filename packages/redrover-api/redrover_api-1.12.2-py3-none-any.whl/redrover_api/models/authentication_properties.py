# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class AuthenticationProperties(BaseModel):
    """
    AuthenticationProperties
    """
    items: Optional[Dict[str, StrictStr]] = None
    parameters: Optional[Dict[str, Any]] = None
    is_persistent: Optional[StrictBool] = Field(None, alias="isPersistent")
    redirect_uri: Optional[StrictStr] = Field(None, alias="redirectUri")
    issued_utc: Optional[datetime] = Field(None, alias="issuedUtc")
    expires_utc: Optional[datetime] = Field(None, alias="expiresUtc")
    allow_refresh: Optional[StrictBool] = Field(None, alias="allowRefresh")
    __properties = ["items", "parameters", "isPersistent", "redirectUri", "issuedUtc", "expiresUtc", "allowRefresh"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthenticationProperties:
        """Create an instance of AuthenticationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if items (nullable) is None
        # and __fields_set__ contains the field
        if self.items is None and "items" in self.__fields_set__:
            _dict['items'] = None

        # set to None if parameters (nullable) is None
        # and __fields_set__ contains the field
        if self.parameters is None and "parameters" in self.__fields_set__:
            _dict['parameters'] = None

        # set to None if redirect_uri (nullable) is None
        # and __fields_set__ contains the field
        if self.redirect_uri is None and "redirect_uri" in self.__fields_set__:
            _dict['redirectUri'] = None

        # set to None if issued_utc (nullable) is None
        # and __fields_set__ contains the field
        if self.issued_utc is None and "issued_utc" in self.__fields_set__:
            _dict['issuedUtc'] = None

        # set to None if expires_utc (nullable) is None
        # and __fields_set__ contains the field
        if self.expires_utc is None and "expires_utc" in self.__fields_set__:
            _dict['expiresUtc'] = None

        # set to None if allow_refresh (nullable) is None
        # and __fields_set__ contains the field
        if self.allow_refresh is None and "allow_refresh" in self.__fields_set__:
            _dict['allowRefresh'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthenticationProperties:
        """Create an instance of AuthenticationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthenticationProperties.parse_obj(obj)

        _obj = AuthenticationProperties.parse_obj({
            "items": obj.get("items"),
            "parameters": obj.get("parameters"),
            "is_persistent": obj.get("isPersistent"),
            "redirect_uri": obj.get("redirectUri"),
            "issued_utc": obj.get("issuedUtc"),
            "expires_utc": obj.get("expiresUtc"),
            "allow_refresh": obj.get("allowRefresh")
        })
        return _obj


