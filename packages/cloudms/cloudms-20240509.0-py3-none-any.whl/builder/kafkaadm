#!/bin/bash

log()
{
    echo $(date +"%Y-%m-%d %H:%M:%S,%3N") $@
}

wait_for_host()
{
    local host=$1

    retry=20
    while (($retry > 0)); do
        log INFO "Check $host, retry: $retry."
        ssh -o ConnectTimeout=3 root@$host date > /dev/null 2>&1
        if (($? == 0)); then
            log INFO "Host $host is up."
            break
        fi
        retry=$((retry - 1))
        sleep 4
    done
    if (($retry == 0)); then
        log ERROR "Timeout!"
        exit 1
    fi
}

set_repo()
{
    log INFO "Check repo."
    if [ ! -d "/etc/yum.repos.d.orig" ]; then
        mv /etc/yum.repos.d /etc/yum.repos.d.orig
        mkdir -p /etc/yum.repos.d
    fi
    mv -f $tmp_path/depot.repo /etc/yum.repos.d/
    mv -f $tmp_path/hosts /etc/
}

disable_selinux()
{
    log INFO "Disable SELinux."
    setenforce 0
    cat > /etc/selinux/config << __EOF__
SELINUX=permissive
SELINUXTYPE=targeted
__EOF__
}

install_kafka()
{
    local version=$1

    log INFO "Install Java OpenJDK."
    dnf install -y java-11-openjdk-11.0.18.0.10

    log INFO "Install Kafka $version."
    file=kafka_$version.tgz
    curl -s http://$depot/centos-stream-9/kafka_20231127/$file -o $file
    tar -xzf $file -C /usr/local
    mv /usr/local/kafka_$version /usr/local/kafka
    mkdir -p /etc/kafka
    mkdir -p /var/lib/kafka
    mv -f $tmp_path/server.properties /etc/kafka/
    mv -f $tmp_path/kafka-server.service /usr/lib/systemd/system/

    log INFO "Format storage."
    /usr/local/kafka/bin/kafka-storage.sh format -t $kid \
            -c /etc/kafka/server.properties

    log INFO "Start service."
    systemctl daemon-reload
    systemctl enable --now kafka-server
}

op_deploy()
{
    local version=$1

    echo ""
    log INFO "Deploy Kafka."
    export http_proxy=$http_proxy_url
    set_repo
    disable_selinux
    install_kafka $version
}

help()
{
    echo "Help"
    echo "$self_name deploy" \
            "--host <host> --id <id> --version <version>"
}

start()
{
    local copy_files host id args_orig

    args_orig="$@"
    op=$1
    if [ -z "$op" ]; then help; exit 1; fi
    shift
    for item in $@; do
        if [ ${item:0:2} == "--" ]; then
            arg_name=$item
            continue
        fi
        case $arg_name in
        --host)
            host=$item
            ;;
        --id)
            id=$item
            ;;
        --version)
            version=$item
            ;;
        *)
            help; exit 1
            ;;
        esac
    done
    if [ -z $host ] || [ -z $id ]; then help; exit 1; fi

    tmp_path=/tmp/$id
    if [ "$self_path" != "$tmp_path" ]; then
        copy_files=$self_path/$self_name
        template_path=$self_path/kafka-template
    else
        source $tmp_path/adm.rc
    fi
    case $op in
    deploy)
        if [ "$copy_files" ]; then
            copy_files="$copy_files $tmp_path/*
                    $template_path/kafka-server.service"
        else
            op_deploy $version
        fi
        ;;
    *)
        help; exit 1
        ;;
    esac
    if [ "$copy_files" ]; then
        echo ""
        wait_for_host $host
        log INFO "Copy files to $host."
        ssh root@$host mkdir -p $tmp_path
        scp $copy_files root@$host:$tmp_path
        log INFO "Run $self_name on $host."
        ssh root@$host $tmp_path/$self_name "$args_orig"
        log INFO "Clean up on $host."
        ssh root@$host rm -fr $tmp_path
    fi
}


self_name=$(basename $0)
self_path=$(dirname $0)
start "$@"

exit 0

