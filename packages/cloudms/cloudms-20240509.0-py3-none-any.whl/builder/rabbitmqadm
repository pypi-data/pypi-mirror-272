#!/bin/bash

log()
{
    echo $(date +"%Y-%m-%d %H:%M:%S,%3N") $@
}

wait_for_host()
{
    local host=$1

    retry=20
    while (($retry > 0)); do
        log INFO "Check $host, retry: $retry."
        ssh -o ConnectTimeout=3 root@$host date > /dev/null 2>&1
        if (($? == 0)); then
            log INFO "Host $host is up."
            break
        fi
        retry=$((retry - 1))
        sleep 4
    done
    if (($retry == 0)); then
        log ERROR "Timeout!"
        exit 1
    fi
}

set_repo()
{
    log INFO "Check repo."
    if [ ! -d "/etc/yum.repos.d.orig" ]; then
        mv /etc/yum.repos.d /etc/yum.repos.d.orig
        mkdir -p /etc/yum.repos.d
    fi
    mv -f $tmp_path/depot.repo /etc/yum.repos.d/
}

disable_selinux()
{
    log INFO "Disable SELinux."
    setenforce 0
    cat > /etc/selinux/config << __EOF__
SELINUX=permissive
SELINUXTYPE=targeted
__EOF__
}

install_rabbitmq()
{
    local version=$1
    local cookie=$2

    log INFO "Install RabbitMQ $version."
    mv -f $tmp_path/hosts /etc/
    IFS='-'; a=(${version}); unset IFS
    rabbitmq_ver=${a[0]}
    erlang_ver=${a[1]}
    dnf install -y erlang-$erlang_ver rabbitmq-server-$rabbitmq_ver \
            socat logrotate
    file=/var/lib/rabbitmq/.erlang.cookie
    echo -n $cookie > $file
    chown rabbitmq:rabbitmq $file
    chmod 600 $file
    mv $tmp_path/rabbitmq.conf /etc/rabbitmq/
    systemctl enable --now rabbitmq-server
    rabbitmq-plugins enable rabbitmq_management
}

op_deploy()
{
    local version=$1
    local cookie=$2

    echo ""
    log INFO "Deploy RabbitMQ."
    set_repo
    disable_selinux
    install_rabbitmq $version $cookie
}

op_join()
{
    local boostrap=$1

    log INFO "Join RabbitMQ cluster $bootstrap."
    rabbitmqctl stop_app
    rabbitmqctl reset
    rabbitmqctl join_cluster rabbit@$bootstrap
    rabbitmqctl start_app
}

help()
{
    echo "Help"
    echo "$self_name deploy" \
            "--host <host> --id <id> --cookie <cookie> --version <version>"
    echo "$self_name join" \
            "--host <host> --id <id> --bootstrap <bootstrap>"
}

start()
{
    local copy_files host id version cookie bootstrap args_orig

    args_orig="$@"
    op=$1
    if [ -z "$op" ]; then help; exit 1; fi
    shift
    for item in $@; do
        if [ ${item:0:2} == "--" ]; then
            arg_name=$item
            continue
        fi
        case $arg_name in
        --host)
            host=$item
            ;;
        --id)
            id=$item
            ;;
        --version)
            version=$item
            ;;
        --cookie)
            cookie=$item
            ;;
        --bootstrap)
            bootstrap=$item
            ;;
        *)
            help; exit 1
            ;;
        esac
    done
    if [ -z $host ] || [ -z $id ]; then help; exit 1; fi

    tmp_path=/tmp/$id
    if [ "$self_path" != "$tmp_path" ]; then
        copy_files=$self_path/$self_name
        template_path=$self_path/rabbitmq-template
    fi
    case $op in
    deploy)
        if [ "$copy_files" ]; then
            copy_files="$copy_files $tmp_path/* $template_path/rabbitmq.conf"
        else
            op_deploy $version $cookie
        fi
        ;;
    join)
        if [ "$copy_files" ]; then
            copy_files="$copy_files $tmp_path/*"
        else
            op_join $bootstrap
        fi
        ;;
    *)
        help; exit 1
        ;;
    esac
    if [ "$copy_files" ]; then
        echo ""
        wait_for_host $host
        log INFO "Copy files to $host."
        ssh root@$host mkdir -p $tmp_path
        scp $copy_files root@$host:$tmp_path
        log INFO "Run $self_name on $host."
        ssh root@$host $tmp_path/$self_name "$args_orig"
        log INFO "Clean up on $host."
        ssh root@$host rm -fr $tmp_path
    fi
}


self_name=$(basename $0)
self_path=$(dirname $0)
start "$@"

exit 0

