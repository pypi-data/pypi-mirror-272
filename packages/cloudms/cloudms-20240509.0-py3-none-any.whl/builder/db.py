from datetime import datetime
from sqlalchemy import Table, Column, Integer, String, Boolean, MetaData, \
        DateTime

from common.database import DBBase

metadata = MetaData()

table_map = {
    "nfs_cluster": Table("nfs_cluster", metadata,
        Column("id", String(36), primary_key=True),
        Column("name", String(128)),
        Column("version", String(24)),
        Column("project_id", String(36)),
        Column("subnet_id", String(36)),
        Column("cluster_size", Integer),
        Column("service_address", String(16)),
        Column("sg_id", String(36)),
        Column("vip_port_id", String(36)),
        Column("time_create", DateTime, default=datetime.utcnow),
        Column("time_update", DateTime, onupdate=datetime.utcnow),
        Column("deleted", Boolean, default=False),
        Column("status", String(24))),
    "nfs_disk": Table("nfs_disk", metadata,
        Column("id", String(36), primary_key=True),
        Column("name", String(128)),
        Column("size", Integer),
        Column("cluster_id", String(36)),
        Column("volume_id", String(36)),
        Column("exported", Boolean, default=False),
        Column("time_create", DateTime, default=datetime.utcnow),
        Column("time_update", DateTime, onupdate=datetime.utcnow),
        Column("status", String(24))),
    "mariadb_cluster": Table("mariadb_cluster", metadata,
        Column("id", String(36), primary_key=True),
        Column("name", String(128)),
        Column("version", String(24)),
        Column("project_id", String(36)),
        Column("subnet_id", String(36)),
        Column("cluster_size", Integer),
        Column("volume_size", Integer),
        Column("service_address", String(16)),
        Column("sg_id", String(36)),
        Column("vip_port_id", String(36)),
        Column("time_create", DateTime, default=datetime.utcnow),
        Column("time_update", DateTime, onupdate=datetime.utcnow),
        Column("deleted", Boolean, default=False),
        Column("status", String(24))),
    "postgresql_cluster": Table("postgresql_cluster", metadata,
        Column("id", String(36), primary_key=True),
        Column("name", String(128)),
        Column("version", String(24)),
        Column("project_id", String(36)),
        Column("subnet_id", String(36)),
        Column("cluster_size", Integer),
        Column("volume_size", Integer),
        Column("service_address", String(16)),
        Column("sg_id", String(36)),
        Column("vip_port_id", String(36)),
        Column("time_create", DateTime, default=datetime.utcnow),
        Column("time_update", DateTime, onupdate=datetime.utcnow),
        Column("deleted", Boolean, default=False),
        Column("status", String(24))),
    "redis_cluster": Table("redis_cluster", metadata,
        Column("id", String(36), primary_key=True),
        Column("name", String(128)),
        Column("version", String(24)),
        Column("project_id", String(36)),
        Column("subnet_id", String(36)),
        Column("cluster_size", Integer),
        Column("volume_size", Integer),
        Column("service_address", String(16)),
        Column("sg_id", String(36)),
        Column("vip_port_id", String(36)),
        Column("time_create", DateTime, default=datetime.utcnow),
        Column("time_update", DateTime, onupdate=datetime.utcnow),
        Column("deleted", Boolean, default=False),
        Column("status", String(24))),
    "rabbitmq_cluster": Table("rabbitmq_cluster", metadata,
        Column("id", String(36), primary_key=True),
        Column("name", String(128)),
        Column("version", String(24)),
        Column("project_id", String(36)),
        Column("subnet_id", String(36)),
        Column("cluster_size", Integer),
        Column("volume_size", Integer),
        Column("service_address", String(16)),
        Column("sg_id", String(36)),
        Column("vip_port_id", String(36)),
        Column("time_create", DateTime, default=datetime.utcnow),
        Column("time_update", DateTime, onupdate=datetime.utcnow),
        Column("deleted", Boolean, default=False),
        Column("status", String(24))),
    "kafka_cluster": Table("kafka_cluster", metadata,
        Column("id", String(36), primary_key=True),
        Column("name", String(128)),
        Column("version", String(24)),
        Column("project_id", String(36)),
        Column("subnet_id", String(36)),
        Column("cluster_size", Integer),
        Column("volume_size", Integer),
        Column("service_address", String(16)),
        Column("sg_id", String(36)),
        Column("vip_port_id", String(36)),
        Column("time_create", DateTime, default=datetime.utcnow),
        Column("time_update", DateTime, onupdate=datetime.utcnow),
        Column("deleted", Boolean, default=False),
        Column("status", String(24))),
    "harbor_cluster": Table("harbor_cluster", metadata,
        Column("id", String(36), primary_key=True),
        Column("name", String(128)),
        Column("version", String(24)),
        Column("project_id", String(36)),
        Column("subnet_id", String(36)),
        Column("cluster_size", Integer),
        Column("volume_size", Integer),
        Column("service_address", String(16)),
        Column("sg_id", String(36)),
        Column("vip_port_id", String(36)),
        Column("time_create", DateTime, default=datetime.utcnow),
        Column("time_update", DateTime, onupdate=datetime.utcnow),
        Column("deleted", Boolean, default=False),
        Column("status", String(24))),
    "cluster_instance": Table("cluster_instance", metadata,
        Column("id", String(36), primary_key=True),
        Column("cluster_id", String(36)),
        Column("cluster_type", String(36)),
        Column("instance_id", String(36)),
        Column("instance_name", String(128)),
        Column("volume_id", String(36)),
        Column("user_port_id", String(36)),
        Column("user_address", String(16)),
        Column("mgmt_port_id", String(36)),
        Column("mgmt_address", String(16))),
    "k8s_cluster": Table("k8s_cluster", metadata,
        Column("id", String(36), primary_key=True),
        Column("name", String(128)),
        Column("version", String(24)),
        Column("project_id", String(36)),
        Column("domain", String(64)),
        Column("api_access", String(24)),
        Column("service_access", String(24)),
        Column("api_address", String(16)),
        Column("api_address_auto", Boolean, default=True),
        Column("ingress_address", String(16)),
        Column("ingress_address_auto", Boolean, default=True),
        Column("node_address_block", String(20)),
        Column("pod_address_block", String(20)),
        Column("service_address_block", String(20)),
        Column("control_size", Integer),
        Column("worker_spec", String(24)),
        Column("worker_count", Integer),
        Column("sg_id", String(36)),
        Column("sg_auto", Boolean, default=True),
        Column("node_network_id", String(36)),
        Column("node_subnet_id", String(36)),
        Column("node_subnet_auto", Boolean, default=True),
        Column("corp_gw_id", String(36)),
        Column("corp_gw_port_id", String(36)),
        Column("public_gw_id", String(36)),
        Column("public_gw_port_id", String(36)),
        Column("int_api_port_id", String(36)),
        Column("int_ingress_port_id", String(36)),
        Column("time_create", DateTime, default=datetime.utcnow),
        Column("time_update", DateTime, onupdate=datetime.utcnow),
        Column("deleted", Boolean, default=False),
        Column("status", String(24))),
    "k8s_instance": Table("k8s_instance", metadata,
        Column("id", String(36), primary_key=True),
        Column("cluster_id", String(36)),
        Column("instance_id", String(36)),
        Column("role", String(16)),
        Column("bootstrap", Boolean, default=False),
        Column("node_port_id", String(36)),
        Column("node_addr", String(16)),
        Column("mgmt_port_id", String(36)),
        Column("mgmt_addr", String(16)))
}

db = None


class DB(DBBase):
    def __init__(self, name):
        super().__init__(name, metadata, table_map)

