# coding: utf-8

"""
    VoiceOS

    VoiceOS API

    The version of the OpenAPI document: 0.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from voiceos.models.open_ai import OpenAI
from voiceos.models.transcriber import Transcriber
from voiceos.models.voice import Voice
from voiceos.models.webhook import Webhook
from typing import Optional, Set
from typing_extensions import Self

class AgentConfiguration(BaseModel):
    """
    AgentConfiguration
    """ # noqa: E501
    initial_message: Optional[StrictStr] = Field(default=None, description="The initial message that the agent will say. If null, the agent will wait for the user to speak first.")
    prompt: Optional[StrictStr] = Field(default=None, description="The prompt of the agent.")
    voice: Optional[Voice] = None
    language_model: Optional[OpenAI] = None
    transcriber: Optional[Transcriber] = None
    max_duration_seconds: Optional[StrictInt] = Field(default=600, description="The maximum conversation duration in seconds. If null, the conversation can be of any duration. The default value is 10 min.")
    webhooks: Optional[List[Webhook]] = Field(default=None, description="The webhooks of the agent. These are used for real-time conversation events such as function_calls, messages and much more.")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="The metadata of the agent. This is used to store additional information about the agent.")
    __properties: ClassVar[List[str]] = ["initial_message", "prompt", "voice", "language_model", "transcriber", "max_duration_seconds", "webhooks", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of voice
        if self.voice:
            _dict['voice'] = self.voice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_model
        if self.language_model:
            _dict['language_model'] = self.language_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transcriber
        if self.transcriber:
            _dict['transcriber'] = self.transcriber.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in webhooks (list)
        _items = []
        if self.webhooks:
            for _item in self.webhooks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['webhooks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "initial_message": obj.get("initial_message"),
            "prompt": obj.get("prompt"),
            "voice": Voice.from_dict(obj["voice"]) if obj.get("voice") is not None else None,
            "language_model": OpenAI.from_dict(obj["language_model"]) if obj.get("language_model") is not None else None,
            "transcriber": Transcriber.from_dict(obj["transcriber"]) if obj.get("transcriber") is not None else None,
            "max_duration_seconds": obj.get("max_duration_seconds") if obj.get("max_duration_seconds") is not None else 600,
            "webhooks": [Webhook.from_dict(_item) for _item in obj["webhooks"]] if obj.get("webhooks") is not None else None,
        })
        return _obj


