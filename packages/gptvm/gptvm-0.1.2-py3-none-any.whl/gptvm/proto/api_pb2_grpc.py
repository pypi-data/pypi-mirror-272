# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from gptvm.proto import account_pb2 as gptvm_dot_proto_dot_account__pb2
from gptvm.proto import app_pb2 as gptvm_dot_proto_dot_app__pb2
from gptvm.proto import env_pb2 as gptvm_dot_proto_dot_env__pb2
from gptvm.proto import image_pb2 as gptvm_dot_proto_dot_image__pb2
from gptvm.proto import storage_pb2 as gptvm_dot_proto_dot_storage__pb2
from gptvm.proto import task_pb2 as gptvm_dot_proto_dot_task__pb2
from gptvm.proto import user_pb2 as gptvm_dot_proto_dot_user__pb2
from gptvm.proto import workgroup_pb2 as gptvm_dot_proto_dot_workgroup__pb2
from gptvm.proto import workspace_pb2 as gptvm_dot_proto_dot_workspace__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in gptvm/proto/api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class UserServiceStub(object):
    """----------------------------------- /Services/ ----------------------------------- 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/gptvm.UserService/Login',
                request_serializer=gptvm_dot_proto_dot_user__pb2.LoginReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_user__pb2.LoginRes.FromString,
                _registered_method=True)
        self.Info = channel.unary_unary(
                '/gptvm.UserService/Info',
                request_serializer=gptvm_dot_proto_dot_user__pb2.InfoReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_user__pb2.InfoRes.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """----------------------------------- /Services/ ----------------------------------- 
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Info(self, request, context):
        """rpc Logout(gptvm_user.LogoutReq) returns (gptvm_user.LogoutRes);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=gptvm_dot_proto_dot_user__pb2.LoginReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_user__pb2.LoginRes.SerializeToString,
            ),
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=gptvm_dot_proto_dot_user__pb2.InfoReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_user__pb2.InfoRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gptvm.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """----------------------------------- /Services/ ----------------------------------- 
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.UserService/Login',
            gptvm_dot_proto_dot_user__pb2.LoginReq.SerializeToString,
            gptvm_dot_proto_dot_user__pb2.LoginRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.UserService/Info',
            gptvm_dot_proto_dot_user__pb2.InfoReq.SerializeToString,
            gptvm_dot_proto_dot_user__pb2.InfoRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AccountServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Info = channel.unary_unary(
                '/gptvm.AccountService/Info',
                request_serializer=gptvm_dot_proto_dot_account__pb2.InfoReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_account__pb2.InfoRes.FromString,
                _registered_method=True)


class AccountServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=gptvm_dot_proto_dot_account__pb2.InfoReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_account__pb2.InfoRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gptvm.AccountService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccountService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.AccountService/Info',
            gptvm_dot_proto_dot_account__pb2.InfoReq.SerializeToString,
            gptvm_dot_proto_dot_account__pb2.InfoRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WorkgroupServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/gptvm.WorkgroupService/List',
                request_serializer=gptvm_dot_proto_dot_workgroup__pb2.ListReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_workgroup__pb2.ListRes.FromString,
                _registered_method=True)


class WorkgroupServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkgroupServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=gptvm_dot_proto_dot_workgroup__pb2.ListReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_workgroup__pb2.ListRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gptvm.WorkgroupService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkgroupService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.WorkgroupService/List',
            gptvm_dot_proto_dot_workgroup__pb2.ListReq.SerializeToString,
            gptvm_dot_proto_dot_workgroup__pb2.ListRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WorkspaceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/gptvm.WorkspaceService/List',
                request_serializer=gptvm_dot_proto_dot_workspace__pb2.ListReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_workspace__pb2.ListRes.FromString,
                _registered_method=True)
        self.Create = channel.unary_unary(
                '/gptvm.WorkspaceService/Create',
                request_serializer=gptvm_dot_proto_dot_workspace__pb2.CreateReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_workspace__pb2.CreateRes.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/gptvm.WorkspaceService/Delete',
                request_serializer=gptvm_dot_proto_dot_workspace__pb2.DeleteReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_workspace__pb2.DeleteRes.FromString,
                _registered_method=True)


class WorkspaceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkspaceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=gptvm_dot_proto_dot_workspace__pb2.ListReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_workspace__pb2.ListRes.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=gptvm_dot_proto_dot_workspace__pb2.CreateReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_workspace__pb2.CreateRes.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=gptvm_dot_proto_dot_workspace__pb2.DeleteReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_workspace__pb2.DeleteRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gptvm.WorkspaceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkspaceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.WorkspaceService/List',
            gptvm_dot_proto_dot_workspace__pb2.ListReq.SerializeToString,
            gptvm_dot_proto_dot_workspace__pb2.ListRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.WorkspaceService/Create',
            gptvm_dot_proto_dot_workspace__pb2.CreateReq.SerializeToString,
            gptvm_dot_proto_dot_workspace__pb2.CreateRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.WorkspaceService/Delete',
            gptvm_dot_proto_dot_workspace__pb2.DeleteReq.SerializeToString,
            gptvm_dot_proto_dot_workspace__pb2.DeleteRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AppServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/gptvm.AppService/Create',
                request_serializer=gptvm_dot_proto_dot_app__pb2.CreateReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_app__pb2.CreateRes.FromString,
                _registered_method=True)
        self.List = channel.unary_unary(
                '/gptvm.AppService/List',
                request_serializer=gptvm_dot_proto_dot_app__pb2.ListReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_app__pb2.ListRes.FromString,
                _registered_method=True)
        self.Info = channel.unary_unary(
                '/gptvm.AppService/Info',
                request_serializer=gptvm_dot_proto_dot_app__pb2.InfoReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_app__pb2.InfoRes.FromString,
                _registered_method=True)
        self.GetPackageUrl = channel.unary_unary(
                '/gptvm.AppService/GetPackageUrl',
                request_serializer=gptvm_dot_proto_dot_app__pb2.UrlReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_app__pb2.UrlRes.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/gptvm.AppService/Update',
                request_serializer=gptvm_dot_proto_dot_app__pb2.UpdateReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_app__pb2.UpdateRes.FromString,
                _registered_method=True)
        self.Operate = channel.unary_unary(
                '/gptvm.AppService/Operate',
                request_serializer=gptvm_dot_proto_dot_app__pb2.OperateReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_app__pb2.OperateRes.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/gptvm.AppService/Stop',
                request_serializer=gptvm_dot_proto_dot_app__pb2.StopReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_app__pb2.StopRes.FromString,
                _registered_method=True)
        self.RunRemote = channel.unary_stream(
                '/gptvm.AppService/RunRemote',
                request_serializer=gptvm_dot_proto_dot_app__pb2.RunRemoteReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_app__pb2.RunRemoteRes.FromString,
                _registered_method=True)


class AppServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPackageUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Operate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """rpc Start(gptvm_app.StartReq) returns (gptvm_app.StartRes);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunRemote(self, request, context):
        """rpc Restart(gptvm_app.RestartReq) returns (gptvm_app.RestartRes);
        rpc Publish(gptvm_app.PublishReq) returns (gptvm_app.PublishRes);
        rpc Unpublish(gptvm_app.UnpublishReq) returns (gptvm_app.UnpublishRes);
        rpc GetLogs(gptvm_app.GetLogsReq) returns (gptvm_app.GetLogsRes);
        rpc RunCommand(gptvm_app.RunCmdReq) returns (gptvm_app.RunCmdRes);
        rpc RunScript(gptvm_app.RunScriptReq) returns (gptvm_app.RunScriptRes);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AppServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=gptvm_dot_proto_dot_app__pb2.CreateReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_app__pb2.CreateRes.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=gptvm_dot_proto_dot_app__pb2.ListReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_app__pb2.ListRes.SerializeToString,
            ),
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=gptvm_dot_proto_dot_app__pb2.InfoReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_app__pb2.InfoRes.SerializeToString,
            ),
            'GetPackageUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPackageUrl,
                    request_deserializer=gptvm_dot_proto_dot_app__pb2.UrlReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_app__pb2.UrlRes.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=gptvm_dot_proto_dot_app__pb2.UpdateReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_app__pb2.UpdateRes.SerializeToString,
            ),
            'Operate': grpc.unary_unary_rpc_method_handler(
                    servicer.Operate,
                    request_deserializer=gptvm_dot_proto_dot_app__pb2.OperateReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_app__pb2.OperateRes.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=gptvm_dot_proto_dot_app__pb2.StopReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_app__pb2.StopRes.SerializeToString,
            ),
            'RunRemote': grpc.unary_stream_rpc_method_handler(
                    servicer.RunRemote,
                    request_deserializer=gptvm_dot_proto_dot_app__pb2.RunRemoteReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_app__pb2.RunRemoteRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gptvm.AppService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AppService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.AppService/Create',
            gptvm_dot_proto_dot_app__pb2.CreateReq.SerializeToString,
            gptvm_dot_proto_dot_app__pb2.CreateRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.AppService/List',
            gptvm_dot_proto_dot_app__pb2.ListReq.SerializeToString,
            gptvm_dot_proto_dot_app__pb2.ListRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.AppService/Info',
            gptvm_dot_proto_dot_app__pb2.InfoReq.SerializeToString,
            gptvm_dot_proto_dot_app__pb2.InfoRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPackageUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.AppService/GetPackageUrl',
            gptvm_dot_proto_dot_app__pb2.UrlReq.SerializeToString,
            gptvm_dot_proto_dot_app__pb2.UrlRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.AppService/Update',
            gptvm_dot_proto_dot_app__pb2.UpdateReq.SerializeToString,
            gptvm_dot_proto_dot_app__pb2.UpdateRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Operate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.AppService/Operate',
            gptvm_dot_proto_dot_app__pb2.OperateReq.SerializeToString,
            gptvm_dot_proto_dot_app__pb2.OperateRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.AppService/Stop',
            gptvm_dot_proto_dot_app__pb2.StopReq.SerializeToString,
            gptvm_dot_proto_dot_app__pb2.StopRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunRemote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/gptvm.AppService/RunRemote',
            gptvm_dot_proto_dot_app__pb2.RunRemoteReq.SerializeToString,
            gptvm_dot_proto_dot_app__pb2.RunRemoteRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TaskServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/gptvm.TaskService/List',
                request_serializer=gptvm_dot_proto_dot_task__pb2.ListReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_task__pb2.ListRes.FromString,
                _registered_method=True)
        self.Info = channel.unary_unary(
                '/gptvm.TaskService/Info',
                request_serializer=gptvm_dot_proto_dot_task__pb2.InfoReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_task__pb2.InfoRes.FromString,
                _registered_method=True)
        self.Logs = channel.unary_stream(
                '/gptvm.TaskService/Logs',
                request_serializer=gptvm_dot_proto_dot_task__pb2.GetLogsReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_task__pb2.GetLogsRes.FromString,
                _registered_method=True)
        self.Start = channel.unary_unary(
                '/gptvm.TaskService/Start',
                request_serializer=gptvm_dot_proto_dot_task__pb2.StartReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_task__pb2.StartRes.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/gptvm.TaskService/Stop',
                request_serializer=gptvm_dot_proto_dot_task__pb2.StopReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_task__pb2.StopRes.FromString,
                _registered_method=True)
        self.Restart = channel.unary_unary(
                '/gptvm.TaskService/Restart',
                request_serializer=gptvm_dot_proto_dot_task__pb2.RestartReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_task__pb2.RestartRes.FromString,
                _registered_method=True)
        self.RunRemote = channel.unary_stream(
                '/gptvm.TaskService/RunRemote',
                request_serializer=gptvm_dot_proto_dot_app__pb2.RunRemoteReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_app__pb2.RunRemoteRes.FromString,
                _registered_method=True)


class TaskServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunRemote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=gptvm_dot_proto_dot_task__pb2.ListReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_task__pb2.ListRes.SerializeToString,
            ),
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=gptvm_dot_proto_dot_task__pb2.InfoReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_task__pb2.InfoRes.SerializeToString,
            ),
            'Logs': grpc.unary_stream_rpc_method_handler(
                    servicer.Logs,
                    request_deserializer=gptvm_dot_proto_dot_task__pb2.GetLogsReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_task__pb2.GetLogsRes.SerializeToString,
            ),
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=gptvm_dot_proto_dot_task__pb2.StartReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_task__pb2.StartRes.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=gptvm_dot_proto_dot_task__pb2.StopReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_task__pb2.StopRes.SerializeToString,
            ),
            'Restart': grpc.unary_unary_rpc_method_handler(
                    servicer.Restart,
                    request_deserializer=gptvm_dot_proto_dot_task__pb2.RestartReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_task__pb2.RestartRes.SerializeToString,
            ),
            'RunRemote': grpc.unary_stream_rpc_method_handler(
                    servicer.RunRemote,
                    request_deserializer=gptvm_dot_proto_dot_app__pb2.RunRemoteReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_app__pb2.RunRemoteRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gptvm.TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.TaskService/List',
            gptvm_dot_proto_dot_task__pb2.ListReq.SerializeToString,
            gptvm_dot_proto_dot_task__pb2.ListRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.TaskService/Info',
            gptvm_dot_proto_dot_task__pb2.InfoReq.SerializeToString,
            gptvm_dot_proto_dot_task__pb2.InfoRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/gptvm.TaskService/Logs',
            gptvm_dot_proto_dot_task__pb2.GetLogsReq.SerializeToString,
            gptvm_dot_proto_dot_task__pb2.GetLogsRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.TaskService/Start',
            gptvm_dot_proto_dot_task__pb2.StartReq.SerializeToString,
            gptvm_dot_proto_dot_task__pb2.StartRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.TaskService/Stop',
            gptvm_dot_proto_dot_task__pb2.StopReq.SerializeToString,
            gptvm_dot_proto_dot_task__pb2.StopRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.TaskService/Restart',
            gptvm_dot_proto_dot_task__pb2.RestartReq.SerializeToString,
            gptvm_dot_proto_dot_task__pb2.RestartRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunRemote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/gptvm.TaskService/RunRemote',
            gptvm_dot_proto_dot_app__pb2.RunRemoteReq.SerializeToString,
            gptvm_dot_proto_dot_app__pb2.RunRemoteRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StorageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/gptvm.StorageService/List',
                request_serializer=gptvm_dot_proto_dot_storage__pb2.ListReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_storage__pb2.ListRes.FromString,
                _registered_method=True)
        self.Create = channel.unary_unary(
                '/gptvm.StorageService/Create',
                request_serializer=gptvm_dot_proto_dot_storage__pb2.CreateReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_storage__pb2.CreateRes.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/gptvm.StorageService/Delete',
                request_serializer=gptvm_dot_proto_dot_storage__pb2.DeleteReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_storage__pb2.DeleteRes.FromString,
                _registered_method=True)


class StorageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StorageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=gptvm_dot_proto_dot_storage__pb2.ListReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_storage__pb2.ListRes.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=gptvm_dot_proto_dot_storage__pb2.CreateReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_storage__pb2.CreateRes.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=gptvm_dot_proto_dot_storage__pb2.DeleteReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_storage__pb2.DeleteRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gptvm.StorageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StorageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.StorageService/List',
            gptvm_dot_proto_dot_storage__pb2.ListReq.SerializeToString,
            gptvm_dot_proto_dot_storage__pb2.ListRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.StorageService/Create',
            gptvm_dot_proto_dot_storage__pb2.CreateReq.SerializeToString,
            gptvm_dot_proto_dot_storage__pb2.CreateRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.StorageService/Delete',
            gptvm_dot_proto_dot_storage__pb2.DeleteReq.SerializeToString,
            gptvm_dot_proto_dot_storage__pb2.DeleteRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class EnvServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/gptvm.EnvService/List',
                request_serializer=gptvm_dot_proto_dot_env__pb2.ListReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_env__pb2.ListRes.FromString,
                _registered_method=True)
        self.Create = channel.unary_unary(
                '/gptvm.EnvService/Create',
                request_serializer=gptvm_dot_proto_dot_env__pb2.CreateReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_env__pb2.CreateRes.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/gptvm.EnvService/Delete',
                request_serializer=gptvm_dot_proto_dot_env__pb2.DeleteReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_env__pb2.DeleteRes.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/gptvm.EnvService/Update',
                request_serializer=gptvm_dot_proto_dot_env__pb2.UpdateReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_env__pb2.UpdateRes.FromString,
                _registered_method=True)


class EnvServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnvServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=gptvm_dot_proto_dot_env__pb2.ListReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_env__pb2.ListRes.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=gptvm_dot_proto_dot_env__pb2.CreateReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_env__pb2.CreateRes.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=gptvm_dot_proto_dot_env__pb2.DeleteReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_env__pb2.DeleteRes.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=gptvm_dot_proto_dot_env__pb2.UpdateReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_env__pb2.UpdateRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gptvm.EnvService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EnvService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.EnvService/List',
            gptvm_dot_proto_dot_env__pb2.ListReq.SerializeToString,
            gptvm_dot_proto_dot_env__pb2.ListRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.EnvService/Create',
            gptvm_dot_proto_dot_env__pb2.CreateReq.SerializeToString,
            gptvm_dot_proto_dot_env__pb2.CreateRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.EnvService/Delete',
            gptvm_dot_proto_dot_env__pb2.DeleteReq.SerializeToString,
            gptvm_dot_proto_dot_env__pb2.DeleteRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.EnvService/Update',
            gptvm_dot_proto_dot_env__pb2.UpdateReq.SerializeToString,
            gptvm_dot_proto_dot_env__pb2.UpdateRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ImageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/gptvm.ImageService/List',
                request_serializer=gptvm_dot_proto_dot_image__pb2.ListReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_image__pb2.ListRes.FromString,
                _registered_method=True)
        self.Upload = channel.unary_unary(
                '/gptvm.ImageService/Upload',
                request_serializer=gptvm_dot_proto_dot_image__pb2.UploadReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_image__pb2.UploadRes.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/gptvm.ImageService/Delete',
                request_serializer=gptvm_dot_proto_dot_image__pb2.DeleteReq.SerializeToString,
                response_deserializer=gptvm_dot_proto_dot_image__pb2.DeleteRes.FromString,
                _registered_method=True)


class ImageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=gptvm_dot_proto_dot_image__pb2.ListReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_image__pb2.ListRes.SerializeToString,
            ),
            'Upload': grpc.unary_unary_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=gptvm_dot_proto_dot_image__pb2.UploadReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_image__pb2.UploadRes.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=gptvm_dot_proto_dot_image__pb2.DeleteReq.FromString,
                    response_serializer=gptvm_dot_proto_dot_image__pb2.DeleteRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gptvm.ImageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.ImageService/List',
            gptvm_dot_proto_dot_image__pb2.ListReq.SerializeToString,
            gptvm_dot_proto_dot_image__pb2.ListRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Upload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.ImageService/Upload',
            gptvm_dot_proto_dot_image__pb2.UploadReq.SerializeToString,
            gptvm_dot_proto_dot_image__pb2.UploadRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gptvm.ImageService/Delete',
            gptvm_dot_proto_dot_image__pb2.DeleteReq.SerializeToString,
            gptvm_dot_proto_dot_image__pb2.DeleteRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
