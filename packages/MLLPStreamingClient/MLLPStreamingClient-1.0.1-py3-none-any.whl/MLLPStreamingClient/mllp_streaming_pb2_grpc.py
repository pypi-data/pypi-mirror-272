# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from MLLPStreamingClient import mllp_streaming_pb2 as MLLPStreamingClient_dot_mllp__streaming__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class MLLPStreamingStub(object):
    """*
    <p>This gRPC API offers streaming speech-to-text (S2T, <i>rpc Speech2Text</i>), text-to-text<b>*</b> (T2T, <i>rpc Text2Text</i>), and text-to-speech (TTS, <i>rpc Text2Speech</i>) services that, combined, can cover the following use cases: </p>
    <ul>
    <li> <b>Streaming Automatic Speech Recognition (ASR):</b> </li>
    <ul><li><i>Speech2Text</i> rpc call.</li></ul>
    <li> <b>Streaming Speech Translation (ST):</b> </li>
    <ul><li><i>Speech2Text + Text2Text</i> piped rpc calls.</li></ul>
    <li> <b>Streaming Speech Dubbing (SD):</b> </li>
    <ul><li><i>Speech2Text + Text2Text + Text2Speech</i> piped rpc calls.</li></ul>
    <li> <b>Simultaneous Machine Translation (MT):</b> </li>
    <ul><li><i>Text2Text</i> rpc call.</li></ul>
    <li> <b>Incremental text-to-speech (TTS):</b></li>
    <ul><li><i>Text2Speech</i> rpc call, or</li></ul>
    <ul><li><i>Text2Text + Text2Speech</i> piped rpc calls.</li></ul>
    </ul>
    <p> <b>*Note</b>: T2T systems can be either Machine Translation (MT) systems that translate text from a source to a target language, or monolingual text postprocessing systems for adding casing, punctuation signs, markup, etc. </p>
    <p>To make use of these three atomic services:</p>
    <ol>
    <li> A rpc call to <i>AuthToken</i> must be done using your API credentials to get a valid auth token. This token has to be provided to the rest of rpc methods as metadata, with the following header key: <i>"x-mllp-auth-token"</i>. </li>
    <li> The next step would be to retrieve information about existing S2T, T2T and T2S systems and their availabilty. This is done by calling the rpc methods <i>Speech2TextInfo</i>, <i>Text2TextInfo</i>, and <i>Text2SpeechInfo</i>, respectively. </li>
    <li> Finally, <i>Speech2Text</i>, <i>Text2Text</i>, and/or <i>Text2Speech</i> rpc methods are to be called by passing the elected S2T, T2T and T2S system IDs. </li>
    </ol>
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthToken = channel.unary_unary(
                '/MLLPStreaming/AuthToken',
                request_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AuthTokenRequest.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AuthTokenResponse.FromString,
                )
        self.Speech2TextInfo = channel.unary_stream(
                '/MLLPStreaming/Speech2TextInfo',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.S2TInfoResponse.FromString,
                )
        self.Speech2Text = channel.stream_stream(
                '/MLLPStreaming/Speech2Text',
                request_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.S2TRequest.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.S2TResponse.FromString,
                )
        self.Text2TextInfo = channel.unary_stream(
                '/MLLPStreaming/Text2TextInfo',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2TInfoResponse.FromString,
                )
        self.Text2Text = channel.stream_stream(
                '/MLLPStreaming/Text2Text',
                request_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2TRequest.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2TResponse.FromString,
                )
        self.Text2SpeechInfo = channel.unary_stream(
                '/MLLPStreaming/Text2SpeechInfo',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2SInfoResponse.FromString,
                )
        self.Text2Speech = channel.stream_stream(
                '/MLLPStreaming/Text2Speech',
                request_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2SRequest.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2SResponse.FromString,
                )
        self.AdminAddS2TNode = channel.unary_unary(
                '/MLLPStreaming/AdminAddS2TNode',
                request_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeRequest.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeResponse.FromString,
                )
        self.AdminListS2TNodes = channel.unary_stream(
                '/MLLPStreaming/AdminListS2TNodes',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.ListNodesResponse.FromString,
                )
        self.AdminRemoveS2TNode = channel.unary_unary(
                '/MLLPStreaming/AdminRemoveS2TNode',
                request_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeRequest.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeResponse.FromString,
                )
        self.AdminAddT2TNode = channel.unary_unary(
                '/MLLPStreaming/AdminAddT2TNode',
                request_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeRequest.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeResponse.FromString,
                )
        self.AdminListT2TNodes = channel.unary_stream(
                '/MLLPStreaming/AdminListT2TNodes',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.ListNodesResponse.FromString,
                )
        self.AdminRemoveT2TNode = channel.unary_unary(
                '/MLLPStreaming/AdminRemoveT2TNode',
                request_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeRequest.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeResponse.FromString,
                )
        self.AdminAddT2SNode = channel.unary_unary(
                '/MLLPStreaming/AdminAddT2SNode',
                request_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeRequest.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeResponse.FromString,
                )
        self.AdminListT2SNodes = channel.unary_stream(
                '/MLLPStreaming/AdminListT2SNodes',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.ListNodesResponse.FromString,
                )
        self.AdminRemoveT2SNode = channel.unary_unary(
                '/MLLPStreaming/AdminRemoveT2SNode',
                request_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeRequest.SerializeToString,
                response_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeResponse.FromString,
                )


class MLLPStreamingServicer(object):
    """*
    <p>This gRPC API offers streaming speech-to-text (S2T, <i>rpc Speech2Text</i>), text-to-text<b>*</b> (T2T, <i>rpc Text2Text</i>), and text-to-speech (TTS, <i>rpc Text2Speech</i>) services that, combined, can cover the following use cases: </p>
    <ul>
    <li> <b>Streaming Automatic Speech Recognition (ASR):</b> </li>
    <ul><li><i>Speech2Text</i> rpc call.</li></ul>
    <li> <b>Streaming Speech Translation (ST):</b> </li>
    <ul><li><i>Speech2Text + Text2Text</i> piped rpc calls.</li></ul>
    <li> <b>Streaming Speech Dubbing (SD):</b> </li>
    <ul><li><i>Speech2Text + Text2Text + Text2Speech</i> piped rpc calls.</li></ul>
    <li> <b>Simultaneous Machine Translation (MT):</b> </li>
    <ul><li><i>Text2Text</i> rpc call.</li></ul>
    <li> <b>Incremental text-to-speech (TTS):</b></li>
    <ul><li><i>Text2Speech</i> rpc call, or</li></ul>
    <ul><li><i>Text2Text + Text2Speech</i> piped rpc calls.</li></ul>
    </ul>
    <p> <b>*Note</b>: T2T systems can be either Machine Translation (MT) systems that translate text from a source to a target language, or monolingual text postprocessing systems for adding casing, punctuation signs, markup, etc. </p>
    <p>To make use of these three atomic services:</p>
    <ol>
    <li> A rpc call to <i>AuthToken</i> must be done using your API credentials to get a valid auth token. This token has to be provided to the rest of rpc methods as metadata, with the following header key: <i>"x-mllp-auth-token"</i>. </li>
    <li> The next step would be to retrieve information about existing S2T, T2T and T2S systems and their availabilty. This is done by calling the rpc methods <i>Speech2TextInfo</i>, <i>Text2TextInfo</i>, and <i>Text2SpeechInfo</i>, respectively. </li>
    <li> Finally, <i>Speech2Text</i>, <i>Text2Text</i>, and/or <i>Text2Speech</i> rpc methods are to be called by passing the elected S2T, T2T and T2S system IDs. </li>
    </ol>
    """

    def AuthToken(self, request, context):
        """Get a valid auth token to perform furter rpc requests.
        Without a valid auth token, all other rpc calls with return a PERMISSION_DENIED status code error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Speech2TextInfo(self, request, context):
        """Get information about all available streaming speech-to-text (S2T) systems (i.e. transcription, ASR systems). Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Speech2Text(self, request_iterator, context):
        """Convert a stream of audio into text (i.e. speech transcription), using a streaming speech-to-text (S2T) system. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Text2TextInfo(self, request, context):
        """Get information about all available streaming text-to-text (T2T) systems (i.e. translation, MT systems). Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Text2Text(self, request_iterator, context):
        """Transform a continuous stream of text (i.e. text translation), using a streaming text-to-text (T2T) system. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Text2SpeechInfo(self, request, context):
        """Get information about all available incremental text-to-speech (TTS) systems (i.e. speech synthesis, TTS systems). Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Text2Speech(self, request_iterator, context):
        """Convert a continuous stream of text data into speech (i.e. synthesize), using an incremental text-to-speech (TTS) system. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminAddS2TNode(self, request, context):
        """@ignore Convert a batch of text data into speech (i.e. synthesise), using an incremental text-to-speech (TTS) system. Only suitable for off-line applications. It performs better than <i>rpc Text2Speech</i>. Requires a valid auth token, supplied as metadata.
        @ignore rpc Text2Speech_batch(T2S_batchRequest) returns (stream T2SResponse) {}

        Admin method: add an S2T Server. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminListS2TNodes(self, request, context):
        """Admin method: list S2T Servers. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminRemoveS2TNode(self, request, context):
        """Admin method: remove an S2T Server. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminAddT2TNode(self, request, context):
        """Admin method: add an T2T Server. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminListT2TNodes(self, request, context):
        """Admin method: list T2T Servers. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminRemoveT2TNode(self, request, context):
        """Admin method: remove an T2T Server. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminAddT2SNode(self, request, context):
        """Admin method: add an T2S Server. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminListT2SNodes(self, request, context):
        """Admin method: list T2S Servers. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminRemoveT2SNode(self, request, context):
        """Admin method: remove an T2S Server. Requires a valid auth token, supplied as metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MLLPStreamingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuthToken': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthToken,
                    request_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AuthTokenRequest.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AuthTokenResponse.SerializeToString,
            ),
            'Speech2TextInfo': grpc.unary_stream_rpc_method_handler(
                    servicer.Speech2TextInfo,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.S2TInfoResponse.SerializeToString,
            ),
            'Speech2Text': grpc.stream_stream_rpc_method_handler(
                    servicer.Speech2Text,
                    request_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.S2TRequest.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.S2TResponse.SerializeToString,
            ),
            'Text2TextInfo': grpc.unary_stream_rpc_method_handler(
                    servicer.Text2TextInfo,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2TInfoResponse.SerializeToString,
            ),
            'Text2Text': grpc.stream_stream_rpc_method_handler(
                    servicer.Text2Text,
                    request_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2TRequest.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2TResponse.SerializeToString,
            ),
            'Text2SpeechInfo': grpc.unary_stream_rpc_method_handler(
                    servicer.Text2SpeechInfo,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2SInfoResponse.SerializeToString,
            ),
            'Text2Speech': grpc.stream_stream_rpc_method_handler(
                    servicer.Text2Speech,
                    request_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2SRequest.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.T2SResponse.SerializeToString,
            ),
            'AdminAddS2TNode': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminAddS2TNode,
                    request_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeRequest.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeResponse.SerializeToString,
            ),
            'AdminListS2TNodes': grpc.unary_stream_rpc_method_handler(
                    servicer.AdminListS2TNodes,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.ListNodesResponse.SerializeToString,
            ),
            'AdminRemoveS2TNode': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminRemoveS2TNode,
                    request_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeRequest.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeResponse.SerializeToString,
            ),
            'AdminAddT2TNode': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminAddT2TNode,
                    request_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeRequest.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeResponse.SerializeToString,
            ),
            'AdminListT2TNodes': grpc.unary_stream_rpc_method_handler(
                    servicer.AdminListT2TNodes,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.ListNodesResponse.SerializeToString,
            ),
            'AdminRemoveT2TNode': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminRemoveT2TNode,
                    request_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeRequest.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeResponse.SerializeToString,
            ),
            'AdminAddT2SNode': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminAddT2SNode,
                    request_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeRequest.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeResponse.SerializeToString,
            ),
            'AdminListT2SNodes': grpc.unary_stream_rpc_method_handler(
                    servicer.AdminListT2SNodes,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.ListNodesResponse.SerializeToString,
            ),
            'AdminRemoveT2SNode': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminRemoveT2SNode,
                    request_deserializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeRequest.FromString,
                    response_serializer=MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MLLPStreaming', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MLLPStreaming(object):
    """*
    <p>This gRPC API offers streaming speech-to-text (S2T, <i>rpc Speech2Text</i>), text-to-text<b>*</b> (T2T, <i>rpc Text2Text</i>), and text-to-speech (TTS, <i>rpc Text2Speech</i>) services that, combined, can cover the following use cases: </p>
    <ul>
    <li> <b>Streaming Automatic Speech Recognition (ASR):</b> </li>
    <ul><li><i>Speech2Text</i> rpc call.</li></ul>
    <li> <b>Streaming Speech Translation (ST):</b> </li>
    <ul><li><i>Speech2Text + Text2Text</i> piped rpc calls.</li></ul>
    <li> <b>Streaming Speech Dubbing (SD):</b> </li>
    <ul><li><i>Speech2Text + Text2Text + Text2Speech</i> piped rpc calls.</li></ul>
    <li> <b>Simultaneous Machine Translation (MT):</b> </li>
    <ul><li><i>Text2Text</i> rpc call.</li></ul>
    <li> <b>Incremental text-to-speech (TTS):</b></li>
    <ul><li><i>Text2Speech</i> rpc call, or</li></ul>
    <ul><li><i>Text2Text + Text2Speech</i> piped rpc calls.</li></ul>
    </ul>
    <p> <b>*Note</b>: T2T systems can be either Machine Translation (MT) systems that translate text from a source to a target language, or monolingual text postprocessing systems for adding casing, punctuation signs, markup, etc. </p>
    <p>To make use of these three atomic services:</p>
    <ol>
    <li> A rpc call to <i>AuthToken</i> must be done using your API credentials to get a valid auth token. This token has to be provided to the rest of rpc methods as metadata, with the following header key: <i>"x-mllp-auth-token"</i>. </li>
    <li> The next step would be to retrieve information about existing S2T, T2T and T2S systems and their availabilty. This is done by calling the rpc methods <i>Speech2TextInfo</i>, <i>Text2TextInfo</i>, and <i>Text2SpeechInfo</i>, respectively. </li>
    <li> Finally, <i>Speech2Text</i>, <i>Text2Text</i>, and/or <i>Text2Speech</i> rpc methods are to be called by passing the elected S2T, T2T and T2S system IDs. </li>
    </ol>
    """

    @staticmethod
    def AuthToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLLPStreaming/AuthToken',
            MLLPStreamingClient_dot_mllp__streaming__pb2.AuthTokenRequest.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.AuthTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Speech2TextInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MLLPStreaming/Speech2TextInfo',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.S2TInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Speech2Text(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/MLLPStreaming/Speech2Text',
            MLLPStreamingClient_dot_mllp__streaming__pb2.S2TRequest.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.S2TResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Text2TextInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MLLPStreaming/Text2TextInfo',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.T2TInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Text2Text(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/MLLPStreaming/Text2Text',
            MLLPStreamingClient_dot_mllp__streaming__pb2.T2TRequest.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.T2TResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Text2SpeechInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MLLPStreaming/Text2SpeechInfo',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.T2SInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Text2Speech(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/MLLPStreaming/Text2Speech',
            MLLPStreamingClient_dot_mllp__streaming__pb2.T2SRequest.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.T2SResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminAddS2TNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLLPStreaming/AdminAddS2TNode',
            MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeRequest.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminListS2TNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MLLPStreaming/AdminListS2TNodes',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.ListNodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminRemoveS2TNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLLPStreaming/AdminRemoveS2TNode',
            MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeRequest.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminAddT2TNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLLPStreaming/AdminAddT2TNode',
            MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeRequest.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminListT2TNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MLLPStreaming/AdminListT2TNodes',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.ListNodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminRemoveT2TNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLLPStreaming/AdminRemoveT2TNode',
            MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeRequest.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminAddT2SNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLLPStreaming/AdminAddT2SNode',
            MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeRequest.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.AddNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminListT2SNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MLLPStreaming/AdminListT2SNodes',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.ListNodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminRemoveT2SNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLLPStreaming/AdminRemoveT2SNode',
            MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeRequest.SerializeToString,
            MLLPStreamingClient_dot_mllp__streaming__pb2.RemoveNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
