# coding: utf-8

"""
    Montelo API SDK

    This server handles creating traces and logs.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from montelo.client.models.token_info import TokenInfo
from typing import Optional, Set
from typing_extensions import Self

class LogInput(BaseModel):
    """
    LogInput
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    source: StrictStr
    model: Optional[StrictStr] = None
    input: Optional[Dict[str, Any]] = None
    output: Optional[Dict[str, Any]] = None
    start_time: Optional[StrictStr] = Field(default=None, alias="startTime")
    end_time: Optional[StrictStr] = Field(default=None, alias="endTime")
    duration: Optional[Union[StrictFloat, StrictInt]] = None
    tokens: Optional[TokenInfo] = None
    extra: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "source", "model", "input", "output", "startTime", "endTime", "duration", "tokens", "extra"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['MANUAL', 'OPENAI', 'ANTHROPIC', 'MISTRAL', 'COHERE']):
            raise ValueError("must be one of enum values ('MANUAL', 'OPENAI', 'ANTHROPIC', 'MISTRAL', 'COHERE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tokens
        if self.tokens:
            _dict['tokens'] = self.tokens.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "source": obj.get("source"),
            "model": obj.get("model"),
            "input": obj.get("input"),
            "output": obj.get("output"),
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "duration": obj.get("duration"),
            "tokens": TokenInfo.from_dict(obj["tokens"]) if obj.get("tokens") is not None else None,
            "extra": obj.get("extra")
        })
        return _obj


