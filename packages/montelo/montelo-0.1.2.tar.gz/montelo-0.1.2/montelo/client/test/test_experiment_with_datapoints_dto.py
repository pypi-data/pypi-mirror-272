# coding: utf-8

"""
    Montelo API SDK

    This server handles creating traces and logs.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from montelo.client.models.experiment_with_datapoints_dto import ExperimentWithDatapointsDto

class TestExperimentWithDatapointsDto(unittest.TestCase):
    """ExperimentWithDatapointsDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExperimentWithDatapointsDto:
        """Test ExperimentWithDatapointsDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExperimentWithDatapointsDto`
        """
        model = ExperimentWithDatapointsDto()
        if include_optional:
            return ExperimentWithDatapointsDto(
                id = '',
                dataset_id = '',
                name = '',
                description = '',
                created_at = '',
                dataset = montelo.client.models.full_dataset_dto.FullDatasetDto(
                    id = '', 
                    env_id = '', 
                    slug = '', 
                    name = '', 
                    description = '', 
                    input_schema = montelo.client.models.input_schema.inputSchema(), 
                    output_schema = montelo.client.models.output_schema.outputSchema(), 
                    is_fine_tuning = True, 
                    datapoints = [
                        montelo.client.models.datapoint_dto.DatapointDto(
                            id = '', 
                            input = montelo.client.models.input.input(), 
                            expected_output = montelo.client.models.expected_output.expectedOutput(), 
                            source = 'TRACE', 
                            source_id = '', 
                            dataset_id = '', 
                            split = 'TRAIN', 
                            created_at = '', 
                            metadata = montelo.client.models.metadata.metadata(), )
                        ], )
            )
        else:
            return ExperimentWithDatapointsDto(
                id = '',
                dataset_id = '',
                created_at = '',
                dataset = montelo.client.models.full_dataset_dto.FullDatasetDto(
                    id = '', 
                    env_id = '', 
                    slug = '', 
                    name = '', 
                    description = '', 
                    input_schema = montelo.client.models.input_schema.inputSchema(), 
                    output_schema = montelo.client.models.output_schema.outputSchema(), 
                    is_fine_tuning = True, 
                    datapoints = [
                        montelo.client.models.datapoint_dto.DatapointDto(
                            id = '', 
                            input = montelo.client.models.input.input(), 
                            expected_output = montelo.client.models.expected_output.expectedOutput(), 
                            source = 'TRACE', 
                            source_id = '', 
                            dataset_id = '', 
                            split = 'TRAIN', 
                            created_at = '', 
                            metadata = montelo.client.models.metadata.metadata(), )
                        ], ),
        )
        """

    def testExperimentWithDatapointsDto(self):
        """Test ExperimentWithDatapointsDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
