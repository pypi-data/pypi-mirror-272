def a8():
    print('''


# -*- coding: utf-8 -*-
"""A8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VpwTVCOHeJZ7GDhLnOAnZK6WbKOvD8vG

<h2 style='color:blue' align='center'>Small Image Classification Using Artificial Neural Network (ANN)</h2>

In this notebook, we will classify small images cifar10 dataset from tensorflow keras datasets. There are total 10 classes as shown below. We will use ANN for classification

<img src="small_images.jpg" />
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

"""<h4 style="color:purple">Load the dataset</h4>"""

(X_train, y_train), (X_test,y_test) = datasets.cifar10.load_data()
X_train.shape

"""What is the percentage of data division? 80:20? or something else? calculate"""

X_test.shape

"""what is the interpretation of 32  * 31 * 3?

Here we see there are 50000 training images and 1000 test images
"""

y_train.shape

y_train[:5]

"""y_train is a 2D array, for our classification having 1D array is good enough. so we will convert this to now 1D array"""

y_train = y_train.reshape(-1,)
y_train

y_test = y_test.reshape(-1,)

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

"""Let's plot some images to see what they are"""

def plot_sample(X, y, index):
    plt.figure(figsize = (15,2))
    plt.imshow(X[index])
    plt.xlabel(classes[y[index]])

plot_sample(X_train, y_train, 0)

plot_sample(X_train, y_train, 1)

"""Normalize the images to a number from 0 to 1. Image has 3 channels (R,G,B) and each value in the channel can range from 0 to 255. Hence to normalize in 0-->1 range, we need to divide it by 255

<h4 style="color:purple">Normalizing the training data</h4>
"""

X_train = X_train / 255.0
X_test = X_test / 255.0

"""<h4 style="color:purple">Build simple artificial neural network for image classification</h4>"""

ann = models.Sequential([
        layers.Flatten(input_shape=(32,32,3)),
        layers.Dense(100, activation='relu'),
        layers.Dense(100, activation='relu'),
        layers.Dense(10, activation='softmax')
    ])

# Parameter Calculations
3072*100
100*100
10000*10
307200 + 10000 +1000 +100+ 100+ 10

ann.summary()

import pydot
from tensorflow import keras
keras.utils.plot_model(ann)

ann.compile(optimizer='SGD',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

ann.fit(X_train, y_train, epochs=5)

"""**You can see that at the end of 5 epochs, accuracy is at around 45.3%**"""

from sklearn.metrics import confusion_matrix , classification_report
import numpy as np
y_pred = ann.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]
print("Classification Report: \n", classification_report(y_test, y_pred_classes))
''')
a8()