config:

    # Python package name (to be configured at project level)
    pythonPackage: ${projectName}
    pythonPackageForWheel:
        __resolver__: nmk_python.build.PythonPackageForWheel

    # Python artifacts directory
    pythonArtifacts: ${outputDir}/artifacts

    # Python build directory
    pythonBuildDir: ${outputDir}/python

    # Python source distribution + wheel artifacts
    pythonWheel: ${pythonArtifacts}/${pythonPackageForWheel}-${pythonVersion}-py3-none-any.whl

    # Add setup file for build config
    pythonSetupCfgFiles:
        - ${BASEDIR}/templates/build.cfg

    # Python package dependencies (also contributed to venv)
    pythonPackageRequirements: []
    venvPkgDeps:
        - setuptools
        - wheel
        - ${pythonPackageRequirements}

    # Python files to be ignored
    gitIgnoredFiles:
        - .eggs/
        - "*.egg-info/"
        - "*.pyc"
        - __pycache__

    # Additional github publish step: publish on pypi.org
    githubPublishSteps:
        - name: Publish package on pypi.org
          uses: pypa/gh-action-pypi-publish@v1.5.0
          with:
            user: __token__
            password: ${{ secrets.pypi_password }}
            packages_dir: ${r!pythonArtifacts}

tasks:

    # Python module build
    py.build:
        description: Build python package
        emoji: ":snake:.:hammer:"
        deps:
            - py.setup
            - py.analyze
        appendToDeps: build
        if: ${pythonSrcFiles}   # Only if python source files are found
        output:
            - ${pythonWheel}
        input:
            - ${pythonSrcFiles}
            - ${pythonSetupCfg}
        builder: nmk_python.build.PackageBuilder
        params:
            artifacts: ${pythonArtifacts}
            build_dir: ${pythonBuildDir}

    # Python module install
    py.install:
        description: Install python package
        emoji: ":snake:.:inbox_tray:"
        deps:
            - py.build
        appendToDeps: build
        if: ${pythonSrcFiles}   # Only if python source files are found
        input: ${pythonWheel}
        output: 
            - ${ROOTDIR}/${venvName}
            - ${venvState}
        builder: nmk_python.build.Installer
        params:
            name: ${pythonPackage}
            pip_args: --force-reinstall --no-deps ${venvPipArgs}
            # - force reinstall because otherwise install will be skipped if version didn't changed
            # - but skip dependencies to avoid reinstalling everything (deps are already installed by py.venv task)
