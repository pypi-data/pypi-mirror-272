[tool.poetry]
name = "hypnus"
version = "1.0.0"
description = "Power off computer on EDF Tempo red days."
authors = ["guillaumedsde <30023543+guillaumedsde@users.noreply.github.com>"]
license = "MIT"
repository = "https://github.com/guillaumedsde/hypnus"
readme = "README.md"
keywords = ["shutdown", "EDF", "tempo"]
package-mode = true
classifiers = [
    "Development Status :: 3 - Alpha",
    "Topic :: System :: Shells",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Intended Audience :: Information Technology"
]


[tool.poetry.dependencies]
python = ">= 3.8, < 3.13"

[tool.poetry.group.dev.dependencies]
ruff = "0.4.3"
mypy = "1.10.0"
pytest = "8.2.0"
pytest-cov = "5.0.0"
coverage = "7.5.1"

[tool.poetry.scripts]
hypnus = 'hypnus.main:main'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = true
files = ["hypnus/**/*.py", "tests/**/*.py"]

[tool.ruff]
include = ["hypnus/**/*.py", "tests/**/*.py"]
exclude = ["__pycache__"]
# NOTE: use minimum python version supported by hypnus, see:
#       https://github.com/astral-sh/ruff/issues/2519
target-version = "py38"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # Don't require type annotations for self
    "ANN101",
    # Don't require type annotations for cls
    "ANN102",
    # Don't require module docstring
    "D100",
    # Ignore missing docstring in public classes, they should be written on an "as needed" basis
    "D101",
    # Ignore missing docstring in public functions, they should be written on an "as needed" basis
    "D103",
    # Don't require package docstring
    "D104",
    # Ignore missing docstring in magic method, they should be written on an "as needed" basis
    "D105",
    # Don't require __init__ docstring
    "D107",
    # D212 and D213 are mutually exclusive, we chose the latter
    # https://github.com/PyCQA/pydocstyle/issues/242#issuecomment-288166773
    "D212",
    # Allows explicite scope definition in pytest fixture
    "PT003",
    # Disables enforcing list of tuple for parameterize arguments since looser typing is allowed by pytest
    # https://docs.pytest.org/en/7.2.x/how-to/parametrize.html#pytest-mark-parametrize-parametrizing-test-functions
    "PT007",
    # Allow TODO
    "FIX002",
    # Allow no author on TODO
    "TD002",
    # Allow no issue link on TODO
    "TD003",
]

[tool.ruff.lint.pydocstyle]
# NOTE: Use Google-style docstrings.
#       https://github.com/charliermarsh/ruff/blob/f6fd702d41e0456d78abd66055b75684e612c9bb/README.md#convention
convention = "google"

[tool.ruff.lint.flake8-annotations]
# NOTE: allow ommission of __init__ return type
#       https://github.com/charliermarsh/ruff/blob/f6fd702d41e0456d78abd66055b75684e612c9bb/README.md#mypy-init-return
mypy-init-return = true

[tool.ruff.lint.per-file-ignores]
"tests/**/test_*.py" = [
    # Allow use of assert in tests
    "S101",
    # Allow testing private module members
    "SLF001",
    # Don't warn about implicit module, pytest discovery does not require modules
    "INP001",
]

[tool.pytest.ini_options]
testpaths = ["tests/"]
xfail_strict = true
addopts = """
-W error
--cov
--cov-report=xml
"""

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
