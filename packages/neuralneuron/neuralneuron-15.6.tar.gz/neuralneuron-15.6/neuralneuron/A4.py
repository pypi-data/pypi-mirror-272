def a4():
    print('''

# -*- coding: utf-8 -*-
"""A4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bg2Pr_q2bTsF8I5dYMnWZ_DAyeoROGJy
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

x1 = (1,1,-1,-1)
x2 = (1,-1,1,-1)
t = (1,-1,-1,-1)
b = 1
w = np.ones(2)
theta = 0.2
lr = 1

def weight_update(w,t,x1,x2):
  w[0] = w[0] + (lr * t * x1)
  w[1] = w[1] + (lr * t * x2)

def bias_update(b,t):
  return b + (lr * t)
def activation(Y_in):
  if Y_in >= theta: return 1
  else: return -1

epochs = 0
while(epochs<=2):
    for i in range(4):
      Y_in = x1[i]*w[0] + x2[i]*w[1] + b

      Y_calc = activation(Y_in)
      if Y_calc != t[i]:
        weight_update(w,t[i],x1[i],x2[i])
        b = bias_update(b,t[i])

    epochs+=1

print(w)

slope = -(w[0] / w[1])
c = - ( b / w[1] )

line = lambda x: slope * x + c
y1 = np.array([line(x) for x in x1])

plt.figure(figsize = (10,10))
sns.scatterplot(x = x1,y = x2,color = "red")
plt.plot(np.array(x1),y1)
plt.show()


''')
a4()