def a8():
    print('''

# -*- coding: utf-8 -*-
"""ANNprac6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gfeFBuXuIN5XF9mBJaxOTYwGtikIkDm3

Importing necessary libraries
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

"""Load CIFAR-10 dataset and split the dataset into training and testing sets"""

(x_train, y_train), (x_test, y_test) = datasets.cifar10.load_data()

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

"""Here we see there are 50000 training images and 10000 test images

Normalize pixel values to between 0 and 1
"""

x_train = x_train/255.0
x_test = x_test/255.0

y_train[:5]

"""y_train is a 2D array, for our classification having 1D array is good enough. so we will convert this to now 1D array"""

y_train = y_train.reshape(-1,)
y_train[:5]

y_test = y_test.reshape(-1,)

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

def plot_sample(x, y, index):
    plt.figure(figsize=(15, 2))
    plt.imshow(x[index])
    plt.xlabel(classes[y[index]])  # Get the class name from the list
    plt.show()

"""Plot a sample image from the training data"""

plot_sample(x_train, y_train, 0)

plot_sample(x_train, y_train, 1)

"""Creating ANN Model:"""

ann = models.Sequential([
    layers.Flatten(input_shape = (32,32,3)),
    layers.Dense(3000, activation = 'relu'),
    layers.Dense(1000, activation = 'relu'),
    layers.Dense(10, activation = 'softmax'),
])
ann.summary()

ann.compile(optimizer = 'SGD',
            loss = 'sparse_categorical_crossentropy',
            metrics = ['accuracy'])

"""Training ANN model"""

ann.fit(x_train,y_train,epochs=10)

from sklearn.metrics import confusion_matrix , classification_report
import numpy as np
y_pred = ann.predict(x_test)
y_pred_classes = [np.argmax(element) for element in y_pred]

print("Classification Report: \n", classification_report(y_test, y_pred_classes))

"""Evaluating the ANN model"""

ann.evaluate(x_test,y_test)

"""Predicting the output"""

y_pred = ann.predict(x_test)
y_pred[:5]

"""Displaying the classes"""

y_classes = [np.argmax(element) for element in y_pred]
y_classes[:5]

y_test[:5]

plot_sample(x_test, y_test,3)

classes[y_classes[3]]

''')
a8()