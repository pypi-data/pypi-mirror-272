# -*- coding: utf-8 -*-
"""ANNprac10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-wMWFrNZ-FAWYb33YeT6T5jRZ1IB1u1L

Importing necessary libraries
"""

import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np

"""Loading the data and spliting between train and validation sets"""

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_valid, y_valid) = mnist.load_data()

print(x_train.shape)
print(x_valid.shape)
print(y_train.shape)
print(y_valid.shape)

x_train.min()

x_train.max()

"""Preprocess the data"""

x_train, x_valid = x_train / 255.0, x_valid / 255.0

"""Reshape images to add channel dimension"""

x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_valid = x_valid.reshape(x_valid.shape[0], 28, 28, 1)

x_train.shape

x_train.min()

x_train.max()

y_train[:5]

y_train = y_train.reshape(-1,)
y_train[:5]

y_valid = y_valid.reshape(-1,)

classes = ["0","1","2","3","4","5","6","7","8","9"]

"""Let's plot some images to see what they are"""

def plot_sample(x, y, index):
    plt.figure(figsize = (15,2))
    plt.imshow(x[index])
    plt.xlabel(classes[y[index]])

plot_sample(x_train, y_train, 0)

plot_sample(x_train, y_train, 1)

"""Define model architecture"""

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

model.summary()

"""Compile the model"""

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

"""Train the model"""

model.fit(x_train, y_train, epochs=5)

"""Evaluate the model"""

model.evaluate(x_valid,y_valid)

test_loss, test_acc = model.evaluate(x_valid,  y_valid, verbose=2)
print('\nTest accuracy:', test_acc)

"""Make predictions"""

y_pred = model.predict(x_valid)
y_pred[:5]

y_classes = [np.argmax(element) for element in y_pred]
y_classes[:5]

y_valid[:5]

plot_sample(x_valid, y_valid,3)

classes[y_classes[3]]