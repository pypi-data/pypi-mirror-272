(self["webpackChunk_datalayer_jupyter_viewer"] = self["webpackChunk_datalayer_jupyter_viewer"] || []).push([[758],{

/***/ 265:
/***/ ((module) => {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(() => {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = () => ([]);
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = 265;
module.exports = webpackEmptyAsyncContext;

/***/ }),

/***/ 38865:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "PIPLITE_INDEX_SCHEMA": () => (/* reexport */ schema_piplite_v0_schema_namespaceObject),
  "PyodideKernel": () => (/* reexport */ PyodideKernel),
  "PyodideRemoteKernel": () => (/* reexport */ worker/* PyodideRemoteKernel */.O),
  "allJSONUrl": () => (/* reexport */ all_namespaceObject2),
  "ipykernelWheelUrl": () => (/* reexport */ ipykernel_6_9_2_py3_none_any_namespaceObject2),
  "pipliteWheelUrl": () => (/* reexport */ piplite_0_2_3_py3_none_any_namespaceObject2),
  "pyodide_kernelWheelUrl": () => (/* reexport */ pyodide_kernel_0_2_3_py3_none_any_namespaceObject2),
  "widgetsnbextensionWheelUrl": () => (/* reexport */ widgetsnbextension_3_6_6_py3_none_any_namespaceObject2),
  "widgetsnbextensionWheelUrl1": () => (/* reexport */ widgetsnbextension_4_0_10_py3_none_any_namespaceObject2)
});

;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/pypi/all.json
const all_namespaceObject = __webpack_require__.p + "pypi/all.json";
var all_namespaceObject2 = /*#__PURE__*/__webpack_require__.t(all_namespaceObject);
;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/pypi/ipykernel-6.9.2-py3-none-any.whl
const ipykernel_6_9_2_py3_none_any_namespaceObject = __webpack_require__.p + "pypi/ipykernel-6.9.2-py3-none-any.whl";
var ipykernel_6_9_2_py3_none_any_namespaceObject2 = /*#__PURE__*/__webpack_require__.t(ipykernel_6_9_2_py3_none_any_namespaceObject);
;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/pypi/piplite-0.2.3-py3-none-any.whl
const piplite_0_2_3_py3_none_any_namespaceObject = __webpack_require__.p + "pypi/piplite-0.2.3-py3-none-any.whl";
var piplite_0_2_3_py3_none_any_namespaceObject2 = /*#__PURE__*/__webpack_require__.t(piplite_0_2_3_py3_none_any_namespaceObject);
;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/pypi/pyodide_kernel-0.2.3-py3-none-any.whl
const pyodide_kernel_0_2_3_py3_none_any_namespaceObject = __webpack_require__.p + "pypi/pyodide_kernel-0.2.3-py3-none-any.whl";
var pyodide_kernel_0_2_3_py3_none_any_namespaceObject2 = /*#__PURE__*/__webpack_require__.t(pyodide_kernel_0_2_3_py3_none_any_namespaceObject);
;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/pypi/widgetsnbextension-3.6.6-py3-none-any.whl
const widgetsnbextension_3_6_6_py3_none_any_namespaceObject = __webpack_require__.p + "pypi/widgetsnbextension-3.6.6-py3-none-any.whl";
var widgetsnbextension_3_6_6_py3_none_any_namespaceObject2 = /*#__PURE__*/__webpack_require__.t(widgetsnbextension_3_6_6_py3_none_any_namespaceObject);
;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/pypi/widgetsnbextension-4.0.10-py3-none-any.whl
const widgetsnbextension_4_0_10_py3_none_any_namespaceObject = __webpack_require__.p + "pypi/widgetsnbextension-4.0.10-py3-none-any.whl";
var widgetsnbextension_4_0_10_py3_none_any_namespaceObject2 = /*#__PURE__*/__webpack_require__.t(widgetsnbextension_4_0_10_py3_none_any_namespaceObject);
;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/lib/_pypi.js
// this file is autogenerated from the wheels described in ../package.json












// EXTERNAL MODULE: ./node_modules/@lumino/coreutils/dist/index.js
var dist = __webpack_require__(47963);
// EXTERNAL MODULE: ./node_modules/@jupyterlab/coreutils/lib/index.js
var lib = __webpack_require__(48425);
// EXTERNAL MODULE: ./node_modules/@jupyterlab/services/lib/index.js
var services_lib = __webpack_require__(88362);
// EXTERNAL MODULE: ./node_modules/@lumino/signaling/dist/index.es6.js
var index_es6 = __webpack_require__(98209);
;// CONCATENATED MODULE: ./node_modules/@jupyterlite/kernel/lib/kernel.js


/**
 * A base kernel class handling basic kernel messaging.
 */
class BaseKernel {
  /**
   * Construct a new BaseKernel.
   *
   * @param options The instantiation options for a BaseKernel.
   */
  constructor(options) {
    this._history = [];
    this._executionCount = 0;
    this._isDisposed = false;
    this._disposed = new index_es6.Signal(this);
    this._parentHeader = undefined;
    this._parent = undefined;
    const {
      id,
      name,
      location,
      sendMessage
    } = options;
    this._id = id;
    this._name = name;
    this._location = location;
    this._sendMessage = sendMessage;
  }
  /**
   * A promise that is fulfilled when the kernel is ready.
   */
  get ready() {
    return Promise.resolve();
  }
  /**
   * Return whether the kernel is disposed.
   */
  get isDisposed() {
    return this._isDisposed;
  }
  /**
   * A signal emitted when the kernel is disposed.
   */
  get disposed() {
    return this._disposed;
  }
  /**
   * Get the kernel id
   */
  get id() {
    return this._id;
  }
  /**
   * Get the name of the kernel
   */
  get name() {
    return this._name;
  }
  /**
   * The location in the virtual filesystem from which the kernel was started.
   */
  get location() {
    return this._location;
  }
  /**
   * The current execution count
   */
  get executionCount() {
    return this._executionCount;
  }
  /**
   * Get the last parent header
   */
  get parentHeader() {
    return this._parentHeader;
  }
  /**
   * Get the last parent message (mimic ipykernel's get_parent)
   */
  get parent() {
    return this._parent;
  }
  /**
   * Dispose the kernel.
   */
  dispose() {
    if (this.isDisposed) {
      return;
    }
    this._isDisposed = true;
    this._disposed.emit(void 0);
  }
  /**
   * Handle an incoming message from the client.
   *
   * @param msg The message to handle
   */
  async handleMessage(msg) {
    this._busy(msg);
    this._parent = msg;
    const msgType = msg.header.msg_type;
    switch (msgType) {
      case 'kernel_info_request':
        await this._kernelInfo(msg);
        break;
      case 'execute_request':
        await this._execute(msg);
        break;
      case 'input_reply':
        this.inputReply(msg.content);
        break;
      case 'inspect_request':
        await this._inspect(msg);
        break;
      case 'is_complete_request':
        await this._isCompleteRequest(msg);
        break;
      case 'complete_request':
        await this._complete(msg);
        break;
      case 'history_request':
        await this._historyRequest(msg);
        break;
      case 'comm_open':
        await this.commOpen(msg);
        break;
      case 'comm_msg':
        await this.commMsg(msg);
        break;
      case 'comm_close':
        await this.commClose(msg);
        break;
      default:
        break;
    }
    this._idle(msg);
  }
  /**
   * Stream an event from the kernel
   *
   * @param parentHeader The parent header.
   * @param content The stream content.
   */
  stream(content, parentHeader = undefined) {
    var _a;
    const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;
    const message = services_lib.KernelMessage.createMessage({
      channel: 'iopub',
      msgType: 'stream',
      // TODO: better handle this
      session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',
      parentHeader: parentHeaderValue,
      content
    });
    this._sendMessage(message);
  }
  /**
   * Send a `display_data` message to the client.
   *
   * @param parentHeader The parent header.
   * @param content The display_data content.
   */
  displayData(content, parentHeader = undefined) {
    var _a, _b;
    // Make sure metadata is always set
    const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;
    content.metadata = (_a = content.metadata) !== null && _a !== void 0 ? _a : {};
    const message = services_lib.KernelMessage.createMessage({
      channel: 'iopub',
      msgType: 'display_data',
      // TODO: better handle this
      session: (_b = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _b !== void 0 ? _b : '',
      parentHeader: parentHeaderValue,
      content
    });
    this._sendMessage(message);
  }
  /**
   * Send a `input_request` message to the client.
   *
   * @param parentHeader The parent header.
   * @param content The input_request content.
   */
  inputRequest(content, parentHeader = undefined) {
    var _a;
    const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;
    const message = services_lib.KernelMessage.createMessage({
      channel: 'stdin',
      msgType: 'input_request',
      // TODO: better handle this
      session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',
      parentHeader: parentHeaderValue,
      content
    });
    this._sendMessage(message);
  }
  /**
   * Send an `execute_result` message.
   *
   * @param parentHeader The parent header.
   * @param content The execute result content.
   */
  publishExecuteResult(content, parentHeader = undefined) {
    var _a;
    const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;
    const message = services_lib.KernelMessage.createMessage({
      channel: 'iopub',
      msgType: 'execute_result',
      // TODO: better handle this
      session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',
      parentHeader: parentHeaderValue,
      content
    });
    this._sendMessage(message);
  }
  /**
   * Send an `error` message to the client.
   *
   * @param parentHeader The parent header.
   * @param content The error content.
   */
  publishExecuteError(content, parentHeader = undefined) {
    var _a;
    const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;
    const message = services_lib.KernelMessage.createMessage({
      channel: 'iopub',
      msgType: 'error',
      // TODO: better handle this
      session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',
      parentHeader: parentHeaderValue,
      content
    });
    this._sendMessage(message);
  }
  /**
   * Send a `update_display_data` message to the client.
   *
   * @param parentHeader The parent header.
   * @param content The update_display_data content.
   */
  updateDisplayData(content, parentHeader = undefined) {
    var _a;
    const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;
    const message = services_lib.KernelMessage.createMessage({
      channel: 'iopub',
      msgType: 'update_display_data',
      // TODO: better handle this
      session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',
      parentHeader: parentHeaderValue,
      content
    });
    this._sendMessage(message);
  }
  /**
   * Send a `clear_output` message to the client.
   *
   * @param parentHeader The parent header.
   * @param content The clear_output content.
   */
  clearOutput(content, parentHeader = undefined) {
    var _a;
    const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;
    const message = services_lib.KernelMessage.createMessage({
      channel: 'iopub',
      msgType: 'clear_output',
      // TODO: better handle this
      session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',
      parentHeader: parentHeaderValue,
      content
    });
    this._sendMessage(message);
  }
  /**
   * Send a `comm` message to the client.
   *
   * @param .
   */
  handleComm(type, content, metadata, buffers, parentHeader = undefined) {
    var _a;
    const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;
    const message = services_lib.KernelMessage.createMessage({
      channel: 'iopub',
      msgType: type,
      // TODO: better handle this
      session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',
      parentHeader: parentHeaderValue,
      content,
      metadata,
      buffers
    });
    this._sendMessage(message);
  }
  /**
   * Send an 'idle' status message.
   *
   * @param parent The parent message
   */
  _idle(parent) {
    const message = services_lib.KernelMessage.createMessage({
      msgType: 'status',
      session: parent.header.session,
      parentHeader: parent.header,
      channel: 'iopub',
      content: {
        execution_state: 'idle'
      }
    });
    this._sendMessage(message);
  }
  /**
   * Send a 'busy' status message.
   *
   * @param parent The parent message.
   */
  _busy(parent) {
    const message = services_lib.KernelMessage.createMessage({
      msgType: 'status',
      session: parent.header.session,
      parentHeader: parent.header,
      channel: 'iopub',
      content: {
        execution_state: 'busy'
      }
    });
    this._sendMessage(message);
  }
  /**
   * Handle a kernel_info_request message
   *
   * @param parent The parent message.
   */
  async _kernelInfo(parent) {
    const content = await this.kernelInfoRequest();
    const message = services_lib.KernelMessage.createMessage({
      msgType: 'kernel_info_reply',
      channel: 'shell',
      session: parent.header.session,
      parentHeader: parent.header,
      content
    });
    this._sendMessage(message);
  }
  /**
   * Handle a `history_request` message
   *
   * @param msg The parent message.
   */
  async _historyRequest(msg) {
    const historyMsg = msg;
    const message = services_lib.KernelMessage.createMessage({
      msgType: 'history_reply',
      channel: 'shell',
      parentHeader: historyMsg.header,
      session: msg.header.session,
      content: {
        status: 'ok',
        history: this._history
      }
    });
    this._sendMessage(message);
  }
  /**
   * Send an `execute_input` message.
   *
   * @param msg The parent message.
   */
  _executeInput(msg) {
    const parent = msg;
    const code = parent.content.code;
    const message = services_lib.KernelMessage.createMessage({
      msgType: 'execute_input',
      parentHeader: parent.header,
      channel: 'iopub',
      session: msg.header.session,
      content: {
        code,
        execution_count: this._executionCount
      }
    });
    this._sendMessage(message);
  }
  /**
   * Handle an execute_request message.
   *
   * @param msg The parent message.
   */
  async _execute(msg) {
    const executeMsg = msg;
    const content = executeMsg.content;
    if (content.store_history) {
      this._executionCount++;
    }
    // TODO: handle differently
    this._parentHeader = executeMsg.header;
    this._executeInput(executeMsg);
    if (content.store_history) {
      this._history.push([0, 0, content.code]);
    }
    const reply = await this.executeRequest(executeMsg.content);
    const message = services_lib.KernelMessage.createMessage({
      msgType: 'execute_reply',
      channel: 'shell',
      parentHeader: executeMsg.header,
      session: msg.header.session,
      content: reply
    });
    this._sendMessage(message);
  }
  /**
   * Handle an complete_request message
   *
   * @param msg The parent message.
   */
  async _complete(msg) {
    const completeMsg = msg;
    const content = await this.completeRequest(completeMsg.content);
    const message = services_lib.KernelMessage.createMessage({
      msgType: 'complete_reply',
      parentHeader: completeMsg.header,
      channel: 'shell',
      session: msg.header.session,
      content
    });
    this._sendMessage(message);
  }
  /**
   * Handle an inspect_request message
   *
   * @param msg The parent message.
   */
  async _inspect(msg) {
    const inspectMsg = msg;
    const content = await this.inspectRequest(inspectMsg.content);
    const message = services_lib.KernelMessage.createMessage({
      msgType: 'inspect_reply',
      parentHeader: inspectMsg.header,
      channel: 'shell',
      session: msg.header.session,
      content
    });
    this._sendMessage(message);
  }
  /**
   * Handle an is_complete_request message
   *
   * @param msg The parent message.
   */
  async _isCompleteRequest(msg) {
    const isCompleteMsg = msg;
    const content = await this.isCompleteRequest(isCompleteMsg.content);
    const message = services_lib.KernelMessage.createMessage({
      msgType: 'is_complete_reply',
      parentHeader: isCompleteMsg.header,
      channel: 'shell',
      session: msg.header.session,
      content
    });
    this._sendMessage(message);
  }
}
;// CONCATENATED MODULE: ./node_modules/comlink/dist/esm/comlink.mjs
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const proxyMarker = Symbol("Comlink.proxy");
const createEndpoint = Symbol("Comlink.endpoint");
const releaseProxy = Symbol("Comlink.releaseProxy");
const finalizer = Symbol("Comlink.finalizer");
const throwMarker = Symbol("Comlink.thrown");
const isObject = (val) => (typeof val === "object" && val !== null) || typeof val === "function";
/**
 * Internal transfer handle to handle objects marked to proxy.
 */
const proxyTransferHandler = {
    canHandle: (val) => isObject(val) && val[proxyMarker],
    serialize(obj) {
        const { port1, port2 } = new MessageChannel();
        expose(obj, port1);
        return [port2, [port2]];
    },
    deserialize(port) {
        port.start();
        return wrap(port);
    },
};
/**
 * Internal transfer handler to handle thrown exceptions.
 */
const throwTransferHandler = {
    canHandle: (value) => isObject(value) && throwMarker in value,
    serialize({ value }) {
        let serialized;
        if (value instanceof Error) {
            serialized = {
                isError: true,
                value: {
                    message: value.message,
                    name: value.name,
                    stack: value.stack,
                },
            };
        }
        else {
            serialized = { isError: false, value };
        }
        return [serialized, []];
    },
    deserialize(serialized) {
        if (serialized.isError) {
            throw Object.assign(new Error(serialized.value.message), serialized.value);
        }
        throw serialized.value;
    },
};
/**
 * Allows customizing the serialization of certain values.
 */
const transferHandlers = new Map([
    ["proxy", proxyTransferHandler],
    ["throw", throwTransferHandler],
]);
function isAllowedOrigin(allowedOrigins, origin) {
    for (const allowedOrigin of allowedOrigins) {
        if (origin === allowedOrigin || allowedOrigin === "*") {
            return true;
        }
        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {
            return true;
        }
    }
    return false;
}
function expose(obj, ep = globalThis, allowedOrigins = ["*"]) {
    ep.addEventListener("message", function callback(ev) {
        if (!ev || !ev.data) {
            return;
        }
        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {
            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);
            return;
        }
        const { id, type, path } = Object.assign({ path: [] }, ev.data);
        const argumentList = (ev.data.argumentList || []).map(fromWireValue);
        let returnValue;
        try {
            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);
            const rawValue = path.reduce((obj, prop) => obj[prop], obj);
            switch (type) {
                case "GET" /* MessageType.GET */:
                    {
                        returnValue = rawValue;
                    }
                    break;
                case "SET" /* MessageType.SET */:
                    {
                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);
                        returnValue = true;
                    }
                    break;
                case "APPLY" /* MessageType.APPLY */:
                    {
                        returnValue = rawValue.apply(parent, argumentList);
                    }
                    break;
                case "CONSTRUCT" /* MessageType.CONSTRUCT */:
                    {
                        const value = new rawValue(...argumentList);
                        returnValue = proxy(value);
                    }
                    break;
                case "ENDPOINT" /* MessageType.ENDPOINT */:
                    {
                        const { port1, port2 } = new MessageChannel();
                        expose(obj, port2);
                        returnValue = transfer(port1, [port1]);
                    }
                    break;
                case "RELEASE" /* MessageType.RELEASE */:
                    {
                        returnValue = undefined;
                    }
                    break;
                default:
                    return;
            }
        }
        catch (value) {
            returnValue = { value, [throwMarker]: 0 };
        }
        Promise.resolve(returnValue)
            .catch((value) => {
            return { value, [throwMarker]: 0 };
        })
            .then((returnValue) => {
            const [wireValue, transferables] = toWireValue(returnValue);
            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
            if (type === "RELEASE" /* MessageType.RELEASE */) {
                // detach and deactive after sending release response above.
                ep.removeEventListener("message", callback);
                closeEndPoint(ep);
                if (finalizer in obj && typeof obj[finalizer] === "function") {
                    obj[finalizer]();
                }
            }
        })
            .catch((error) => {
            // Send Serialization Error To Caller
            const [wireValue, transferables] = toWireValue({
                value: new TypeError("Unserializable return value"),
                [throwMarker]: 0,
            });
            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
        });
    });
    if (ep.start) {
        ep.start();
    }
}
function isMessagePort(endpoint) {
    return endpoint.constructor.name === "MessagePort";
}
function closeEndPoint(endpoint) {
    if (isMessagePort(endpoint))
        endpoint.close();
}
function wrap(ep, target) {
    return createProxy(ep, [], target);
}
function throwIfProxyReleased(isReleased) {
    if (isReleased) {
        throw new Error("Proxy has been released and is not useable");
    }
}
function releaseEndpoint(ep) {
    return requestResponseMessage(ep, {
        type: "RELEASE" /* MessageType.RELEASE */,
    }).then(() => {
        closeEndPoint(ep);
    });
}
const proxyCounter = new WeakMap();
const proxyFinalizers = "FinalizationRegistry" in globalThis &&
    new FinalizationRegistry((ep) => {
        const newCount = (proxyCounter.get(ep) || 0) - 1;
        proxyCounter.set(ep, newCount);
        if (newCount === 0) {
            releaseEndpoint(ep);
        }
    });
function registerProxy(proxy, ep) {
    const newCount = (proxyCounter.get(ep) || 0) + 1;
    proxyCounter.set(ep, newCount);
    if (proxyFinalizers) {
        proxyFinalizers.register(proxy, ep, proxy);
    }
}
function unregisterProxy(proxy) {
    if (proxyFinalizers) {
        proxyFinalizers.unregister(proxy);
    }
}
function createProxy(ep, path = [], target = function () { }) {
    let isProxyReleased = false;
    const proxy = new Proxy(target, {
        get(_target, prop) {
            throwIfProxyReleased(isProxyReleased);
            if (prop === releaseProxy) {
                return () => {
                    unregisterProxy(proxy);
                    releaseEndpoint(ep);
                    isProxyReleased = true;
                };
            }
            if (prop === "then") {
                if (path.length === 0) {
                    return { then: () => proxy };
                }
                const r = requestResponseMessage(ep, {
                    type: "GET" /* MessageType.GET */,
                    path: path.map((p) => p.toString()),
                }).then(fromWireValue);
                return r.then.bind(r);
            }
            return createProxy(ep, [...path, prop]);
        },
        set(_target, prop, rawValue) {
            throwIfProxyReleased(isProxyReleased);
            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a
            // boolean. To show good will, we return true asynchronously ¯\_(ツ)_/¯
            const [value, transferables] = toWireValue(rawValue);
            return requestResponseMessage(ep, {
                type: "SET" /* MessageType.SET */,
                path: [...path, prop].map((p) => p.toString()),
                value,
            }, transferables).then(fromWireValue);
        },
        apply(_target, _thisArg, rawArgumentList) {
            throwIfProxyReleased(isProxyReleased);
            const last = path[path.length - 1];
            if (last === createEndpoint) {
                return requestResponseMessage(ep, {
                    type: "ENDPOINT" /* MessageType.ENDPOINT */,
                }).then(fromWireValue);
            }
            // We just pretend that `bind()` didn’t happen.
            if (last === "bind") {
                return createProxy(ep, path.slice(0, -1));
            }
            const [argumentList, transferables] = processArguments(rawArgumentList);
            return requestResponseMessage(ep, {
                type: "APPLY" /* MessageType.APPLY */,
                path: path.map((p) => p.toString()),
                argumentList,
            }, transferables).then(fromWireValue);
        },
        construct(_target, rawArgumentList) {
            throwIfProxyReleased(isProxyReleased);
            const [argumentList, transferables] = processArguments(rawArgumentList);
            return requestResponseMessage(ep, {
                type: "CONSTRUCT" /* MessageType.CONSTRUCT */,
                path: path.map((p) => p.toString()),
                argumentList,
            }, transferables).then(fromWireValue);
        },
    });
    registerProxy(proxy, ep);
    return proxy;
}
function myFlat(arr) {
    return Array.prototype.concat.apply([], arr);
}
function processArguments(argumentList) {
    const processed = argumentList.map(toWireValue);
    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];
}
const transferCache = new WeakMap();
function transfer(obj, transfers) {
    transferCache.set(obj, transfers);
    return obj;
}
function proxy(obj) {
    return Object.assign(obj, { [proxyMarker]: true });
}
function windowEndpoint(w, context = globalThis, targetOrigin = "*") {
    return {
        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),
        addEventListener: context.addEventListener.bind(context),
        removeEventListener: context.removeEventListener.bind(context),
    };
}
function toWireValue(value) {
    for (const [name, handler] of transferHandlers) {
        if (handler.canHandle(value)) {
            const [serializedValue, transferables] = handler.serialize(value);
            return [
                {
                    type: "HANDLER" /* WireValueType.HANDLER */,
                    name,
                    value: serializedValue,
                },
                transferables,
            ];
        }
    }
    return [
        {
            type: "RAW" /* WireValueType.RAW */,
            value,
        },
        transferCache.get(value) || [],
    ];
}
function fromWireValue(value) {
    switch (value.type) {
        case "HANDLER" /* WireValueType.HANDLER */:
            return transferHandlers.get(value.name).deserialize(value.value);
        case "RAW" /* WireValueType.RAW */:
            return value.value;
    }
}
function requestResponseMessage(ep, msg, transfers) {
    return new Promise((resolve) => {
        const id = generateUUID();
        ep.addEventListener("message", function l(ev) {
            if (!ev.data || !ev.data.id || ev.data.id !== id) {
                return;
            }
            ep.removeEventListener("message", l);
            resolve(ev.data);
        });
        if (ep.start) {
            ep.start();
        }
        ep.postMessage(Object.assign({ id }, msg), transfers);
    });
}
function generateUUID() {
    return new Array(4)
        .fill(0)
        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))
        .join("-");
}


//# sourceMappingURL=comlink.mjs.map

;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/lib/kernel.js





/**
 * A kernel that executes Python code with Pyodide.
 */
class PyodideKernel extends BaseKernel {
  /**
   * Instantiate a new PyodideKernel
   *
   * @param options The instantiation options for a new PyodideKernel
   */
  constructor(options) {
    super(options);
    this._ready = new dist.PromiseDelegate();
    this._worker = this.initWorker(options);
    this._worker.onmessage = e => this._processWorkerMessage(e.data);
    this._remoteKernel = wrap(this._worker);
    this.initRemote(options);
  }
  /**
   * Load the worker.
   *
   * ### Note
   *
   * Subclasses must implement this typographically almost _exactly_ for
   * webpack to find it.
   */
  initWorker(options) {
    return new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(3596), __webpack_require__.b), {
      type: undefined
    });
  }
  async initRemote(options) {
    const remoteOptions = this.initRemoteOptions(options);
    await this._remoteKernel.initialize(remoteOptions);
    this._ready.resolve();
  }
  initRemoteOptions(options) {
    const {
      pyodideUrl
    } = options;
    const indexUrl = pyodideUrl.slice(0, pyodideUrl.lastIndexOf('/') + 1);
    const baseUrl = lib.PageConfig.getBaseUrl();
    const pipliteUrls = [...(options.pipliteUrls || []), all_namespaceObject];
    const disablePyPIFallback = !!options.disablePyPIFallback;
    return {
      baseUrl,
      pyodideUrl,
      indexUrl,
      pipliteWheelUrl: options.pipliteWheelUrl || piplite_0_2_3_py3_none_any_namespaceObject,
      pipliteUrls,
      disablePyPIFallback,
      location: this.location,
      mountDrive: options.mountDrive
    };
  }
  /**
   * Dispose the kernel.
   */
  dispose() {
    if (this.isDisposed) {
      return;
    }
    this._worker.terminate();
    this._worker = null;
    super.dispose();
  }
  /**
   * A promise that is fulfilled when the kernel is ready.
   */
  get ready() {
    return this._ready.promise;
  }
  /**
   * Process a message coming from the pyodide web worker.
   *
   * @param msg The worker message to process.
   */
  _processWorkerMessage(msg) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!msg.type) {
      return;
    }
    switch (msg.type) {
      case 'stream':
        {
          const bundle = (_a = msg.bundle) !== null && _a !== void 0 ? _a : {
            name: 'stdout',
            text: ''
          };
          this.stream(bundle, msg.parentHeader);
          break;
        }
      case 'input_request':
        {
          const bundle = (_b = msg.content) !== null && _b !== void 0 ? _b : {
            prompt: '',
            password: false
          };
          this.inputRequest(bundle, msg.parentHeader);
          break;
        }
      case 'display_data':
        {
          const bundle = (_c = msg.bundle) !== null && _c !== void 0 ? _c : {
            data: {},
            metadata: {},
            transient: {}
          };
          this.displayData(bundle, msg.parentHeader);
          break;
        }
      case 'update_display_data':
        {
          const bundle = (_d = msg.bundle) !== null && _d !== void 0 ? _d : {
            data: {},
            metadata: {},
            transient: {}
          };
          this.updateDisplayData(bundle, msg.parentHeader);
          break;
        }
      case 'clear_output':
        {
          const bundle = (_e = msg.bundle) !== null && _e !== void 0 ? _e : {
            wait: false
          };
          this.clearOutput(bundle, msg.parentHeader);
          break;
        }
      case 'execute_result':
        {
          const bundle = (_f = msg.bundle) !== null && _f !== void 0 ? _f : {
            execution_count: 0,
            data: {},
            metadata: {}
          };
          this.publishExecuteResult(bundle, msg.parentHeader);
          break;
        }
      case 'execute_error':
        {
          const bundle = (_g = msg.bundle) !== null && _g !== void 0 ? _g : {
            ename: '',
            evalue: '',
            traceback: []
          };
          this.publishExecuteError(bundle, msg.parentHeader);
          break;
        }
      case 'comm_msg':
      case 'comm_open':
      case 'comm_close':
        {
          this.handleComm(msg.type, msg.content, msg.metadata, msg.buffers, msg.parentHeader);
          break;
        }
    }
  }
  /**
   * Handle a kernel_info_request message
   */
  async kernelInfoRequest() {
    const content = {
      implementation: 'pyodide',
      implementation_version: '0.1.0',
      language_info: {
        codemirror_mode: {
          name: 'python',
          version: 3
        },
        file_extension: '.py',
        mimetype: 'text/x-python',
        name: 'python',
        nbconvert_exporter: 'python',
        pygments_lexer: 'ipython3',
        version: '3.8'
      },
      protocol_version: '5.3',
      status: 'ok',
      banner: 'A WebAssembly-powered Python kernel backed by Pyodide',
      help_links: [{
        text: 'Python (WASM) Kernel',
        url: 'https://pyodide.org'
      }]
    };
    return content;
  }
  /**
   * Handle an `execute_request` message
   *
   * @param msg The parent message.
   */
  async executeRequest(content) {
    await this.ready;
    const result = await this._remoteKernel.execute(content, this.parent);
    result.execution_count = this.executionCount;
    return result;
  }
  /**
   * Handle an complete_request message
   *
   * @param msg The parent message.
   */
  async completeRequest(content) {
    return await this._remoteKernel.complete(content, this.parent);
  }
  /**
   * Handle an `inspect_request` message.
   *
   * @param content - The content of the request.
   *
   * @returns A promise that resolves with the response message.
   */
  async inspectRequest(content) {
    return await this._remoteKernel.inspect(content, this.parent);
  }
  /**
   * Handle an `is_complete_request` message.
   *
   * @param content - The content of the request.
   *
   * @returns A promise that resolves with the response message.
   */
  async isCompleteRequest(content) {
    return await this._remoteKernel.isComplete(content, this.parent);
  }
  /**
   * Handle a `comm_info_request` message.
   *
   * @param content - The content of the request.
   *
   * @returns A promise that resolves with the response message.
   */
  async commInfoRequest(content) {
    return await this._remoteKernel.commInfo(content, this.parent);
  }
  /**
   * Send an `comm_open` message.
   *
   * @param msg - The comm_open message.
   */
  async commOpen(msg) {
    return await this._remoteKernel.commOpen(msg, this.parent);
  }
  /**
   * Send an `comm_msg` message.
   *
   * @param msg - The comm_msg message.
   */
  async commMsg(msg) {
    return await this._remoteKernel.commMsg(msg, this.parent);
  }
  /**
   * Send an `comm_close` message.
   *
   * @param close - The comm_close message.
   */
  async commClose(msg) {
    return await this._remoteKernel.commClose(msg, this.parent);
  }
  /**
   * Send an `input_reply` message.
   *
   * @param content - The content of the reply.
   */
  async inputReply(content) {
    return await this._remoteKernel.inputReply(content, this.parent);
  }
}
;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/schema/piplite.v0.schema.json
const piplite_v0_schema_namespaceObject = JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema","$id":"https://jupyterlite-pyodide-kernel.readthedocs.org/en/latest/reference/schema/piplite-v0.html#","title":"PipLite Schema v0","description":"a schema for the warehouse-like API index","$ref":"#/definitions/top","definitions":{"top":{"type":"object","patternProperties":{".*":{"$ref":"#/definitions/a-piplite-project"}}},"a-piplite-project":{"type":"object","description":"a piplite-installable project, with one or more historical releases","properties":{"releases":{"patternProperties":{".*":{"type":"array","items":{"$ref":"#/definitions/a-piplite-distribution"}}}}}},"a-piplite-distribution":{"type":"object","properties":{"comment_text":{"type":"string"},"digests":{"type":"object","properties":{"md5":{"$ref":"#/definitions/an-md5-digest"},"sha256":{"$ref":"#/definitions/a-sha256-digest"}}},"downloads":{"type":"number"},"filename":{"type":"string"},"has_sig":{"type":"boolean"},"md5_digest":{"$ref":"#/definitions/an-md5-digest"},"packagetype":{"type":"string","enum":["bdist_wheel"]},"python_version":{"type":"string"},"requires_python":{"$ref":"#/definitions/string-or-null"},"size":{"type":"number"},"upload_time":{"type":"string","format":"date-time"},"upload_time_iso_8601":{"type":"string","format":"date-time"},"url":{"type":"string","format":"uri"},"yanked":{"type":"boolean"},"yanked_reason":{"$ref":"#/definitions/string-or-null"}}},"string-or-null":{"anyOf":[{"type":"string"},{"type":"null"}]},"an-md5-digest":{"type":"string","pattern":"[a-f0-9]{32}"},"a-sha256-digest":{"type":"string","pattern":"[a-f0-9]{64}"}}}');
var schema_piplite_v0_schema_namespaceObject = /*#__PURE__*/__webpack_require__.t(piplite_v0_schema_namespaceObject, 2);
;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/lib/tokens.js
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * The schema for a Warehouse-like index, as used by piplite.
 */


// EXTERNAL MODULE: ./node_modules/@jupyterlite/pyodide-kernel/lib/worker.js
var worker = __webpack_require__(87179);
;// CONCATENATED MODULE: ./node_modules/@jupyterlite/pyodide-kernel/lib/index.js
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.






/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,