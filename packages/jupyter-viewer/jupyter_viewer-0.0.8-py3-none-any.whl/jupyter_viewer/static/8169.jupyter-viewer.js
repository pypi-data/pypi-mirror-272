"use strict";
(self["webpackChunk_datalayer_jupyter_viewer"] = self["webpackChunk_datalayer_jupyter_viewer"] || []).push([[8169],{

/***/ 58169:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "json": () => (/* binding */ json),
  "jsonLanguage": () => (/* binding */ jsonLanguage),
  "jsonParseLinter": () => (/* binding */ jsonParseLinter)
});

// EXTERNAL MODULE: ./node_modules/@lezer/lr/dist/index.js
var dist = __webpack_require__(37734);
// EXTERNAL MODULE: ./node_modules/@lezer/highlight/dist/index.js
var highlight_dist = __webpack_require__(36345);
;// CONCATENATED MODULE: ./node_modules/@lezer/json/dist/index.js


const jsonHighlighting = (0,highlight_dist/* styleTags */.Gv)({
  String: highlight_dist/* tags.string */.pJ.string,
  Number: highlight_dist/* tags.number */.pJ.number,
  "True False": highlight_dist/* tags.bool */.pJ.bool,
  PropertyName: highlight_dist/* tags.propertyName */.pJ.propertyName,
  Null: highlight_dist/* tags.null */.pJ["null"],
  ",": highlight_dist/* tags.separator */.pJ.separator,
  "[ ]": highlight_dist/* tags.squareBracket */.pJ.squareBracket,
  "{ }": highlight_dist/* tags.brace */.pJ.brace
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = dist/* LRParser.deserialize */.WQ.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
  stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
  goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "âš  JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
  maxTerm: 25,
  nodeProps: [["isolate", -2, 6, 11, ""], ["openedBy", 7, "{", 12, "["], ["closedBy", 8, "}", 13, "]"]],
  propSources: [jsonHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oc~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Oe~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zOh~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yOg~~'OO]~~'TO[~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
  tokenizers: [0],
  topRules: {
    "JsonText": [0, 1]
  },
  tokenPrec: 0
});

// EXTERNAL MODULE: ./node_modules/@codemirror/language/dist/index.js
var language_dist = __webpack_require__(50478);
;// CONCATENATED MODULE: ./node_modules/@codemirror/lang-json/dist/index.js



/**
Calls
[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)
on the document and, if that throws an error, reports it as a
single diagnostic.
*/
const jsonParseLinter = () => view => {
  try {
    JSON.parse(view.state.doc.toString());
  } catch (e) {
    if (!(e instanceof SyntaxError)) throw e;
    const pos = getErrorPosition(e, view.state.doc);
    return [{
      from: pos,
      message: e.message,
      severity: 'error',
      to: pos
    }];
  }
  return [];
};
function getErrorPosition(error, doc) {
  let m;
  if (m = error.message.match(/at position (\d+)/)) return Math.min(+m[1], doc.length);
  if (m = error.message.match(/at line (\d+) column (\d+)/)) return Math.min(doc.line(+m[1]).from + +m[2] - 1, doc.length);
  return 0;
}

/**
A language provider that provides JSON parsing.
*/
const jsonLanguage = /*@__PURE__*/language_dist/* LRLanguage.define */.qp.define({
  name: "json",
  parser: /*@__PURE__*/parser.configure({
    props: [/*@__PURE__*/language_dist/* indentNodeProp.add */.uj.add({
      Object: /*@__PURE__*/(0,language_dist/* continuedIndent */.tC)({
        except: /^\s*\}/
      }),
      Array: /*@__PURE__*/(0,language_dist/* continuedIndent */.tC)({
        except: /^\s*\]/
      })
    }), /*@__PURE__*/language_dist/* foldNodeProp.add */.x0.add({
      "Object Array": language_dist/* foldInside */.Dv
    })]
  }),
  languageData: {
    closeBrackets: {
      brackets: ["[", "{", '"']
    },
    indentOnInput: /^\s*[\}\]]$/
  }
});
/**
JSON language support.
*/
function json() {
  return new language_dist/* LanguageSupport */.ri(jsonLanguage);
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE2OS5qdXB5dGVyLXZpZXdlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkYXRhbGF5ZXIvanVweXRlci12aWV3ZXIvLi9ub2RlX21vZHVsZXMvQGxlemVyL2pzb24vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AZGF0YWxheWVyL2p1cHl0ZXItdmlld2VyLy4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xhbmctanNvbi9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExSUGFyc2VyIH0gZnJvbSAnQGxlemVyL2xyJztcbmltcG9ydCB7IHN0eWxlVGFncywgdGFncyB9IGZyb20gJ0BsZXplci9oaWdobGlnaHQnO1xuY29uc3QganNvbkhpZ2hsaWdodGluZyA9IHN0eWxlVGFncyh7XG4gIFN0cmluZzogdGFncy5zdHJpbmcsXG4gIE51bWJlcjogdGFncy5udW1iZXIsXG4gIFwiVHJ1ZSBGYWxzZVwiOiB0YWdzLmJvb2wsXG4gIFByb3BlcnR5TmFtZTogdGFncy5wcm9wZXJ0eU5hbWUsXG4gIE51bGw6IHRhZ3MubnVsbCxcbiAgXCIsXCI6IHRhZ3Muc2VwYXJhdG9yLFxuICBcIlsgXVwiOiB0YWdzLnNxdWFyZUJyYWNrZXQsXG4gIFwieyB9XCI6IHRhZ3MuYnJhY2Vcbn0pO1xuXG4vLyBUaGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSBsZXplci1nZW5lcmF0b3IuIFlvdSBwcm9iYWJseSBzaG91bGRuJ3QgZWRpdCBpdC5cbmNvbnN0IHBhcnNlciA9IExSUGFyc2VyLmRlc2VyaWFsaXplKHtcbiAgdmVyc2lvbjogMTQsXG4gIHN0YXRlczogXCIkYk9WUVBPT09PUU8nI0NiJyNDYk9uUVBPJyNDZU92UVBPJyNDak9PUU8nI0NwJyNDcFFPUVBPT09PUU8nI0NnJyNDZ099UVBPJyNDZk8hU1FQTycjQ3JPT1FPLDU5UCw1OVBPIVtRUE8sNTlQTyFhUVBPJyNDdU9PUU8sNTlVLDU5VU8haVFQTyw1OVVPVlFQTyw1OVFPcVFQTycjQ2tPIW5RUE8sNTleT09RTzFHLmsxRy5rT1ZRUE8nI0NsTyF2UVBPLDU5YU9PUU8xRy5wMUcucE9PUU8xRy5sMUcubE9PUU8sNTlWLDU5Vk9PUU8tRTZpLUU2aU9PUU8sNTlXLDU5V09PUU8tRTZqLUU2alwiLFxuICBzdGF0ZURhdGE6IFwiI09+T2NPU35PUVNPUlNPU1NPVFNPV1FPXVJPZVBPfk9WWE9lVU9+T1tbT35QVk9nXk9+T2hfT1ZmWH5PVmFPfk9oYk9baVh+T1tkT35PaF9PVmZhfk9oYk9baWF+T1wiLFxuICBnb3RvOiBcIiFralBQUFBQUGtQUGtxd1BQa3shUlBQUCFYUCFlUFAhaFhTT1JeYlFXUVJmX1RWUV9RYFdSZ2BRY1pSaWNRVE9RWlJRZV5SaGJSWVFSXVJcIixcbiAgbm9kZU5hbWVzOiBcIuKaoCBKc29uVGV4dCBUcnVlIEZhbHNlIE51bGwgTnVtYmVyIFN0cmluZyB9IHsgT2JqZWN0IFByb3BlcnR5IFByb3BlcnR5TmFtZSBdIFsgQXJyYXlcIixcbiAgbWF4VGVybTogMjUsXG4gIG5vZGVQcm9wczogW1tcImlzb2xhdGVcIiwgLTIsIDYsIDExLCBcIlwiXSwgW1wib3BlbmVkQnlcIiwgNywgXCJ7XCIsIDEyLCBcIltcIl0sIFtcImNsb3NlZEJ5XCIsIDgsIFwifVwiLCAxMywgXCJdXCJdXSxcbiAgcHJvcFNvdXJjZXM6IFtqc29uSGlnaGxpZ2h0aW5nXSxcbiAgc2tpcHBlZE5vZGVzOiBbMF0sXG4gIHJlcGVhdE5vZGVDb3VudDogMixcbiAgdG9rZW5EYXRhOiBcIih8flJhWFkhV1laIVddXiFXcHEhV3JzIV18fSR1fSFPJHohUSFSJVQhUiFbJmMhWyFdJnQhfSNPJnkjUCNRJ08jWSNaJ1QjYiNjJ3IjaCNpKFojbyNwKHIjcSNyKHd+IV1PY35+IWBXcHEhXXFyIV1ycyF4cyNPIV0jTyNQIX0jUDsnUyFdOydTOz1gJG88JWxPIV1+IX1PZX5+I1FYcnMhXSFQIVEhXSNPI1AhXSNVI1YhXSNZI1ohXSNiI2MhXSNmI2chXSNoI2khXSNpI2ojbX4jcFIhUSFbI3khYyFpI3kjVCNaI3l+I3xSIVEhWyRWIWMhaSRWI1QjWiRWfiRZUiFRIVskYyFjIWkkYyNUI1okY34kZlIhUSFbIV0hYyFpIV0jVCNaIV1+JHJQOz1gPCVsIV1+JHpPaH5+JH1RIVEhUiVUIVIhWyZjfiVZUlR+IU8hUCVjIWchaCV3I1gjWSV3fiVmUCFRIVslaX4lblJUfiFRIVslaSFnIWgldyNYI1kld34lelJ7fCZUfSFPJlQhUSFbJlp+JldQIVEhWyZafiZgUFR+IVEhWyZafiZoU1R+IU8hUCVjIVEhWyZjIWchaCV3I1gjWSV3fiZ5T2d+fidPT11+fidUT1t+fidXUCNUI1UnWn4nXlAjYCNhJ2F+J2RQI2cjaCdnfidqUCNYI1knbX4nck9Sfn4ndVAjaSNqJ3h+J3tQI2AjYShPfihSUCNgI2EoVX4oWk9Tfn4oXlAjZiNnKGF+KGRQI2kjaihnfihqUCNYI1kobX4ock9Rfn4od09Xfn4ofE9WflwiLFxuICB0b2tlbml6ZXJzOiBbMF0sXG4gIHRvcFJ1bGVzOiB7XG4gICAgXCJKc29uVGV4dFwiOiBbMCwgMV1cbiAgfSxcbiAgdG9rZW5QcmVjOiAwXG59KTtcbmV4cG9ydCB7IHBhcnNlciB9OyIsImltcG9ydCB7IHBhcnNlciB9IGZyb20gJ0BsZXplci9qc29uJztcbmltcG9ydCB7IExSTGFuZ3VhZ2UsIGluZGVudE5vZGVQcm9wLCBjb250aW51ZWRJbmRlbnQsIGZvbGROb2RlUHJvcCwgZm9sZEluc2lkZSwgTGFuZ3VhZ2VTdXBwb3J0IH0gZnJvbSAnQGNvZGVtaXJyb3IvbGFuZ3VhZ2UnO1xuXG4vKipcbkNhbGxzXG5bYEpTT04ucGFyc2VgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9KU09OL3BhcnNlKVxub24gdGhlIGRvY3VtZW50IGFuZCwgaWYgdGhhdCB0aHJvd3MgYW4gZXJyb3IsIHJlcG9ydHMgaXQgYXMgYVxuc2luZ2xlIGRpYWdub3N0aWMuXG4qL1xuY29uc3QganNvblBhcnNlTGludGVyID0gKCkgPT4gdmlldyA9PiB7XG4gIHRyeSB7XG4gICAgSlNPTi5wYXJzZSh2aWV3LnN0YXRlLmRvYy50b1N0cmluZygpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICghKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcikpIHRocm93IGU7XG4gICAgY29uc3QgcG9zID0gZ2V0RXJyb3JQb3NpdGlvbihlLCB2aWV3LnN0YXRlLmRvYyk7XG4gICAgcmV0dXJuIFt7XG4gICAgICBmcm9tOiBwb3MsXG4gICAgICBtZXNzYWdlOiBlLm1lc3NhZ2UsXG4gICAgICBzZXZlcml0eTogJ2Vycm9yJyxcbiAgICAgIHRvOiBwb3NcbiAgICB9XTtcbiAgfVxuICByZXR1cm4gW107XG59O1xuZnVuY3Rpb24gZ2V0RXJyb3JQb3NpdGlvbihlcnJvciwgZG9jKSB7XG4gIGxldCBtO1xuICBpZiAobSA9IGVycm9yLm1lc3NhZ2UubWF0Y2goL2F0IHBvc2l0aW9uIChcXGQrKS8pKSByZXR1cm4gTWF0aC5taW4oK21bMV0sIGRvYy5sZW5ndGgpO1xuICBpZiAobSA9IGVycm9yLm1lc3NhZ2UubWF0Y2goL2F0IGxpbmUgKFxcZCspIGNvbHVtbiAoXFxkKykvKSkgcmV0dXJuIE1hdGgubWluKGRvYy5saW5lKCttWzFdKS5mcm9tICsgK21bMl0gLSAxLCBkb2MubGVuZ3RoKTtcbiAgcmV0dXJuIDA7XG59XG5cbi8qKlxuQSBsYW5ndWFnZSBwcm92aWRlciB0aGF0IHByb3ZpZGVzIEpTT04gcGFyc2luZy5cbiovXG5jb25zdCBqc29uTGFuZ3VhZ2UgPSAvKkBfX1BVUkVfXyovTFJMYW5ndWFnZS5kZWZpbmUoe1xuICBuYW1lOiBcImpzb25cIixcbiAgcGFyc2VyOiAvKkBfX1BVUkVfXyovcGFyc2VyLmNvbmZpZ3VyZSh7XG4gICAgcHJvcHM6IFsvKkBfX1BVUkVfXyovaW5kZW50Tm9kZVByb3AuYWRkKHtcbiAgICAgIE9iamVjdDogLypAX19QVVJFX18qL2NvbnRpbnVlZEluZGVudCh7XG4gICAgICAgIGV4Y2VwdDogL15cXHMqXFx9L1xuICAgICAgfSksXG4gICAgICBBcnJheTogLypAX19QVVJFX18qL2NvbnRpbnVlZEluZGVudCh7XG4gICAgICAgIGV4Y2VwdDogL15cXHMqXFxdL1xuICAgICAgfSlcbiAgICB9KSwgLypAX19QVVJFX18qL2ZvbGROb2RlUHJvcC5hZGQoe1xuICAgICAgXCJPYmplY3QgQXJyYXlcIjogZm9sZEluc2lkZVxuICAgIH0pXVxuICB9KSxcbiAgbGFuZ3VhZ2VEYXRhOiB7XG4gICAgY2xvc2VCcmFja2V0czoge1xuICAgICAgYnJhY2tldHM6IFtcIltcIiwgXCJ7XCIsICdcIiddXG4gICAgfSxcbiAgICBpbmRlbnRPbklucHV0OiAvXlxccypbXFx9XFxdXSQvXG4gIH1cbn0pO1xuLyoqXG5KU09OIGxhbmd1YWdlIHN1cHBvcnQuXG4qL1xuZnVuY3Rpb24ganNvbigpIHtcbiAgcmV0dXJuIG5ldyBMYW5ndWFnZVN1cHBvcnQoanNvbkxhbmd1YWdlKTtcbn1cbmV4cG9ydCB7IGpzb24sIGpzb25MYW5ndWFnZSwganNvblBhcnNlTGludGVyIH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9