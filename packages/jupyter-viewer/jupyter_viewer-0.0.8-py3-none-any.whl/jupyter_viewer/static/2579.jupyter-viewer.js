"use strict";
(self["webpackChunk_datalayer_jupyter_viewer"] = self["webpackChunk_datalayer_jupyter_viewer"] || []).push([[2579],{

/***/ 2579:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pig": () => (/* binding */ pig)
/* harmony export */ });
function words(str) {
  var obj = {},
    words = str.split(" ");
  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
  return obj;
}

// builtin funcs taken from trunk revision 1303237
var pBuiltins = "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL " + "CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS " + "DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG " + "FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN " + "INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER " + "ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS " + "LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  " + "PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE " + "SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG " + "TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER ";

// taken from QueryLexer.g
var pKeywords = "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP " + "JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL " + "PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE " + "SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE " + "NEQ MATCHES TRUE FALSE DUMP";

// data types
var pTypes = "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP ";
var builtins = words(pBuiltins),
  keywords = words(pKeywords),
  types = words(pTypes);
var isOperatorChar = /[*+\-%<>=&?:\/!|]/;
function chain(stream, state, f) {
  state.tokenize = f;
  return f(stream, state);
}
function tokenComment(stream, state) {
  var isEnd = false;
  var ch;
  while (ch = stream.next()) {
    if (ch == "/" && isEnd) {
      state.tokenize = tokenBase;
      break;
    }
    isEnd = ch == "*";
  }
  return "comment";
}
function tokenString(quote) {
  return function (stream, state) {
    var escaped = false,
      next,
      end = false;
    while ((next = stream.next()) != null) {
      if (next == quote && !escaped) {
        end = true;
        break;
      }
      escaped = !escaped && next == "\\";
    }
    if (end || !escaped) state.tokenize = tokenBase;
    return "error";
  };
}
function tokenBase(stream, state) {
  var ch = stream.next();

  // is a start of string?
  if (ch == '"' || ch == "'") return chain(stream, state, tokenString(ch));
  // is it one of the special chars
  else if (/[\[\]{}\(\),;\.]/.test(ch)) return null;
  // is it a number?
  else if (/\d/.test(ch)) {
    stream.eatWhile(/[\w\.]/);
    return "number";
  }
  // multi line comment or operator
  else if (ch == "/") {
    if (stream.eat("*")) {
      return chain(stream, state, tokenComment);
    } else {
      stream.eatWhile(isOperatorChar);
      return "operator";
    }
  }
  // single line comment or operator
  else if (ch == "-") {
    if (stream.eat("-")) {
      stream.skipToEnd();
      return "comment";
    } else {
      stream.eatWhile(isOperatorChar);
      return "operator";
    }
  }
  // is it an operator
  else if (isOperatorChar.test(ch)) {
    stream.eatWhile(isOperatorChar);
    return "operator";
  } else {
    // get the while word
    stream.eatWhile(/[\w\$_]/);
    // is it one of the listed keywords?
    if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {
      //keywords can be used as variables like flatten(group), group.$0 etc..
      if (!stream.eat(")") && !stream.eat(".")) return "keyword";
    }
    // is it one of the builtin functions?
    if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) return "builtin";
    // is it one of the listed types?
    if (types && types.propertyIsEnumerable(stream.current().toUpperCase())) return "type";
    // default is a 'variable'
    return "variable";
  }
}

// Interface
const pig = {
  name: "pig",
  startState: function () {
    return {
      tokenize: tokenBase,
      startOfLine: true
    };
  },
  token: function (stream, state) {
    if (stream.eatSpace()) return null;
    var style = state.tokenize(stream, state);
    return style;
  },
  languageData: {
    autocomplete: (pBuiltins + pTypes + pKeywords).split(" ")
  }
};

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU3OS5qdXB5dGVyLXZpZXdlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGF0YWxheWVyL2p1cHl0ZXItdmlld2VyLy4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3BpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3b3JkcyhzdHIpIHtcbiAgdmFyIG9iaiA9IHt9LFxuICAgIHdvcmRzID0gc3RyLnNwbGl0KFwiIFwiKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7ICsraSkgb2JqW3dvcmRzW2ldXSA9IHRydWU7XG4gIHJldHVybiBvYmo7XG59XG5cbi8vIGJ1aWx0aW4gZnVuY3MgdGFrZW4gZnJvbSB0cnVuayByZXZpc2lvbiAxMzAzMjM3XG52YXIgcEJ1aWx0aW5zID0gXCJBQlMgQUNPUyBBUklUWSBBU0lOIEFUQU4gQVZHIEJBR1NJWkUgQklOU1RPUkFHRSBCTE9PTSBCVUlMREJMT09NIENCUlQgQ0VJTCBcIiArIFwiQ09OQ0FUIENPUiBDT1MgQ09TSCBDT1VOVCBDT1VOVF9TVEFSIENPViBDT05TVEFOVFNJWkUgQ1VCRURJTUVOU0lPTlMgRElGRiBESVNUSU5DVCBET1VCTEVBQlMgXCIgKyBcIkRPVUJMRUFWRyBET1VCTEVCQVNFIERPVUJMRU1BWCBET1VCTEVNSU4gRE9VQkxFUk9VTkQgRE9VQkxFU1VNIEVYUCBGTE9PUiBGTE9BVEFCUyBGTE9BVEFWRyBcIiArIFwiRkxPQVRNQVggRkxPQVRNSU4gRkxPQVRST1VORCBGTE9BVFNVTSBHRU5FUklDSU5WT0tFUiBJTkRFWE9GIElOVEFCUyBJTlRBVkcgSU5UTUFYIElOVE1JTiBcIiArIFwiSU5UU1VNIElOVk9LRUZPUkRPVUJMRSBJTlZPS0VGT1JGTE9BVCBJTlZPS0VGT1JJTlQgSU5WT0tFRk9STE9ORyBJTlZPS0VGT1JTVFJJTkcgSU5WT0tFUiBcIiArIFwiSVNFTVBUWSBKU09OTE9BREVSIEpTT05NRVRBREFUQSBKU09OU1RPUkFHRSBMQVNUX0lOREVYX09GIExDRklSU1QgTE9HIExPRzEwIExPV0VSIExPTkdBQlMgXCIgKyBcIkxPTkdBVkcgTE9OR01BWCBMT05HTUlOIExPTkdTVU0gTUFYIE1JTiBNQVBTSVpFIE1PTklUT1JFRFVERiBOT05ERVRFUk1JTklTVElDIE9VVFBVVFNDSEVNQSAgXCIgKyBcIlBJR1NUT1JBR0UgUElHU1RSRUFNSU5HIFJBTkRPTSBSRUdFWF9FWFRSQUNUIFJFR0VYX0VYVFJBQ1RfQUxMIFJFUExBQ0UgUk9VTkQgU0lOIFNJTkggU0laRSBcIiArIFwiU1FSVCBTVFJTUExJVCBTVUJTVFJJTkcgU1VNIFNUUklOR0NPTkNBVCBTVFJJTkdNQVggU1RSSU5HTUlOIFNUUklOR1NJWkUgVEFOIFRBTkggVE9CQUcgXCIgKyBcIlRPS0VOSVpFIFRPTUFQIFRPUCBUT1RVUExFIFRSSU0gVEVYVExPQURFUiBUVVBMRVNJWkUgVUNGSVJTVCBVUFBFUiBVVEY4U1RPUkFHRUNPTlZFUlRFUiBcIjtcblxuLy8gdGFrZW4gZnJvbSBRdWVyeUxleGVyLmdcbnZhciBwS2V5d29yZHMgPSBcIlZPSUQgSU1QT1JUIFJFVFVSTlMgREVGSU5FIExPQUQgRklMVEVSIEZPUkVBQ0ggT1JERVIgQ1VCRSBESVNUSU5DVCBDT0dST1VQIFwiICsgXCJKT0lOIENST1NTIFVOSU9OIFNQTElUIElOVE8gSUYgT1RIRVJXSVNFIEFMTCBBUyBCWSBVU0lORyBJTk5FUiBPVVRFUiBPTlNDSEVNQSBQQVJBTExFTCBcIiArIFwiUEFSVElUSU9OIEdST1VQIEFORCBPUiBOT1QgR0VORVJBVEUgRkxBVFRFTiBBU0MgREVTQyBJUyBTVFJFQU0gVEhST1VHSCBTVE9SRSBNQVBSRURVQ0UgXCIgKyBcIlNISVAgQ0FDSEUgSU5QVVQgT1VUUFVUIFNUREVSUk9SIFNURElOIFNURE9VVCBMSU1JVCBTQU1QTEUgTEVGVCBSSUdIVCBGVUxMIEVRIEdUIExUIEdURSBMVEUgXCIgKyBcIk5FUSBNQVRDSEVTIFRSVUUgRkFMU0UgRFVNUFwiO1xuXG4vLyBkYXRhIHR5cGVzXG52YXIgcFR5cGVzID0gXCJCT09MRUFOIElOVCBMT05HIEZMT0FUIERPVUJMRSBDSEFSQVJSQVkgQllURUFSUkFZIEJBRyBUVVBMRSBNQVAgXCI7XG52YXIgYnVpbHRpbnMgPSB3b3JkcyhwQnVpbHRpbnMpLFxuICBrZXl3b3JkcyA9IHdvcmRzKHBLZXl3b3JkcyksXG4gIHR5cGVzID0gd29yZHMocFR5cGVzKTtcbnZhciBpc09wZXJhdG9yQ2hhciA9IC9bKitcXC0lPD49Jj86XFwvIXxdLztcbmZ1bmN0aW9uIGNoYWluKHN0cmVhbSwgc3RhdGUsIGYpIHtcbiAgc3RhdGUudG9rZW5pemUgPSBmO1xuICByZXR1cm4gZihzdHJlYW0sIHN0YXRlKTtcbn1cbmZ1bmN0aW9uIHRva2VuQ29tbWVudChzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBpc0VuZCA9IGZhbHNlO1xuICB2YXIgY2g7XG4gIHdoaWxlIChjaCA9IHN0cmVhbS5uZXh0KCkpIHtcbiAgICBpZiAoY2ggPT0gXCIvXCIgJiYgaXNFbmQpIHtcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlzRW5kID0gY2ggPT0gXCIqXCI7XG4gIH1cbiAgcmV0dXJuIFwiY29tbWVudFwiO1xufVxuZnVuY3Rpb24gdG9rZW5TdHJpbmcocXVvdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGVzY2FwZWQgPSBmYWxzZSxcbiAgICAgIG5leHQsXG4gICAgICBlbmQgPSBmYWxzZTtcbiAgICB3aGlsZSAoKG5leHQgPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKSB7XG4gICAgICBpZiAobmV4dCA9PSBxdW90ZSAmJiAhZXNjYXBlZCkge1xuICAgICAgICBlbmQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGVzY2FwZWQgPSAhZXNjYXBlZCAmJiBuZXh0ID09IFwiXFxcXFwiO1xuICAgIH1cbiAgICBpZiAoZW5kIHx8ICFlc2NhcGVkKSBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICByZXR1cm4gXCJlcnJvclwiO1xuICB9O1xufVxuZnVuY3Rpb24gdG9rZW5CYXNlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTtcblxuICAvLyBpcyBhIHN0YXJ0IG9mIHN0cmluZz9cbiAgaWYgKGNoID09ICdcIicgfHwgY2ggPT0gXCInXCIpIHJldHVybiBjaGFpbihzdHJlYW0sIHN0YXRlLCB0b2tlblN0cmluZyhjaCkpO1xuICAvLyBpcyBpdCBvbmUgb2YgdGhlIHNwZWNpYWwgY2hhcnNcbiAgZWxzZSBpZiAoL1tcXFtcXF17fVxcKFxcKSw7XFwuXS8udGVzdChjaCkpIHJldHVybiBudWxsO1xuICAvLyBpcyBpdCBhIG51bWJlcj9cbiAgZWxzZSBpZiAoL1xcZC8udGVzdChjaCkpIHtcbiAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXC5dLyk7XG4gICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gIH1cbiAgLy8gbXVsdGkgbGluZSBjb21tZW50IG9yIG9wZXJhdG9yXG4gIGVsc2UgaWYgKGNoID09IFwiL1wiKSB7XG4gICAgaWYgKHN0cmVhbS5lYXQoXCIqXCIpKSB7XG4gICAgICByZXR1cm4gY2hhaW4oc3RyZWFtLCBzdGF0ZSwgdG9rZW5Db21tZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKGlzT3BlcmF0b3JDaGFyKTtcbiAgICAgIHJldHVybiBcIm9wZXJhdG9yXCI7XG4gICAgfVxuICB9XG4gIC8vIHNpbmdsZSBsaW5lIGNvbW1lbnQgb3Igb3BlcmF0b3JcbiAgZWxzZSBpZiAoY2ggPT0gXCItXCIpIHtcbiAgICBpZiAoc3RyZWFtLmVhdChcIi1cIikpIHtcbiAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKGlzT3BlcmF0b3JDaGFyKTtcbiAgICAgIHJldHVybiBcIm9wZXJhdG9yXCI7XG4gICAgfVxuICB9XG4gIC8vIGlzIGl0IGFuIG9wZXJhdG9yXG4gIGVsc2UgaWYgKGlzT3BlcmF0b3JDaGFyLnRlc3QoY2gpKSB7XG4gICAgc3RyZWFtLmVhdFdoaWxlKGlzT3BlcmF0b3JDaGFyKTtcbiAgICByZXR1cm4gXCJvcGVyYXRvclwiO1xuICB9IGVsc2Uge1xuICAgIC8vIGdldCB0aGUgd2hpbGUgd29yZFxuICAgIHN0cmVhbS5lYXRXaGlsZSgvW1xcd1xcJF9dLyk7XG4gICAgLy8gaXMgaXQgb25lIG9mIHRoZSBsaXN0ZWQga2V5d29yZHM/XG4gICAgaWYgKGtleXdvcmRzICYmIGtleXdvcmRzLnByb3BlcnR5SXNFbnVtZXJhYmxlKHN0cmVhbS5jdXJyZW50KCkudG9VcHBlckNhc2UoKSkpIHtcbiAgICAgIC8va2V5d29yZHMgY2FuIGJlIHVzZWQgYXMgdmFyaWFibGVzIGxpa2UgZmxhdHRlbihncm91cCksIGdyb3VwLiQwIGV0Yy4uXG4gICAgICBpZiAoIXN0cmVhbS5lYXQoXCIpXCIpICYmICFzdHJlYW0uZWF0KFwiLlwiKSkgcmV0dXJuIFwia2V5d29yZFwiO1xuICAgIH1cbiAgICAvLyBpcyBpdCBvbmUgb2YgdGhlIGJ1aWx0aW4gZnVuY3Rpb25zP1xuICAgIGlmIChidWlsdGlucyAmJiBidWlsdGlucy5wcm9wZXJ0eUlzRW51bWVyYWJsZShzdHJlYW0uY3VycmVudCgpLnRvVXBwZXJDYXNlKCkpKSByZXR1cm4gXCJidWlsdGluXCI7XG4gICAgLy8gaXMgaXQgb25lIG9mIHRoZSBsaXN0ZWQgdHlwZXM/XG4gICAgaWYgKHR5cGVzICYmIHR5cGVzLnByb3BlcnR5SXNFbnVtZXJhYmxlKHN0cmVhbS5jdXJyZW50KCkudG9VcHBlckNhc2UoKSkpIHJldHVybiBcInR5cGVcIjtcbiAgICAvLyBkZWZhdWx0IGlzIGEgJ3ZhcmlhYmxlJ1xuICAgIHJldHVybiBcInZhcmlhYmxlXCI7XG4gIH1cbn1cblxuLy8gSW50ZXJmYWNlXG5leHBvcnQgY29uc3QgcGlnID0ge1xuICBuYW1lOiBcInBpZ1wiLFxuICBzdGFydFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuaXplOiB0b2tlbkJhc2UsXG4gICAgICBzdGFydE9mTGluZTogdHJ1ZVxuICAgIH07XG4gIH0sXG4gIHRva2VuOiBmdW5jdGlvbiAoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0uZWF0U3BhY2UoKSkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9LFxuICBsYW5ndWFnZURhdGE6IHtcbiAgICBhdXRvY29tcGxldGU6IChwQnVpbHRpbnMgKyBwVHlwZXMgKyBwS2V5d29yZHMpLnNwbGl0KFwiIFwiKVxuICB9XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==