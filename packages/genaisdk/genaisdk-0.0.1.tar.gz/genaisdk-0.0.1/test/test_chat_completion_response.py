# coding: utf-8

"""
    Grounding Hub REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from groundinghub.models.chat_completion_response import ChatCompletionResponse

class TestChatCompletionResponse(unittest.TestCase):
    """ChatCompletionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChatCompletionResponse:
        """Test ChatCompletionResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChatCompletionResponse`
        """
        model = ChatCompletionResponse()
        if include_optional:
            return ChatCompletionResponse(
                completion = 'Sure, here is incomes for the last 4 three for the Hitach GenAI Platform project: ...',
                documents = [
                    groundinghub.models.document.Document(
                        similarity = 0.97, 
                        metadata = groundinghub.models.document_metadata.DocumentMetadata(
                            source_mime_type = 'application/pdf', 
                            title = 'Quater financial report', 
                            authors = [
                                groundinghub.models.author.Author(
                                    name = '', 
                                    email = '', )
                                ], 
                            mime_type = 'text/plain', 
                            url = 'https://hitachi-doc.com/public/reports/879asjalsasf9913.pdf', 
                            created = '2023-07-21T17:32:28Z', 
                            tags = ["public","financial","hitachi-genai-platform"], 
                            position = groundinghub.models.position.Position(
                                offset = 1233, 
                                length = 354, ), ), 
                        content = Here some data extracted from the document..., )
                    ],
                model = 'gpt-4-32k'
            )
        else:
            return ChatCompletionResponse(
                completion = 'Sure, here is incomes for the last 4 three for the Hitach GenAI Platform project: ...',
        )
        """

    def testChatCompletionResponse(self):
        """Test ChatCompletionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
