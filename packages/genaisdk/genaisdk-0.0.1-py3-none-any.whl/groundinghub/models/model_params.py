# coding: utf-8

"""
    Grounding Hub REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ModelParams(BaseModel):
    """
    ModelParams
    """ # noqa: E501
    temperature: Optional[Union[Annotated[float, Field(le=2, strict=True, ge=0)], Annotated[int, Field(le=2, strict=True, ge=0)]]] = Field(default=None, description="Temperature value for the top-p sampling. The higher the value, the more random the output. Lower values leads to generation of more focused and deterministic completions. It is suggested to alter this of ```top_p```, but not both. If not set or ```null``` then the default value for the corresponding model will be used.")
    top_p: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="Sample from tokens with ```top_p``` probability mass, e.g. 0.2 means only the tokens comprising the top 20% probability mass are considered, while 1.0 means all tokens will be considered. The higher the value, the more random the output. If not set or ```null``` then the default value for the corresponding ```model``` will be used. It is suggested to alter this of ```temperature```, but not both.")
    max_tokens: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=16, description="Maximum number of tokens to generate. The higher the value, the more random the output. The total length of input tokens and generated tokens is limited by the model's context length. Zero value means max possible number of tokens.")
    stop: Optional[List[StrictStr]] = Field(default=None, description="List of sequences where the API will stop generating further tokens. The supported number of sequences depends on the model.")
    __properties: ClassVar[List[str]] = ["temperature", "top_p", "max_tokens", "stop"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if temperature (nullable) is None
        # and model_fields_set contains the field
        if self.temperature is None and "temperature" in self.model_fields_set:
            _dict['temperature'] = None

        # set to None if top_p (nullable) is None
        # and model_fields_set contains the field
        if self.top_p is None and "top_p" in self.model_fields_set:
            _dict['top_p'] = None

        # set to None if stop (nullable) is None
        # and model_fields_set contains the field
        if self.stop is None and "stop" in self.model_fields_set:
            _dict['stop'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "temperature": obj.get("temperature"),
            "top_p": obj.get("top_p"),
            "max_tokens": obj.get("max_tokens") if obj.get("max_tokens") is not None else 16,
            "stop": obj.get("stop")
        })
        return _obj


