# coding: utf-8

"""
    Grounding Hub REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from groundinghub.models.message import Message
from groundinghub.models.model_settings import ModelSettings
from groundinghub.models.prompt_config import PromptConfig
from groundinghub.models.rag_config import RAGConfig
from typing import Optional, Set
from typing_extensions import Self

class ChatCompletionRequest(BaseModel):
    """
    ChatCompletionRequest
    """ # noqa: E501
    query: StrictStr = Field(description="The query from the client app")
    messages: Optional[List[Dict[str, Message]]] = Field(default=None, description="Chat history")
    rag_config: Optional[RAGConfig] = None
    prompt_config: Optional[PromptConfig] = None
    model_settings: Optional[ModelSettings] = None
    __properties: ClassVar[List[str]] = ["query", "messages", "rag_config", "prompt_config", "model_settings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatCompletionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item in self.messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of rag_config
        if self.rag_config:
            _dict['rag_config'] = self.rag_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prompt_config
        if self.prompt_config:
            _dict['prompt_config'] = self.prompt_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_settings
        if self.model_settings:
            _dict['model_settings'] = self.model_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatCompletionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "query": obj.get("query"),
            "messages": [Dict[str, Message].from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "rag_config": RAGConfig.from_dict(obj["rag_config"]) if obj.get("rag_config") is not None else None,
            "prompt_config": PromptConfig.from_dict(obj["prompt_config"]) if obj.get("prompt_config") is not None else None,
            "model_settings": ModelSettings.from_dict(obj["model_settings"]) if obj.get("model_settings") is not None else None
        })
        return _obj


