Metadata-Version: 2.1
Name: more_math
Version: 1.0
Summary: A package for more math functions the are not in the builtin 'math'   module
Author: MY_USERNAME
Author-email: unknownuser170911alt@gmail.com
Description-Content-Type: text/markdown

<h1>More Math Python Library</h1>

<h2>An Introduction</h2>

Welcome to the More Math Python library!

In this library, you will have many functions that are not in the built-in "math"
module.

<h2>A Brief Summary of this Module</h2>

<h3>Basic Functions</h3>

Here are some basic functions:

<code>is_prime(number: int) -> bool</code> and <code>is_composite(number: int) -> bool</code> check the primality of a number.

<code>is_square(number: int) -> bool</code> checks whether a number is a square or not.

<code>is_cube(number: int) -> bool</code> checks whether a number is a cube or not.

<code>is_square_and_cube(number: int) -> bool</code> checks whether both the conditions given above are satisfied.

<code>is_co_prime(number: int) -> bool</code> checks whether numbers do not have common factors.

<h3>HCF and LCM</h3>

The function <code>hcf(*numbers: int) -> int:</code> gives the highest common factor (HCF)
of a set of numbers.

The function <code>lcm(*numbers: int) -> int:</code> gives the lowest common multiple (LCM)
of a set of numbers.

All numbers in these functions must be greater than 2.

<h3>Exponents and Roots</h3>

<code>is_power_of(number: int, x: int) -> bool:</code> which checks whether <code>number</code> is a power of <code>x</code>.

<code>nth_power_of(number: int, x: int) -> int:</code> which checks which power of <code>x</code> is <code>number</code>.

<code>nth_root_of(number: int, x: int) -> int:</code> which checks which root of <code>x</code> is <code>number</code>.

<h3>Other Properties of Numbers (returns <code>bool</code>)</h3>

<code>is_triangular(number: int) -> bool</code> returns whether a number is triangular 
(=that is a sum of digits from 1 to a number) or not.

<code>is_pentagonal(number: int) -> bool</code> returns whether a number is pentagonal (=that is n(3n+1) / 2) or not.

<code>is_hexagonal(number: int) -> bool</code> returns whether a number is hexagonal (=that is n(2n+1)) or not.

<code>is_strong(number: int) -> bool</code> returns whether the sum of factorials of the digits of a number add up to the number.

<code>is_armstrong(number: int) -> bool</code> returns whether the sum of cubes of the digits of the number add up to the number.

<code>is_mersenne_prime(number: int) -> bool</code> returns whether a number is a Mersenne prime or not.
A Mersenne prime is a prime number which is 1 plus a power of 2.

<h3>Other Properties of Numbers (returns <code>int</code>)</h3>

<code>sum_of_squares_upto(number: int) -> int</code> returns the sum of squares of all the numbers upto the number.

<code>sum_of_cubes_upto(number: int) -> int</code> is the same as the function above, but returns the sum of cubes instead.

<h3>Exceptions</h3>

Exceptions are raised in many of the functions when you enter a number that is less than 1.
They are also raised in <code>nth_power_of(number: int, x: int) -> bool</code> when you enter
<code>number</code> when it is not a power of <code>x</code>.

<h3>How to Install the Module</h3>

1. Open your terminal or command line
2. Run <code>pip install more_math</code>.
3. Add it to your PATH.


Thank you! I hope you like my module.
Reach out to me here: unknownuser170911@gmail.com
Enjoy using the module!
