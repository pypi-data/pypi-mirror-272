# autogenerated module
from typing import List, Optional, TYPE_CHECKING

from ._schema import dataclass, field, DictMixin

if TYPE_CHECKING:   # Fix for pycharm autocompletion https://youtrack.jetbrains.com/issue/PY-54560
    from dataclasses import dataclass, field

from . import meta_v1
from . import core_v1


@dataclass
class CSINode(DictMixin):
    r"""CSINode holds information about all CSI drivers installed on a node. CSI
      drivers do not need to create the CSINode object directly. As long as they use
      the node-driver-registrar sidecar container, the kubelet will automatically
      populate the CSINode object for the CSI driver as part of kubelet plugin
      registration. CSINode has the same name as a node. If the object is missing,
      it means either there are no CSI Drivers available on the node, or the Kubelet
      version is low enough that it doesn't create this object. CSINode has an
      OwnerReference that points to the corresponding node object.

      **parameters**

      * **spec** ``CSINodeSpec`` - spec is the specification of CSINode
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ObjectMeta]`` - metadata.name must be the Kubernetes node name.
    """
    spec: 'CSINodeSpec'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ObjectMeta]' = None


@dataclass
class CSINodeDriver(DictMixin):
    r"""CSINodeDriver holds information about the specification of one CSI driver
      installed on a node

      **parameters**

      * **name** ``str`` - This is the name of the CSI driver that this object refers to. This MUST be
        the same name returned by the CSI GetPluginName() call for that driver.
      * **nodeID** ``str`` - nodeID of the node from the driver point of view. This field enables
        Kubernetes to communicate with storage systems that do not share the same
        nomenclature for nodes. For example, Kubernetes may refer to a given node as
        "node1", but the storage system may refer to the same node as "nodeA". When
        Kubernetes issues a command to the storage system to attach a volume to a
        specific node, it can use this field to refer to the node name using the ID
        that the storage system will understand, e.g. "nodeA" instead of "node1". This
        field is required.
      * **allocatable** ``Optional[VolumeNodeResources]`` - allocatable represents the volume resources of a node that are available for
        scheduling. This field is beta.
      * **topologyKeys** ``Optional[List[str]]`` - topologyKeys is the list of keys supported by the driver. When a driver is
        initialized on a cluster, it provides a set of topology keys that it
        understands (e.g. "company.com/zone", "company.com/region"). When a driver is
        initialized on a node, it provides the same topology keys along with values.
        Kubelet will expose these topology keys as labels on its own node object. When
        Kubernetes does topology aware provisioning, it can use this list to determine
        which labels it should retrieve from the node object and pass back to the
        driver. It is possible for different nodes to use different topology keys.
        This can be empty if driver does not support topology.
    """
    name: 'str'
    nodeID: 'str'
    allocatable: 'Optional[VolumeNodeResources]' = None
    topologyKeys: 'Optional[List[str]]' = None


@dataclass
class CSINodeList(DictMixin):
    r"""CSINodeList is a collection of CSINode objects.

      **parameters**

      * **items** ``List[CSINode]`` - items is the list of CSINode
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ListMeta]`` - Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    items: 'List[CSINode]'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ListMeta]' = None


@dataclass
class CSINodeSpec(DictMixin):
    r"""CSINodeSpec holds information about the specification of all CSI drivers
      installed on a node

      **parameters**

      * **drivers** ``List[CSINodeDriver]`` - drivers is a list of information of all CSI Drivers existing on a node. If all
        drivers in the list are uninstalled, this can become empty.
    """
    drivers: 'List[CSINodeDriver]'


@dataclass
class StorageClass(DictMixin):
    r"""StorageClass describes the parameters for a class of storage for which
      PersistentVolumes can be dynamically provisioned.
      
      StorageClasses are non-namespaced; the name of the storage class according to
      etcd is in ObjectMeta.Name.

      **parameters**

      * **provisioner** ``str`` - Provisioner indicates the type of the provisioner.
      * **allowVolumeExpansion** ``Optional[bool]`` - AllowVolumeExpansion shows whether the storage class allow volume expand
      * **allowedTopologies** ``Optional[List[core_v1.TopologySelectorTerm]]`` - Restrict the node topologies where volumes can be dynamically provisioned.
        Each volume plugin defines its own supported topology specifications. An empty
        TopologySelectorTerm list means there is no topology restriction. This field
        is only honored by servers that enable the VolumeScheduling feature.
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ObjectMeta]`` - Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
      * **mountOptions** ``Optional[List[str]]`` - Dynamically provisioned PersistentVolumes of this storage class are created
        with these mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs
        will simply fail if one is invalid.
      * **parameters** ``Optional[dict]`` - Parameters holds the parameters for the provisioner that should create volumes
        of this storage class.
      * **reclaimPolicy** ``Optional[str]`` - Dynamically provisioned PersistentVolumes of this storage class are created
        with this reclaimPolicy. Defaults to Delete.
      * **volumeBindingMode** ``Optional[str]`` - VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned
        and bound.  When unset, VolumeBindingImmediate is used. This field is only
        honored by servers that enable the VolumeScheduling feature.
    """
    provisioner: 'str'
    allowVolumeExpansion: 'Optional[bool]' = None
    allowedTopologies: 'Optional[List[core_v1.TopologySelectorTerm]]' = None
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ObjectMeta]' = None
    mountOptions: 'Optional[List[str]]' = None
    parameters: 'Optional[dict]' = None
    reclaimPolicy: 'Optional[str]' = None
    volumeBindingMode: 'Optional[str]' = None


@dataclass
class StorageClassList(DictMixin):
    r"""StorageClassList is a collection of storage classes.

      **parameters**

      * **items** ``List[StorageClass]`` - Items is the list of StorageClasses
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ListMeta]`` - Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    items: 'List[StorageClass]'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ListMeta]' = None


@dataclass
class VolumeAttachment(DictMixin):
    r"""VolumeAttachment captures the intent to attach or detach the specified volume
      to/from the specified node.
      
      VolumeAttachment objects are non-namespaced.

      **parameters**

      * **spec** ``VolumeAttachmentSpec`` - Specification of the desired attach/detach volume behavior. Populated by the
        Kubernetes system.
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ObjectMeta]`` - Standard object metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
      * **status** ``Optional[VolumeAttachmentStatus]`` - Status of the VolumeAttachment request. Populated by the entity completing the
        attach or detach operation, i.e. the external-attacher.
    """
    spec: 'VolumeAttachmentSpec'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ObjectMeta]' = None
    status: 'Optional[VolumeAttachmentStatus]' = None


@dataclass
class VolumeAttachmentList(DictMixin):
    r"""VolumeAttachmentList is a collection of VolumeAttachment objects.

      **parameters**

      * **items** ``List[VolumeAttachment]`` - Items is the list of VolumeAttachments
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ListMeta]`` - Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    items: 'List[VolumeAttachment]'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ListMeta]' = None


@dataclass
class VolumeAttachmentSource(DictMixin):
    r"""VolumeAttachmentSource represents a volume that should be attached. Right now
      only PersistenVolumes can be attached via external attacher, in future we may
      allow also inline volumes in pods. Exactly one member can be set.

      **parameters**

      * **inlineVolumeSpec** ``Optional[core_v1.PersistentVolumeSpec]`` - inlineVolumeSpec contains all the information necessary to attach a persistent
        volume defined by a pod's inline VolumeSource. This field is populated only
        for the CSIMigration feature. It contains translated fields from a pod's
        inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and
        is only honored by servers that enabled the CSIMigration feature.
      * **persistentVolumeName** ``Optional[str]`` - Name of the persistent volume to attach.
    """
    inlineVolumeSpec: 'Optional[core_v1.PersistentVolumeSpec]' = None
    persistentVolumeName: 'Optional[str]' = None


@dataclass
class VolumeAttachmentSpec(DictMixin):
    r"""VolumeAttachmentSpec is the specification of a VolumeAttachment request.

      **parameters**

      * **attacher** ``str`` - Attacher indicates the name of the volume driver that MUST handle this
        request. This is the name returned by GetPluginName().
      * **nodeName** ``str`` - The node that the volume should be attached to.
      * **source** ``VolumeAttachmentSource`` - Source represents the volume that should be attached.
    """
    attacher: 'str'
    nodeName: 'str'
    source: 'VolumeAttachmentSource'


@dataclass
class VolumeAttachmentStatus(DictMixin):
    r"""VolumeAttachmentStatus is the status of a VolumeAttachment request.

      **parameters**

      * **attached** ``bool`` - Indicates the volume is successfully attached. This field must only be set by
        the entity completing the attach operation, i.e. the external-attacher.
      * **attachError** ``Optional[VolumeError]`` - The last error encountered during attach operation, if any. This field must
        only be set by the entity completing the attach operation, i.e. the
        external-attacher.
      * **attachmentMetadata** ``Optional[dict]`` - Upon successful attach, this field is populated with any information returned
        by the attach operation that must be passed into subsequent WaitForAttach or
        Mount calls. This field must only be set by the entity completing the attach
        operation, i.e. the external-attacher.
      * **detachError** ``Optional[VolumeError]`` - The last error encountered during detach operation, if any. This field must
        only be set by the entity completing the detach operation, i.e. the
        external-attacher.
    """
    attached: 'bool'
    attachError: 'Optional[VolumeError]' = None
    attachmentMetadata: 'Optional[dict]' = None
    detachError: 'Optional[VolumeError]' = None


@dataclass
class VolumeError(DictMixin):
    r"""VolumeError captures an error encountered during a volume operation.

      **parameters**

      * **message** ``Optional[str]`` - String detailing the error encountered during Attach or Detach operation. This
        string may be logged, so it should not contain sensitive information.
      * **time** ``Optional[meta_v1.Time]`` - Time the error was encountered.
    """
    message: 'Optional[str]' = None
    time: 'Optional[meta_v1.Time]' = None


@dataclass
class VolumeNodeResources(DictMixin):
    r"""VolumeNodeResources is a set of resource limits for scheduling of volumes.

      **parameters**

      * **count** ``Optional[int]`` - Maximum number of unique volumes managed by the CSI driver that can be used on
        a node. A volume that is both attached and mounted on a node is considered to
        be used once, not twice. The same rule applies for a unique volume that is
        shared among multiple pods on the same node. If this field is not specified,
        then the supported number of volumes on this node is unbounded.
    """
    count: 'Optional[int]' = None


