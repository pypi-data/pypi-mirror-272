{"version":3,"file":"dfcells_lib_index_js.5771a3cfd390e699eb97.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4B;AACJ;AACC;AACzB;;;;;;;;;;;;;;;;;ACX2D;AAC3D;AACO,gCAAgC,wDAAS;AAChD;AACA;AACA,8BAA8B,yDAAyD;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uEAAwB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE,CAAC,8CAA8C;AACxC,kCAAkC,0DAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC3EoH;AACpH,YAAY,mBAAmB;AAC/B,YAAY,aAAa;AACzB,2BAA2B;AAC3B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACO,gCAAgC,wDAAS;AAChD;AACA;AACA;AACA;AACA;AACO,2CAA2C,mEAAoB;AACtE;AACA;AACA;AACA;AACA;AACO,mCAAmC,2DAAY;AACtD;AACA;AACA;AACA;AACA;AACO,wCAAwC,gEAAiB;AAChE;AACA;AACA;AACA;AACA;AACO,oCAAoC,4DAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACzE2F;AACtB;AACe;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,yDAAiB;AACzC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,yBAAyB,wEAAkB;AAC3C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,mDAAI;AACtC;AACA,8BAA8B,oDAAoD;AAClF,2CAA2C,oDAAoD;AAC/F;AACA;AACA;AACA,iCAAiC,kEAAmB;AACpD;AACA;AACA;AACA;AACA,uBAAuB,2DAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA,uBAAuB,0EAAoB;AAC3C;AACA;AACA;AACA,CAAC,oCAAoC;AAC9B,mCAAmC,2DAAY;AACtD;AACA,8BAA8B,oDAAoD;AAClF,2CAA2C,oDAAoD;AAC/F;AACA;AACO,8BAA8B,sDAAO;AAC5C;AACA,8BAA8B,oDAAoD;AAClF,2CAA2C,oDAAoD;AAC/F;AACA;AACO,sCAAsC,8DAAe;AAC5D;AACA,8BAA8B,oDAAoD;AAClF,2CAA2C,oDAAoD;AAC/F;AACA;AACO,+BAA+B,uDAAQ;AAC9C;AACA,8BAA8B,oDAAoD;AAClF,2CAA2C,oDAAoD;AAC/F,4CAA4C,oDAAoD;AAChG;AACA;AACA;AACA,0BAA0B,sDAAsD;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,+DAA+D;AAC/D,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gFAA0B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,4BAA4B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oCAAoC;AACzE;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;;;;;;;;;;;;;;;;;AC7OkE;AAClE;AACO,iCAAiC,8DAAU;AAClD;AACA,8BAA8B,0DAA0D;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,kBAAkB,sBAAsB;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,mCAAmC,gEAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6EAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gDAAgD;AACjD","sources":["webpack://@dfnotebook/dfnotebook-extension/../dfcells/lib/index.js","webpack://@dfnotebook/dfnotebook-extension/../dfcells/lib/inputarea.js","webpack://@dfnotebook/dfnotebook-extension/../dfcells/lib/model.js","webpack://@dfnotebook/dfnotebook-extension/../dfcells/lib/widget.js","webpack://@dfnotebook/dfnotebook-extension/../dfoutputarea/lib/widget.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module dfcells\n */\nexport * from './inputarea';\nexport * from './model';\nexport * from './widget';\n//# sourceMappingURL=index.js.map","import { InputPrompt, InputArea } from \"@jupyterlab/cells\";\nconst INPUT_TAG_CLASS = 'df-InputPrompt-tag';\nexport class DataflowInputArea extends InputArea {\n    // kind of annoying as model still needs to be set later\n    constructor(options) {\n        super(Object.assign({ contentFactory: DataflowInputArea.defaultContentFactory }, options));\n        this.prompt.model = this.model;\n    }\n    get prompt() {\n        //@ts-ignore\n        return this._prompt;\n    }\n    set prompt(value) {\n        value.model = this.model;\n        //@ts-ignore\n        this._prompt = value;\n    }\n    addTag(value) {\n        var _a;\n        (_a = this.model) === null || _a === void 0 ? void 0 : _a.metadata.set('tag', value);\n        this.prompt.updatePromptNode(this.prompt.executionCount);\n    }\n}\n(function (DataflowInputArea) {\n    class ContentFactory extends InputArea.ContentFactory {\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new DataflowInputPrompt();\n        }\n    }\n    DataflowInputArea.ContentFactory = ContentFactory;\n    DataflowInputArea.defaultContentFactory = new ContentFactory({});\n})(DataflowInputArea || (DataflowInputArea = {}));\nexport class DataflowInputPrompt extends InputPrompt {\n    constructor(model = null) {\n        super();\n        this.model = model;\n    }\n    updatePromptNode(value) {\n        var _a;\n        if ((_a = this.model) === null || _a === void 0 ? void 0 : _a.metadata.get('tag')) {\n            this.node.textContent = `[${this.model.metadata.get('tag')}]:`;\n            this.addClass(INPUT_TAG_CLASS);\n        }\n        else if (value === null) {\n            this.node.textContent = ' ';\n            this.removeClass(INPUT_TAG_CLASS);\n        }\n        else {\n            this.node.textContent = `[${value || ' '}]:`;\n            this.removeClass(INPUT_TAG_CLASS);\n        }\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return super.executionCount;\n    }\n    set executionCount(value) {\n        super.executionCount = value;\n        this.updatePromptNode(value);\n    }\n    get model() {\n        return this._model;\n    }\n    set model(value) {\n        this._model = value;\n        if (this._model) {\n            this.updatePromptNode(this.executionCount);\n        }\n    }\n}\n//# sourceMappingURL=inputarea.js.map","import { CellModel, AttachmentsCellModel, RawCellModel, MarkdownCellModel, CodeCellModel } from \"@jupyterlab/cells\";\n// import { IOutputAreaModel } from \"@jupyterlab/outputarea\";\n// import { JSONObject } from \"@lumino/coreutils\";\n// type GConstructor<T = {}> = new (...args: any[]) => T;\n// //type GConstructor<T = {}> = new (options: CellModel.IOptions) => T;\n// type CellModelLike = GConstructor<CellModel>;\n// function SetIdMixin<T extends CellModelLike>(Base: T) {\n//     return class DataflowCellModelBase extends Base {\n//         constructor(...args: any[]) {\n//             super(args[0]);\n//             const metadata = this.modelDB.getValue('metadata') as JSONObject;\n//             metadata['dfnotebook'] = {};\n//             metadata['dfnotebook']['id'] = this.id;\n//         }\n//     }\n// }\n// const DataflowCellModel = SetIdMixin(CellModel);\n// const DataflowCodeCellModel = SetIdMixin(CodeCellModel);\n// export { DataflowCellModel, DataflowCodeCellModel};\nfunction setId(model) {\n    // FIXME don't need this???\n    //\n    // const metadata = model.modelDB.getValue('metadata') as JSONObject;\n    // metadata['dfnotebook'] = {};\n    // metadata['dfnotebook']['id'] = model.id;\n}\nexport class DataflowCellModel extends CellModel {\n    constructor(options) {\n        super(options);\n        setId(this);\n    }\n}\nexport class DataflowAttachmentsCellModel extends AttachmentsCellModel {\n    constructor(options) {\n        super(options);\n        setId(this);\n    }\n}\nexport class DataflowRawCellModel extends RawCellModel {\n    constructor(options) {\n        super(options);\n        setId(this);\n    }\n}\nexport class DataflowMarkdownCellModel extends MarkdownCellModel {\n    constructor(options) {\n        super(options);\n        setId(this);\n    }\n}\nexport class DataflowCodeCellModel extends CodeCellModel {\n    constructor(options) {\n        super(options);\n        setId(this);\n    }\n}\n// export namespace DataflowCodeCellModel {\n//   /**\n//    * The default implementation of an `IContentFactory`.\n//    */\n//    export class ContentFactory extends CodeCellModel.ContentFactory {\n//     /**\n//      * Create an output area.\n//      */\n//     createOutputArea(options: IOutputAreaModel.IOptions): IOutputAreaModel {\n//       return new OutputAreaModel(options);\n//     }\n//   }\n//   /**\n//    * The shared `ContentFactory` instance.\n//    */\n//   export const defaultContentFactory = new ContentFactory();\n// }\n//# sourceMappingURL=model.js.map","import { Cell, CodeCell, MarkdownCell, AttachmentsCell, RawCell } from \"@jupyterlab/cells\";\nimport { DataflowInputArea, DataflowInputPrompt } from \"./inputarea\";\nimport { DataflowOutputArea, DataflowOutputPrompt } from \"@dfnotebook/dfoutputarea\";\n/**\n * The CSS class added to the cell input area.\n */\nconst CELL_INPUT_AREA_CLASS = 'jp-Cell-inputArea';\n/**\n* The CSS class added to the cell output area.\n*/\nconst CELL_OUTPUT_AREA_CLASS = 'jp-Cell-outputArea';\nfunction setInputArea(cell, options) {\n    // FIXME may be able to get panel via (this.layout as PanelLayout).widgets?\n    //@ts-expect-error\n    const panel = cell._inputWrapper;\n    const input = cell.inputArea;\n    // find the input area widget\n    const { id } = input;\n    let input_idx = -1;\n    panel.widgets.forEach((widget, idx) => {\n        if (widget.id === id) {\n            input_idx = idx;\n        }\n    });\n    const dfInput = new DataflowInputArea({\n        model: cell.model,\n        contentFactory: cell.contentFactory,\n        updateOnShow: options.updateEditorOnShow,\n        placeholder: options.placeholder\n    });\n    dfInput.addClass(CELL_INPUT_AREA_CLASS);\n    panel.insertWidget(input_idx, dfInput);\n    input.dispose();\n    //@ts-expect-error\n    cell._input = dfInput;\n}\nfunction setOutputArea(cell, options) {\n    //@ts-expect-error\n    const panel = cell._outputWrapper;\n    const output = cell.outputArea;\n    // find the output area widget\n    const { id } = output;\n    let output_idx = -1;\n    panel.widgets.forEach((widget, idx) => {\n        if (widget.id === id) {\n            output_idx = idx;\n        }\n    });\n    const dfOutput = new DataflowOutputArea({\n        model: cell.model.outputs,\n        rendermime: options.rendermime,\n        contentFactory: cell.contentFactory,\n        maxNumberOutputs: options.maxNumberOutputs\n    }, \n    // FIXME move this to a function to unify with the code below and in dfnotebook/actions.tsx  \n    cell.model.id.replace(/-/g, '').substring(0, 8));\n    dfOutput.addClass(CELL_OUTPUT_AREA_CLASS);\n    output.outputLengthChanged.disconnect(\n    //@ts-expect-error\n    cell._outputLengthHandler, cell);\n    //@ts-expect-error\n    dfOutput.outputLengthChanged.connect(cell._outputLengthHandler, cell);\n    panel.insertWidget(output_idx, dfOutput);\n    output.dispose();\n    //@ts-expect-error\n    cell._output = dfOutput;\n}\nexport class DataflowCell extends Cell {\n    constructor(options) {\n        super(Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n        setInputArea(this, Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n    }\n}\n(function (DataflowCell) {\n    class ContentFactory extends Cell.ContentFactory {\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new DataflowInputPrompt();\n        }\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new DataflowOutputPrompt();\n        }\n    }\n    DataflowCell.ContentFactory = ContentFactory;\n})(DataflowCell || (DataflowCell = {}));\nexport class DataflowMarkdownCell extends MarkdownCell {\n    constructor(options) {\n        super(Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n        setInputArea(this, Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n    }\n}\nexport class DataflowRawCell extends RawCell {\n    constructor(options) {\n        super(Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n        setInputArea(this, Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n    }\n}\nexport class DataflowAttachmentsCell extends AttachmentsCell {\n    constructor(options) {\n        super(Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n        setInputArea(this, Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n    }\n}\nexport class DataflowCodeCell extends CodeCell {\n    constructor(options) {\n        super(Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n        setInputArea(this, Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n        setOutputArea(this, Object.assign({ contentFactory: DataflowCell.defaultContentFactory }, options));\n    }\n    setPromptToId() {\n        // FIXME move this to a function to unify with the code in dfnotebook/actions.tsx\n        this.setPrompt(`${this.model.id.replace(/-/g, '').substring(0, 8) || ''}`);\n    }\n    initializeState() {\n        super.initializeState();\n        this.setPromptToId();\n        return this;\n    }\n    onStateChanged(model, args) {\n        super.onStateChanged(model, args);\n        switch (args.name) {\n            case 'executionCount':\n                this.setPromptToId();\n                break;\n            default:\n                break;\n        }\n    }\n}\n(function (DataflowCodeCell) {\n    /**\n      * Execute a cell given a client session.\n      */\n    async function execute(cell, sessionContext, metadata, dfData, cellIdWidgetMap) {\n        var _a;\n        const model = cell.model;\n        const code = model.value.text;\n        if (!code.trim() || !((_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel)) {\n            model.clearExecution();\n            return;\n        }\n        const cellId = { cellId: model.id };\n        metadata = Object.assign(Object.assign(Object.assign({}, model.metadata.toJSON()), metadata), cellId);\n        const { recordTiming } = metadata;\n        model.clearExecution();\n        cell.outputHidden = false;\n        cell.setPrompt('*');\n        model.trusted = true;\n        let future;\n        try {\n            const msgPromise = DataflowOutputArea.execute(code, cell.outputArea, sessionContext, metadata, dfData, cellIdWidgetMap);\n            // cell.outputArea.future assigned synchronously in `execute`\n            if (recordTiming) {\n                const recordTimingHook = (msg) => {\n                    let label;\n                    switch (msg.header.msg_type) {\n                        case 'status':\n                            label = `status.${msg.content.execution_state}`;\n                            break;\n                        case 'execute_input':\n                            label = 'execute_input';\n                            break;\n                        default:\n                            return true;\n                    }\n                    // If the data is missing, estimate it to now\n                    // Date was added in 5.1: https://jupyter-client.readthedocs.io/en/stable/messaging.html#message-header\n                    const value = msg.header.date || new Date().toISOString();\n                    const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                    timingInfo[`iopub.${label}`] = value;\n                    model.metadata.set('execution', timingInfo);\n                    return true;\n                };\n                cell.outputArea.future.registerMessageHook(recordTimingHook);\n            }\n            else {\n                model.metadata.delete('execution');\n            }\n            const clearOutput = (msg) => {\n                switch (msg.header.msg_type) {\n                    case 'execute_input':\n                        const executionCount = msg.content\n                            .execution_count;\n                        if (executionCount !== null) {\n                            const cellId = executionCount.toString(16).padStart(8, '0');\n                            if (cellIdWidgetMap) {\n                                const cellWidget = cellIdWidgetMap[cellId];\n                                cellWidget.model.value.text = msg.content.code;\n                                const outputArea = cellWidget.outputArea;\n                                outputArea.model.clear();\n                            }\n                        }\n                        break;\n                    default:\n                        return true;\n                }\n                return true;\n            };\n            cell.outputArea.future.registerMessageHook(clearOutput);\n            // Save this execution's future so we can compare in the catch below.\n            future = cell.outputArea.future;\n            const msg = (await msgPromise);\n            model.executionCount = msg.content.execution_count;\n            if (recordTiming) {\n                const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                const started = msg.metadata.started;\n                // Started is not in the API, but metadata IPyKernel sends\n                if (started) {\n                    timingInfo['shell.execute_reply.started'] = started;\n                }\n                // Per above, the 5.0 spec does not assume date, so we estimate is required\n                const finished = msg.header.date;\n                timingInfo['shell.execute_reply'] =\n                    finished || new Date().toISOString();\n                model.metadata.set('execution', timingInfo);\n            }\n            return msg;\n        }\n        catch (e) {\n            // If we started executing, and the cell is still indicating this\n            // execution, clear the prompt.\n            if (future && !cell.isDisposed && cell.outputArea.future === future) {\n                // cell.setPrompt('');\n                // FIXME is this necessary?\n                cell.setPromptToId();\n                // cell.setPrompt(`${cell.model.id.substring(0, 8) || ''}`);\n            }\n            throw e;\n        }\n    }\n    DataflowCodeCell.execute = execute;\n})(DataflowCodeCell || (DataflowCodeCell = {}));\n//# sourceMappingURL=widget.js.map","import { OutputArea, OutputPrompt } from \"@jupyterlab/outputarea\";\nconst OUTPUT_TAG_CLASS = 'df-OutputArea-tag';\nexport class DataflowOutputArea extends OutputArea {\n    constructor(options, cellId) {\n        super(Object.assign({ contentFactory: DataflowOutputArea.defaultContentFactory }, options));\n        this.onIOPub = (msg) => {\n            const msgType = msg.header.msg_type;\n            let output;\n            switch (msgType) {\n                case 'execute_result':\n                case 'display_data':\n                case 'stream':\n                case 'error':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: msgType });\n                    if (output.execution_count) {\n                        const cellId = output.execution_count.toString(16).padStart(8, '0');\n                        if (msgType === 'stream') {\n                            delete output.execution_count;\n                        }\n                        if (cellId !== this.cellId) {\n                            if (DataflowOutputArea.cellIdWidgetMap) {\n                                const cellWidget = DataflowOutputArea.cellIdWidgetMap[cellId];\n                                //@ts-ignore\n                                const outputArea = cellWidget._output;\n                                outputArea._onIOPub(msg);\n                            }\n                            break;\n                        }\n                    }\n                    //@ts-ignore\n                    this._onIOPub(msg);\n                    break;\n                default: {\n                    //@ts-ignore\n                    this._onIOPub(msg);\n                    break;\n                }\n            }\n        };\n        this.cellId = cellId;\n    }\n    get future() {\n        return super.future;\n    }\n    set future(value) {\n        super.future = value;\n        super.future.onIOPub = this.onIOPub;\n    }\n    createOutputItem(model) {\n        const panel = super.createOutputItem(model);\n        if (panel) {\n            if (model.metadata['output_tag']) {\n                const prompt = panel.widgets[0];\n                prompt.outputTag = model.metadata['output_tag'];\n            }\n        }\n        return panel;\n    }\n}\nexport class DataflowOutputPrompt extends OutputPrompt {\n    constructor() {\n        super(...arguments);\n        this._outputTag = '';\n    }\n    updatePrompt() {\n        if (this._outputTag) {\n            this.node.textContent = `${this._outputTag}:`;\n            this.addClass(OUTPUT_TAG_CLASS);\n        }\n        else if (this.executionCount === null) {\n            this.node.textContent = '';\n            this.removeClass(OUTPUT_TAG_CLASS);\n        }\n        else {\n            const cellId = this.executionCount\n                .toString(16)\n                .padStart(8, '0');\n            // .substr(0, 3);\n            this.node.textContent = `[${cellId}]:`;\n            this.removeClass(OUTPUT_TAG_CLASS);\n        }\n    }\n    get executionCount() {\n        return super.executionCount;\n    }\n    set executionCount(value) {\n        super.executionCount = value;\n        this.updatePrompt();\n    }\n    get outputTag() {\n        return this._outputTag;\n    }\n    set outputTag(value) {\n        this._outputTag = value;\n        this.updatePrompt();\n    }\n}\n(function (DataflowOutputArea) {\n    async function execute(code, output, sessionContext, metadata, dfData, cellIdWidgetMap) {\n        var _a;\n        // Override the default for `stop_on_error`.\n        let stopOnError = true;\n        if (metadata &&\n            Array.isArray(metadata.tags) &&\n            metadata.tags.indexOf('raises-exception') !== -1) {\n            stopOnError = false;\n        }\n        if (dfData === undefined) {\n            // FIXME not sure if this works or not...\n            dfData = {};\n        }\n        const content = {\n            code,\n            stop_on_error: stopOnError,\n            user_expressions: { __dfkernel_data__: dfData }\n        };\n        const kernel = (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('Session has no kernel.');\n        }\n        const future = kernel.requestExecute(content, false, metadata);\n        output.future = future;\n        DataflowOutputArea.cellIdWidgetMap = cellIdWidgetMap;\n        return future.done;\n    }\n    DataflowOutputArea.execute = execute;\n    /**\n     * The default implementation of `IContentFactory`.\n     */\n    class ContentFactory extends OutputArea.ContentFactory {\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new DataflowOutputPrompt();\n        }\n    }\n    DataflowOutputArea.ContentFactory = ContentFactory;\n    DataflowOutputArea.defaultContentFactory = new ContentFactory();\n})(DataflowOutputArea || (DataflowOutputArea = {}));\n//# sourceMappingURL=widget.js.map"],"names":[],"sourceRoot":""}